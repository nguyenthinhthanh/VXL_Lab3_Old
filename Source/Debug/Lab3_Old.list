
Lab3_Old.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029bc  080029bc  000039bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e0  080029e0  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  080029e0  080029e0  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e0  080029e0  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e0  080029e0  000039e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029e4  080029e4  000039e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080029e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000010  080029f8  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080029f8  000040b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008675  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c31  00000000  00000000  0000c6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0000e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083b  00000000  00000000  0000edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ec0  00000000  00000000  0000f5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c887  00000000  00000000  000264b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827db  00000000  00000000  00032d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  000b5558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b7fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080029a4 	.word	0x080029a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080029a4 	.word	0x080029a4

0800014c <setEnviromentStateInit>:
#include "fsm.h"

/*Default Mode*/
int FSM_State;

void setEnviromentStateInit(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 8000150:	4b0b      	ldr	r3, [pc, #44]	@ (8000180 <setEnviromentStateInit+0x34>)
 8000152:	2205      	movs	r2, #5
 8000154:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 8000156:	4b0b      	ldr	r3, [pc, #44]	@ (8000184 <setEnviromentStateInit+0x38>)
 8000158:	2203      	movs	r2, #3
 800015a:	601a      	str	r2, [r3, #0]
	/*7Seg display immediate*/
	display7SEG_13(Led13_Count);
 800015c:	4b08      	ldr	r3, [pc, #32]	@ (8000180 <setEnviromentStateInit+0x34>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4618      	mov	r0, r3
 8000162:	f000 faff 	bl	8000764 <display7SEG_13>
	display7SEG_24(Led24_Count);
 8000166:	4b07      	ldr	r3, [pc, #28]	@ (8000184 <setEnviromentStateInit+0x38>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	4618      	mov	r0, r3
 800016c:	f000 fc8a 	bl	8000a84 <display7SEG_24>

	//setTimer(AUTO_INCREASE, 500);
	setEnviromentState0();
 8000170:	f000 f80c 	bl	800018c <setEnviromentState0>
	FSM_State = RED_GREEN_STATE_MODE1;
 8000174:	4b04      	ldr	r3, [pc, #16]	@ (8000188 <setEnviromentStateInit+0x3c>)
 8000176:	2200      	movs	r2, #0
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	2000004c 	.word	0x2000004c
 8000184:	20000050 	.word	0x20000050
 8000188:	2000002c 	.word	0x2000002c

0800018c <setEnviromentState0>:

void setEnviromentState0(void){
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 8000190:	4b08      	ldr	r3, [pc, #32]	@ (80001b4 <setEnviromentState0+0x28>)
 8000192:	2205      	movs	r2, #5
 8000194:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 8000196:	4b08      	ldr	r3, [pc, #32]	@ (80001b8 <setEnviromentState0+0x2c>)
 8000198:	2203      	movs	r2, #3
 800019a:	601a      	str	r2, [r3, #0]
	setTimer(DELAY_TIMER, 1000);
 800019c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80001a0:	2000      	movs	r0, #0
 80001a2:	f001 f809 	bl	80011b8 <setTimer>
	setTimer(TRAFFIC_TIMER, 3000);
 80001a6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80001aa:	2001      	movs	r0, #1
 80001ac:	f001 f804 	bl	80011b8 <setTimer>
}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	2000004c 	.word	0x2000004c
 80001b8:	20000050 	.word	0x20000050

080001bc <setEnviromentState1>:

void setEnviromentState1(void){
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
	Led24_Count = 2;
 80001c0:	4b04      	ldr	r3, [pc, #16]	@ (80001d4 <setEnviromentState1+0x18>)
 80001c2:	2202      	movs	r2, #2
 80001c4:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 80001c6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80001ca:	2001      	movs	r0, #1
 80001cc:	f000 fff4 	bl	80011b8 <setTimer>
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000050 	.word	0x20000050

080001d8 <setEnviromentState2>:
void setEnviromentState2(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	Led13_Count = 3;
 80001dc:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <setEnviromentState2+0x20>)
 80001de:	2203      	movs	r2, #3
 80001e0:	601a      	str	r2, [r3, #0]
	Led24_Count = 5;
 80001e2:	4b06      	ldr	r3, [pc, #24]	@ (80001fc <setEnviromentState2+0x24>)
 80001e4:	2205      	movs	r2, #5
 80001e6:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 3000);
 80001e8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 ffe3 	bl	80011b8 <setTimer>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000004c 	.word	0x2000004c
 80001fc:	20000050 	.word	0x20000050

08000200 <setEnviromentState3>:

void setEnviromentState3(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	Led13_Count = 2;
 8000204:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <setEnviromentState3+0x18>)
 8000206:	2202      	movs	r2, #2
 8000208:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 800020a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800020e:	2001      	movs	r0, #1
 8000210:	f000 ffd2 	bl	80011b8 <setTimer>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	2000004c 	.word	0x2000004c

0800021c <setEnviromentState4>:

void setEnviromentState4(void){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <setEnviromentState5>:

void setEnviromentState5(void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <doState0>:

void setEnviromentState9(void){

}

void doState0(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	doRedGreen_Traffic();
 8000238:	f001 f80c 	bl	8001254 <doRedGreen_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 800023c:	2000      	movs	r0, #0
 800023e:	f000 ffab 	bl	8001198 <getTimerFlags>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d01d      	beq.n	8000284 <doState0+0x50>

		HAL_GPIO_WritePin(CHECK_GPIO_Port, CHECK_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2180      	movs	r1, #128	@ 0x80
 800024c:	480e      	ldr	r0, [pc, #56]	@ (8000288 <doState0+0x54>)
 800024e:	f001 fb92 	bl	8001976 <HAL_GPIO_WritePin>
		display7SEG_13(Led13_Count);
 8000252:	4b0e      	ldr	r3, [pc, #56]	@ (800028c <doState0+0x58>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fa84 	bl	8000764 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <doState0+0x5c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fc0f 	bl	8000a84 <display7SEG_24>


		Led13_Count--;
 8000266:	4b09      	ldr	r3, [pc, #36]	@ (800028c <doState0+0x58>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a07      	ldr	r2, [pc, #28]	@ (800028c <doState0+0x58>)
 800026e:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 8000270:	4b07      	ldr	r3, [pc, #28]	@ (8000290 <doState0+0x5c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a06      	ldr	r2, [pc, #24]	@ (8000290 <doState0+0x5c>)
 8000278:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 800027a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800027e:	2000      	movs	r0, #0
 8000280:	f000 ff9a 	bl	80011b8 <setTimer>
	}
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40010800 	.word	0x40010800
 800028c:	2000004c 	.word	0x2000004c
 8000290:	20000050 	.word	0x20000050

08000294 <doState1>:

void doState1(void){
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	doRedYellow_Traffic();
 8000298:	f001 f802 	bl	80012a0 <doRedYellow_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 800029c:	2000      	movs	r0, #0
 800029e:	f000 ff7b 	bl	8001198 <getTimerFlags>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d018      	beq.n	80002da <doState1+0x46>
		display7SEG_13(Led13_Count);
 80002a8:	4b0d      	ldr	r3, [pc, #52]	@ (80002e0 <doState1+0x4c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fa59 	bl	8000764 <display7SEG_13>
		display7SEG_24(Led24_Count);
 80002b2:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <doState1+0x50>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fbe4 	bl	8000a84 <display7SEG_24>

		Led13_Count--;
 80002bc:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <doState1+0x4c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	4a07      	ldr	r2, [pc, #28]	@ (80002e0 <doState1+0x4c>)
 80002c4:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 80002c6:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <doState1+0x50>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	4a05      	ldr	r2, [pc, #20]	@ (80002e4 <doState1+0x50>)
 80002ce:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 80002d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 ff6f 	bl	80011b8 <setTimer>
	}
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	2000004c 	.word	0x2000004c
 80002e4:	20000050 	.word	0x20000050

080002e8 <doState2>:

void doState2(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	doGreenRed_Traffic();
 80002ec:	f000 ffea 	bl	80012c4 <doGreenRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 ff51 	bl	8001198 <getTimerFlags>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d018      	beq.n	800032e <doState2+0x46>
		display7SEG_13(Led13_Count);
 80002fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000334 <doState2+0x4c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fa2f 	bl	8000764 <display7SEG_13>
		display7SEG_24(Led24_Count);
 8000306:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <doState2+0x50>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fbba 	bl	8000a84 <display7SEG_24>

		Led13_Count--;
 8000310:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <doState2+0x4c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	3b01      	subs	r3, #1
 8000316:	4a07      	ldr	r2, [pc, #28]	@ (8000334 <doState2+0x4c>)
 8000318:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 800031a:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <doState2+0x50>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	3b01      	subs	r3, #1
 8000320:	4a05      	ldr	r2, [pc, #20]	@ (8000338 <doState2+0x50>)
 8000322:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 8000324:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000328:	2000      	movs	r0, #0
 800032a:	f000 ff45 	bl	80011b8 <setTimer>
	}
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000004c 	.word	0x2000004c
 8000338:	20000050 	.word	0x20000050

0800033c <doState3>:

void doState3(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	doYellowRed_Traffic();
 8000340:	f000 ffda 	bl	80012f8 <doYellowRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000344:	2000      	movs	r0, #0
 8000346:	f000 ff27 	bl	8001198 <getTimerFlags>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d018      	beq.n	8000382 <doState3+0x46>
		display7SEG_13(Led13_Count);
 8000350:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <doState3+0x4c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fa05 	bl	8000764 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800035a:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <doState3+0x50>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fb90 	bl	8000a84 <display7SEG_24>

		Led13_Count--;
 8000364:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <doState3+0x4c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3b01      	subs	r3, #1
 800036a:	4a07      	ldr	r2, [pc, #28]	@ (8000388 <doState3+0x4c>)
 800036c:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 800036e:	4b07      	ldr	r3, [pc, #28]	@ (800038c <doState3+0x50>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	3b01      	subs	r3, #1
 8000374:	4a05      	ldr	r2, [pc, #20]	@ (800038c <doState3+0x50>)
 8000376:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 8000378:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800037c:	2000      	movs	r0, #0
 800037e:	f000 ff1b 	bl	80011b8 <setTimer>
	}
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000004c 	.word	0x2000004c
 800038c:	20000050 	.word	0x20000050

08000390 <doState4>:

void doState4(void){
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	if(buttonState[1] == BUTTON_PRESSED){
 8000394:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <doState4+0x1c>)
 8000396:	785b      	ldrb	r3, [r3, #1]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d102      	bne.n	80003a2 <doState4+0x12>
		/*Increase time duration by one*/
		FSM_State = NORMAL_STATE_MODE_2;
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <doState4+0x20>)
 800039e:	2204      	movs	r2, #4
 80003a0:	601a      	str	r2, [r3, #0]
	}

	if(buttonState[2] == BUTTON_PRESSED){
		/*Update blinking time duration*/
	}
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000030 	.word	0x20000030
 80003b0:	2000002c 	.word	0x2000002c

080003b4 <doState5>:

void doState5(void){
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <doState6>:

void doState6(void){
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <runFSM>:

void doState9(void){

}

void runFSM(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	switch(FSM_State){
 80003d0:	4b53      	ldr	r3, [pc, #332]	@ (8000520 <runFSM+0x154>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b06      	cmp	r3, #6
 80003d6:	f200 8091 	bhi.w	80004fc <runFSM+0x130>
 80003da:	a201      	add	r2, pc, #4	@ (adr r2, 80003e0 <runFSM+0x14>)
 80003dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e0:	080003fd 	.word	0x080003fd
 80003e4:	0800042b 	.word	0x0800042b
 80003e8:	08000459 	.word	0x08000459
 80003ec:	08000487 	.word	0x08000487
 80003f0:	080004b5 	.word	0x080004b5
 80003f4:	080004cd 	.word	0x080004cd
 80003f8:	080004e5 	.word	0x080004e5
	case RED_GREEN_STATE_MODE1:
		doState0();
 80003fc:	f7ff ff1a 	bl	8000234 <doState0>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000400:	2001      	movs	r0, #1
 8000402:	f000 fec9 	bl	8001198 <getTimerFlags>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d004      	beq.n	8000416 <runFSM+0x4a>
			setEnviromentState1();
 800040c:	f7ff fed6 	bl	80001bc <setEnviromentState1>
			FSM_State = RED_YELLOW_STATE_MODE1;
 8000410:	4b43      	ldr	r3, [pc, #268]	@ (8000520 <runFSM+0x154>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 8000416:	4b43      	ldr	r3, [pc, #268]	@ (8000524 <runFSM+0x158>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d170      	bne.n	8000500 <runFSM+0x134>
			setEnviromentState4();	/*Mode 2*/
 800041e:	f7ff fefd 	bl	800021c <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 8000422:	4b3f      	ldr	r3, [pc, #252]	@ (8000520 <runFSM+0x154>)
 8000424:	2204      	movs	r2, #4
 8000426:	601a      	str	r2, [r3, #0]
		}
		break;
 8000428:	e06a      	b.n	8000500 <runFSM+0x134>
	case RED_YELLOW_STATE_MODE1:
		doState1();
 800042a:	f7ff ff33 	bl	8000294 <doState1>

		if(getTimerFlags(TRAFFIC_TIMER)){
 800042e:	2001      	movs	r0, #1
 8000430:	f000 feb2 	bl	8001198 <getTimerFlags>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d004      	beq.n	8000444 <runFSM+0x78>
			setEnviromentState2();
 800043a:	f7ff fecd 	bl	80001d8 <setEnviromentState2>
			FSM_State = GREEN_RED_STATE_MODE1;
 800043e:	4b38      	ldr	r3, [pc, #224]	@ (8000520 <runFSM+0x154>)
 8000440:	2202      	movs	r2, #2
 8000442:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 8000444:	4b37      	ldr	r3, [pc, #220]	@ (8000524 <runFSM+0x158>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d15b      	bne.n	8000504 <runFSM+0x138>
			setEnviromentState4();	/*Mode 2*/
 800044c:	f7ff fee6 	bl	800021c <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 8000450:	4b33      	ldr	r3, [pc, #204]	@ (8000520 <runFSM+0x154>)
 8000452:	2204      	movs	r2, #4
 8000454:	601a      	str	r2, [r3, #0]
		}
		break;
 8000456:	e055      	b.n	8000504 <runFSM+0x138>
	case GREEN_RED_STATE_MODE1:
		doState2();
 8000458:	f7ff ff46 	bl	80002e8 <doState2>

		if(getTimerFlags(TRAFFIC_TIMER)){
 800045c:	2001      	movs	r0, #1
 800045e:	f000 fe9b 	bl	8001198 <getTimerFlags>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d004      	beq.n	8000472 <runFSM+0xa6>
			setEnviromentState3();
 8000468:	f7ff feca 	bl	8000200 <setEnviromentState3>
			FSM_State = YELLOW_RED_STATE_MODE1;
 800046c:	4b2c      	ldr	r3, [pc, #176]	@ (8000520 <runFSM+0x154>)
 800046e:	2203      	movs	r2, #3
 8000470:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 8000472:	4b2c      	ldr	r3, [pc, #176]	@ (8000524 <runFSM+0x158>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d146      	bne.n	8000508 <runFSM+0x13c>
			setEnviromentState4();	/*Mode 2*/
 800047a:	f7ff fecf 	bl	800021c <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 800047e:	4b28      	ldr	r3, [pc, #160]	@ (8000520 <runFSM+0x154>)
 8000480:	2204      	movs	r2, #4
 8000482:	601a      	str	r2, [r3, #0]
		}
		break;
 8000484:	e040      	b.n	8000508 <runFSM+0x13c>
	case YELLOW_RED_STATE_MODE1:
		doState3();
 8000486:	f7ff ff59 	bl	800033c <doState3>

		if(getTimerFlags(TRAFFIC_TIMER)){
 800048a:	2001      	movs	r0, #1
 800048c:	f000 fe84 	bl	8001198 <getTimerFlags>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d004      	beq.n	80004a0 <runFSM+0xd4>
			setEnviromentState0();
 8000496:	f7ff fe79 	bl	800018c <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 800049a:	4b21      	ldr	r3, [pc, #132]	@ (8000520 <runFSM+0x154>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 80004a0:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <runFSM+0x158>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d131      	bne.n	800050c <runFSM+0x140>
			setEnviromentState4();	/*Mode 2*/
 80004a8:	f7ff feb8 	bl	800021c <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <runFSM+0x154>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	601a      	str	r2, [r3, #0]
		}
		break;
 80004b2:	e02b      	b.n	800050c <runFSM+0x140>
	case NORMAL_STATE_MODE_2:
		doState4();
 80004b4:	f7ff ff6c 	bl	8000390 <doState4>

		if(buttonState[0] == BUTTON_PRESSED){
 80004b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000524 <runFSM+0x158>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d127      	bne.n	8000510 <runFSM+0x144>
			setEnviromentState5();	/*Mode 3*/
 80004c0:	f7ff feb2 	bl	8000228 <setEnviromentState5>
			FSM_State = NORMAL_STATE_MODE_3;
 80004c4:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <runFSM+0x154>)
 80004c6:	2205      	movs	r2, #5
 80004c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80004ca:	e021      	b.n	8000510 <runFSM+0x144>
	case NORMAL_STATE_MODE_3:
		doState5();
 80004cc:	f7ff ff72 	bl	80003b4 <doState5>

		if(buttonState[0] == BUTTON_PRESSED){
 80004d0:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <runFSM+0x158>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d11d      	bne.n	8000514 <runFSM+0x148>
			setEnviromentState5();	/*Mode 4*/
 80004d8:	f7ff fea6 	bl	8000228 <setEnviromentState5>
			FSM_State = NORMAL_STATE_MODE_4;
 80004dc:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <runFSM+0x154>)
 80004de:	2206      	movs	r2, #6
 80004e0:	601a      	str	r2, [r3, #0]
		}
		break;
 80004e2:	e017      	b.n	8000514 <runFSM+0x148>
	case NORMAL_STATE_MODE_4:
		doState6();
 80004e4:	f7ff ff6c 	bl	80003c0 <doState6>

		if(buttonState[0] == BUTTON_PRESSED){
 80004e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <runFSM+0x158>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d113      	bne.n	8000518 <runFSM+0x14c>
			setEnviromentState0();	/*Mode 1*/
 80004f0:	f7ff fe4c 	bl	800018c <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <runFSM+0x154>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
		}
		break;
 80004fa:	e00d      	b.n	8000518 <runFSM+0x14c>
	default:
		break;
 80004fc:	bf00      	nop
 80004fe:	e00c      	b.n	800051a <runFSM+0x14e>
		break;
 8000500:	bf00      	nop
 8000502:	e00a      	b.n	800051a <runFSM+0x14e>
		break;
 8000504:	bf00      	nop
 8000506:	e008      	b.n	800051a <runFSM+0x14e>
		break;
 8000508:	bf00      	nop
 800050a:	e006      	b.n	800051a <runFSM+0x14e>
		break;
 800050c:	bf00      	nop
 800050e:	e004      	b.n	800051a <runFSM+0x14e>
		break;
 8000510:	bf00      	nop
 8000512:	e002      	b.n	800051a <runFSM+0x14e>
		break;
 8000514:	bf00      	nop
 8000516:	e000      	b.n	800051a <runFSM+0x14e>
		break;
 8000518:	bf00      	nop
	}

	return;
 800051a:	bf00      	nop
}
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c
 8000524:	20000030 	.word	0x20000030

08000528 <fsm_for_input_processing>:

#include "input_processing.h"

enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED,BUTTON_RELEASED,BUTTON_RELEASED};

void fsm_for_input_processing(void){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
	for(int i=0;i<N0_OF_BUTTONS;i++){
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	e04c      	b.n	80005ce <fsm_for_input_processing+0xa6>
		switch(buttonState[i]){
 8000534:	4a2a      	ldr	r2, [pc, #168]	@ (80005e0 <fsm_for_input_processing+0xb8>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d030      	beq.n	80005a2 <fsm_for_input_processing+0x7a>
 8000540:	2b02      	cmp	r3, #2
 8000542:	dc41      	bgt.n	80005c8 <fsm_for_input_processing+0xa0>
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <fsm_for_input_processing+0x26>
 8000548:	2b01      	cmp	r3, #1
 800054a:	d00e      	beq.n	800056a <fsm_for_input_processing+0x42>
 800054c:	e03c      	b.n	80005c8 <fsm_for_input_processing+0xa0>
		case BUTTON_RELEASED:
			if(is_button_pressed(i)){
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f846 	bl	80005e4 <is_button_pressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d02f      	beq.n	80005be <fsm_for_input_processing+0x96>
				buttonState[i] = BUTTON_PRESSED;
 800055e:	4a20      	ldr	r2, [pc, #128]	@ (80005e0 <fsm_for_input_processing+0xb8>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
				// Increase value PORTA by one
			}
			break;
 8000568:	e029      	b.n	80005be <fsm_for_input_processing+0x96>
		case BUTTON_PRESSED:
			if(!is_button_pressed(i)){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f838 	bl	80005e4 <is_button_pressed>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d105      	bne.n	8000586 <fsm_for_input_processing+0x5e>
				buttonState[i] = BUTTON_RELEASED;
 800057a:	4a19      	ldr	r2, [pc, #100]	@ (80005e0 <fsm_for_input_processing+0xb8>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4413      	add	r3, r2
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
					// Set timer 500ms for auto increase
					//setTimer(AUTO_INCREASE, 500);
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000584:	e01d      	b.n	80005c2 <fsm_for_input_processing+0x9a>
				if(is_button_pressed_1s(i)){
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f844 	bl	8000618 <is_button_pressed_1s>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d015      	beq.n	80005c2 <fsm_for_input_processing+0x9a>
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000596:	4a12      	ldr	r2, [pc, #72]	@ (80005e0 <fsm_for_input_processing+0xb8>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	2202      	movs	r2, #2
 800059e:	701a      	strb	r2, [r3, #0]
			break;
 80005a0:	e00f      	b.n	80005c2 <fsm_for_input_processing+0x9a>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed(i)){
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f81c 	bl	80005e4 <is_button_pressed>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d109      	bne.n	80005c6 <fsm_for_input_processing+0x9e>
				buttonState[i] = BUTTON_RELEASED;
 80005b2:	4a0b      	ldr	r2, [pc, #44]	@ (80005e0 <fsm_for_input_processing+0xb8>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
				/*if(getTimerFlags(AUTO_INCREASE)){
					// Increase value PORTA by one
					//setTimer(AUTO_INCREASE, 500);
				}*/
			}
			break;
 80005bc:	e003      	b.n	80005c6 <fsm_for_input_processing+0x9e>
			break;
 80005be:	bf00      	nop
 80005c0:	e002      	b.n	80005c8 <fsm_for_input_processing+0xa0>
			break;
 80005c2:	bf00      	nop
 80005c4:	e000      	b.n	80005c8 <fsm_for_input_processing+0xa0>
			break;
 80005c6:	bf00      	nop
	for(int i=0;i<N0_OF_BUTTONS;i++){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	ddaf      	ble.n	8000534 <fsm_for_input_processing+0xc>
		}
	}
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000030 	.word	0x20000030

080005e4 <is_button_pressed>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

unsigned char is_button_pressed(uint8_t index){
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d901      	bls.n	80005f8 <is_button_pressed+0x14>
 80005f4:	2300      	movs	r3, #0
 80005f6:	e007      	b.n	8000608 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <is_button_pressed+0x30>)
 80005fc:	5cd3      	ldrb	r3, [r2, r3]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf0c      	ite	eq
 8000602:	2301      	moveq	r3, #1
 8000604:	2300      	movne	r3, #0
 8000606:	b2db      	uxtb	r3, r3
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000034 	.word	0x20000034

08000618 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d901      	bls.n	800062c <is_button_pressed_1s+0x14>
 8000628:	23ff      	movs	r3, #255	@ 0xff
 800062a:	e007      	b.n	800063c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <is_button_pressed_1s+0x30>)
 8000630:	5cd3      	ldrb	r3, [r2, r3]
 8000632:	2b01      	cmp	r3, #1
 8000634:	bf0c      	ite	eq
 8000636:	2301      	moveq	r3, #1
 8000638:	2300      	movne	r3, #0
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000040 	.word	0x20000040

0800064c <button_reading>:

void button_reading(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e071      	b.n	800073c <button_reading+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000658:	4a3c      	ldr	r2, [pc, #240]	@ (800074c <button_reading+0x100>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	7819      	ldrb	r1, [r3, #0]
 8000660:	4a3b      	ldr	r2, [pc, #236]	@ (8000750 <button_reading+0x104>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	460a      	mov	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
		// Chose button port
		if(i == 0){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d10b      	bne.n	8000688 <button_reading+0x3c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000670:	2101      	movs	r1, #1
 8000672:	4838      	ldr	r0, [pc, #224]	@ (8000754 <button_reading+0x108>)
 8000674:	f001 f968 	bl	8001948 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	4619      	mov	r1, r3
 800067c:	4a33      	ldr	r2, [pc, #204]	@ (800074c <button_reading+0x100>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	460a      	mov	r2, r1
 8000684:	701a      	strb	r2, [r3, #0]
 8000686:	e01c      	b.n	80006c2 <button_reading+0x76>
		}
		else if(i == 1){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d10b      	bne.n	80006a6 <button_reading+0x5a>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 800068e:	2102      	movs	r1, #2
 8000690:	4830      	ldr	r0, [pc, #192]	@ (8000754 <button_reading+0x108>)
 8000692:	f001 f959 	bl	8001948 <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	4619      	mov	r1, r3
 800069a:	4a2c      	ldr	r2, [pc, #176]	@ (800074c <button_reading+0x100>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	460a      	mov	r2, r1
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	e00d      	b.n	80006c2 <button_reading+0x76>
		}
		else if( i == 2){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d10a      	bne.n	80006c2 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80006ac:	2104      	movs	r1, #4
 80006ae:	4829      	ldr	r0, [pc, #164]	@ (8000754 <button_reading+0x108>)
 80006b0:	f001 f94a 	bl	8001948 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4619      	mov	r1, r3
 80006b8:	4a24      	ldr	r2, [pc, #144]	@ (800074c <button_reading+0x100>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
		}
		else{
			/*This is fault value of index button*/
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 80006c2:	4a22      	ldr	r2, [pc, #136]	@ (800074c <button_reading+0x100>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4921      	ldr	r1, [pc, #132]	@ (8000750 <button_reading+0x104>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	440b      	add	r3, r1
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d12f      	bne.n	8000736 <button_reading+0xea>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80006d6:	4a1d      	ldr	r2, [pc, #116]	@ (800074c <button_reading+0x100>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	7819      	ldrb	r1, [r3, #0]
 80006de:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <button_reading+0x10c>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	460a      	mov	r2, r1
 80006e6:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80006e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000758 <button_reading+0x10c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d116      	bne.n	8000722 <button_reading+0xd6>
			// If a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 80006f4:	4a19      	ldr	r2, [pc, #100]	@ (800075c <button_reading+0x110>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006fc:	2b63      	cmp	r3, #99	@ 0x63
 80006fe:	d80a      	bhi.n	8000716 <button_reading+0xca>
					counterForButtonPress1s[i]++;
 8000700:	4a16      	ldr	r2, [pc, #88]	@ (800075c <button_reading+0x110>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000708:	3301      	adds	r3, #1
 800070a:	b299      	uxth	r1, r3
 800070c:	4a13      	ldr	r2, [pc, #76]	@ (800075c <button_reading+0x110>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000714:	e00f      	b.n	8000736 <button_reading+0xea>
				} else {
				// The flag is turned on when 1 second has passed
				// since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <button_reading+0x114>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e009      	b.n	8000736 <button_reading+0xea>
					// To do
				}
			}
			else {
				counterForButtonPress1s[i] = 0;
 8000722:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <button_reading+0x110>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2100      	movs	r1, #0
 8000728:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 800072c:	4a0c      	ldr	r2, [pc, #48]	@ (8000760 <button_reading+0x114>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	3301      	adds	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b02      	cmp	r3, #2
 8000740:	dd8a      	ble.n	8000658 <button_reading+0xc>
			}
		}
	}
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000038 	.word	0x20000038
 8000750:	2000003c 	.word	0x2000003c
 8000754:	40010c00 	.word	0x40010c00
 8000758:	20000034 	.word	0x20000034
 800075c:	20000044 	.word	0x20000044
 8000760:	20000040 	.word	0x20000040

08000764 <display7SEG_13>:
#include "led_display.h"

int Led13_Count;
int Led24_Count;

void  display7SEG_13(int number){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if(number == 0){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d123      	bne.n	80007ba <display7SEG_13+0x56>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2101      	movs	r1, #1
 8000776:	48c2      	ldr	r0, [pc, #776]	@ (8000a80 <display7SEG_13+0x31c>)
 8000778:	f001 f8fd 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2102      	movs	r1, #2
 8000780:	48bf      	ldr	r0, [pc, #764]	@ (8000a80 <display7SEG_13+0x31c>)
 8000782:	f001 f8f8 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2104      	movs	r1, #4
 800078a:	48bd      	ldr	r0, [pc, #756]	@ (8000a80 <display7SEG_13+0x31c>)
 800078c:	f001 f8f3 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2108      	movs	r1, #8
 8000794:	48ba      	ldr	r0, [pc, #744]	@ (8000a80 <display7SEG_13+0x31c>)
 8000796:	f001 f8ee 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	48b8      	ldr	r0, [pc, #736]	@ (8000a80 <display7SEG_13+0x31c>)
 80007a0:	f001 f8e9 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	48b5      	ldr	r0, [pc, #724]	@ (8000a80 <display7SEG_13+0x31c>)
 80007aa:	f001 f8e4 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2140      	movs	r1, #64	@ 0x40
 80007b2:	48b3      	ldr	r0, [pc, #716]	@ (8000a80 <display7SEG_13+0x31c>)
 80007b4:	f001 f8df 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 80007b8:	e15d      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 1){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d123      	bne.n	8000808 <display7SEG_13+0xa4>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2101      	movs	r1, #1
 80007c4:	48ae      	ldr	r0, [pc, #696]	@ (8000a80 <display7SEG_13+0x31c>)
 80007c6:	f001 f8d6 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	48ac      	ldr	r0, [pc, #688]	@ (8000a80 <display7SEG_13+0x31c>)
 80007d0:	f001 f8d1 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	48a9      	ldr	r0, [pc, #676]	@ (8000a80 <display7SEG_13+0x31c>)
 80007da:	f001 f8cc 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2108      	movs	r1, #8
 80007e2:	48a7      	ldr	r0, [pc, #668]	@ (8000a80 <display7SEG_13+0x31c>)
 80007e4:	f001 f8c7 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2110      	movs	r1, #16
 80007ec:	48a4      	ldr	r0, [pc, #656]	@ (8000a80 <display7SEG_13+0x31c>)
 80007ee:	f001 f8c2 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2120      	movs	r1, #32
 80007f6:	48a2      	ldr	r0, [pc, #648]	@ (8000a80 <display7SEG_13+0x31c>)
 80007f8:	f001 f8bd 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2140      	movs	r1, #64	@ 0x40
 8000800:	489f      	ldr	r0, [pc, #636]	@ (8000a80 <display7SEG_13+0x31c>)
 8000802:	f001 f8b8 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000806:	e136      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 2){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d123      	bne.n	8000856 <display7SEG_13+0xf2>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2101      	movs	r1, #1
 8000812:	489b      	ldr	r0, [pc, #620]	@ (8000a80 <display7SEG_13+0x31c>)
 8000814:	f001 f8af 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	4898      	ldr	r0, [pc, #608]	@ (8000a80 <display7SEG_13+0x31c>)
 800081e:	f001 f8aa 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4896      	ldr	r0, [pc, #600]	@ (8000a80 <display7SEG_13+0x31c>)
 8000828:	f001 f8a5 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2108      	movs	r1, #8
 8000830:	4893      	ldr	r0, [pc, #588]	@ (8000a80 <display7SEG_13+0x31c>)
 8000832:	f001 f8a0 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2110      	movs	r1, #16
 800083a:	4891      	ldr	r0, [pc, #580]	@ (8000a80 <display7SEG_13+0x31c>)
 800083c:	f001 f89b 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2120      	movs	r1, #32
 8000844:	488e      	ldr	r0, [pc, #568]	@ (8000a80 <display7SEG_13+0x31c>)
 8000846:	f001 f896 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	488c      	ldr	r0, [pc, #560]	@ (8000a80 <display7SEG_13+0x31c>)
 8000850:	f001 f891 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000854:	e10f      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 3){
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d123      	bne.n	80008a4 <display7SEG_13+0x140>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2101      	movs	r1, #1
 8000860:	4887      	ldr	r0, [pc, #540]	@ (8000a80 <display7SEG_13+0x31c>)
 8000862:	f001 f888 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2102      	movs	r1, #2
 800086a:	4885      	ldr	r0, [pc, #532]	@ (8000a80 <display7SEG_13+0x31c>)
 800086c:	f001 f883 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2104      	movs	r1, #4
 8000874:	4882      	ldr	r0, [pc, #520]	@ (8000a80 <display7SEG_13+0x31c>)
 8000876:	f001 f87e 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	4880      	ldr	r0, [pc, #512]	@ (8000a80 <display7SEG_13+0x31c>)
 8000880:	f001 f879 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	487d      	ldr	r0, [pc, #500]	@ (8000a80 <display7SEG_13+0x31c>)
 800088a:	f001 f874 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2120      	movs	r1, #32
 8000892:	487b      	ldr	r0, [pc, #492]	@ (8000a80 <display7SEG_13+0x31c>)
 8000894:	f001 f86f 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	@ 0x40
 800089c:	4878      	ldr	r0, [pc, #480]	@ (8000a80 <display7SEG_13+0x31c>)
 800089e:	f001 f86a 	bl	8001976 <HAL_GPIO_WritePin>
}
 80008a2:	e0e8      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 4){
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d123      	bne.n	80008f2 <display7SEG_13+0x18e>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2101      	movs	r1, #1
 80008ae:	4874      	ldr	r0, [pc, #464]	@ (8000a80 <display7SEG_13+0x31c>)
 80008b0:	f001 f861 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2102      	movs	r1, #2
 80008b8:	4871      	ldr	r0, [pc, #452]	@ (8000a80 <display7SEG_13+0x31c>)
 80008ba:	f001 f85c 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2104      	movs	r1, #4
 80008c2:	486f      	ldr	r0, [pc, #444]	@ (8000a80 <display7SEG_13+0x31c>)
 80008c4:	f001 f857 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2108      	movs	r1, #8
 80008cc:	486c      	ldr	r0, [pc, #432]	@ (8000a80 <display7SEG_13+0x31c>)
 80008ce:	f001 f852 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2110      	movs	r1, #16
 80008d6:	486a      	ldr	r0, [pc, #424]	@ (8000a80 <display7SEG_13+0x31c>)
 80008d8:	f001 f84d 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2120      	movs	r1, #32
 80008e0:	4867      	ldr	r0, [pc, #412]	@ (8000a80 <display7SEG_13+0x31c>)
 80008e2:	f001 f848 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2140      	movs	r1, #64	@ 0x40
 80008ea:	4865      	ldr	r0, [pc, #404]	@ (8000a80 <display7SEG_13+0x31c>)
 80008ec:	f001 f843 	bl	8001976 <HAL_GPIO_WritePin>
}
 80008f0:	e0c1      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 5){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b05      	cmp	r3, #5
 80008f6:	d123      	bne.n	8000940 <display7SEG_13+0x1dc>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2101      	movs	r1, #1
 80008fc:	4860      	ldr	r0, [pc, #384]	@ (8000a80 <display7SEG_13+0x31c>)
 80008fe:	f001 f83a 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2102      	movs	r1, #2
 8000906:	485e      	ldr	r0, [pc, #376]	@ (8000a80 <display7SEG_13+0x31c>)
 8000908:	f001 f835 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	485b      	ldr	r0, [pc, #364]	@ (8000a80 <display7SEG_13+0x31c>)
 8000912:	f001 f830 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2108      	movs	r1, #8
 800091a:	4859      	ldr	r0, [pc, #356]	@ (8000a80 <display7SEG_13+0x31c>)
 800091c:	f001 f82b 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2110      	movs	r1, #16
 8000924:	4856      	ldr	r0, [pc, #344]	@ (8000a80 <display7SEG_13+0x31c>)
 8000926:	f001 f826 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2120      	movs	r1, #32
 800092e:	4854      	ldr	r0, [pc, #336]	@ (8000a80 <display7SEG_13+0x31c>)
 8000930:	f001 f821 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2140      	movs	r1, #64	@ 0x40
 8000938:	4851      	ldr	r0, [pc, #324]	@ (8000a80 <display7SEG_13+0x31c>)
 800093a:	f001 f81c 	bl	8001976 <HAL_GPIO_WritePin>
}
 800093e:	e09a      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 6){
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b06      	cmp	r3, #6
 8000944:	d123      	bne.n	800098e <display7SEG_13+0x22a>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2101      	movs	r1, #1
 800094a:	484d      	ldr	r0, [pc, #308]	@ (8000a80 <display7SEG_13+0x31c>)
 800094c:	f001 f813 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2102      	movs	r1, #2
 8000954:	484a      	ldr	r0, [pc, #296]	@ (8000a80 <display7SEG_13+0x31c>)
 8000956:	f001 f80e 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	4848      	ldr	r0, [pc, #288]	@ (8000a80 <display7SEG_13+0x31c>)
 8000960:	f001 f809 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2108      	movs	r1, #8
 8000968:	4845      	ldr	r0, [pc, #276]	@ (8000a80 <display7SEG_13+0x31c>)
 800096a:	f001 f804 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2110      	movs	r1, #16
 8000972:	4843      	ldr	r0, [pc, #268]	@ (8000a80 <display7SEG_13+0x31c>)
 8000974:	f000 ffff 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2120      	movs	r1, #32
 800097c:	4840      	ldr	r0, [pc, #256]	@ (8000a80 <display7SEG_13+0x31c>)
 800097e:	f000 fffa 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2140      	movs	r1, #64	@ 0x40
 8000986:	483e      	ldr	r0, [pc, #248]	@ (8000a80 <display7SEG_13+0x31c>)
 8000988:	f000 fff5 	bl	8001976 <HAL_GPIO_WritePin>
}
 800098c:	e073      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 7){
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b07      	cmp	r3, #7
 8000992:	d123      	bne.n	80009dc <display7SEG_13+0x278>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2101      	movs	r1, #1
 8000998:	4839      	ldr	r0, [pc, #228]	@ (8000a80 <display7SEG_13+0x31c>)
 800099a:	f000 ffec 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	4837      	ldr	r0, [pc, #220]	@ (8000a80 <display7SEG_13+0x31c>)
 80009a4:	f000 ffe7 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2104      	movs	r1, #4
 80009ac:	4834      	ldr	r0, [pc, #208]	@ (8000a80 <display7SEG_13+0x31c>)
 80009ae:	f000 ffe2 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2108      	movs	r1, #8
 80009b6:	4832      	ldr	r0, [pc, #200]	@ (8000a80 <display7SEG_13+0x31c>)
 80009b8:	f000 ffdd 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2110      	movs	r1, #16
 80009c0:	482f      	ldr	r0, [pc, #188]	@ (8000a80 <display7SEG_13+0x31c>)
 80009c2:	f000 ffd8 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2120      	movs	r1, #32
 80009ca:	482d      	ldr	r0, [pc, #180]	@ (8000a80 <display7SEG_13+0x31c>)
 80009cc:	f000 ffd3 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2140      	movs	r1, #64	@ 0x40
 80009d4:	482a      	ldr	r0, [pc, #168]	@ (8000a80 <display7SEG_13+0x31c>)
 80009d6:	f000 ffce 	bl	8001976 <HAL_GPIO_WritePin>
}
 80009da:	e04c      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 8){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d123      	bne.n	8000a2a <display7SEG_13+0x2c6>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2101      	movs	r1, #1
 80009e6:	4826      	ldr	r0, [pc, #152]	@ (8000a80 <display7SEG_13+0x31c>)
 80009e8:	f000 ffc5 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2102      	movs	r1, #2
 80009f0:	4823      	ldr	r0, [pc, #140]	@ (8000a80 <display7SEG_13+0x31c>)
 80009f2:	f000 ffc0 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2104      	movs	r1, #4
 80009fa:	4821      	ldr	r0, [pc, #132]	@ (8000a80 <display7SEG_13+0x31c>)
 80009fc:	f000 ffbb 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2108      	movs	r1, #8
 8000a04:	481e      	ldr	r0, [pc, #120]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a06:	f000 ffb6 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	481c      	ldr	r0, [pc, #112]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a10:	f000 ffb1 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2120      	movs	r1, #32
 8000a18:	4819      	ldr	r0, [pc, #100]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a1a:	f000 ffac 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	@ 0x40
 8000a22:	4817      	ldr	r0, [pc, #92]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a24:	f000 ffa7 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000a28:	e025      	b.n	8000a76 <display7SEG_13+0x312>
	else if(number == 9){
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b09      	cmp	r3, #9
 8000a2e:	d122      	bne.n	8000a76 <display7SEG_13+0x312>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2101      	movs	r1, #1
 8000a34:	4812      	ldr	r0, [pc, #72]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a36:	f000 ff9e 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a40:	f000 ff99 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2104      	movs	r1, #4
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a4a:	f000 ff94 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2108      	movs	r1, #8
 8000a52:	480b      	ldr	r0, [pc, #44]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a54:	f000 ff8f 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4808      	ldr	r0, [pc, #32]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a5e:	f000 ff8a 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a68:	f000 ff85 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2140      	movs	r1, #64	@ 0x40
 8000a70:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <display7SEG_13+0x31c>)
 8000a72:	f000 ff80 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010800 	.word	0x40010800

08000a84 <display7SEG_24>:

void  display7SEG_24(int number){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d12a      	bne.n	8000ae8 <display7SEG_24+0x64>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a98:	48cb      	ldr	r0, [pc, #812]	@ (8000dc8 <display7SEG_24+0x344>)
 8000a9a:	f000 ff6c 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa4:	48c8      	ldr	r0, [pc, #800]	@ (8000dc8 <display7SEG_24+0x344>)
 8000aa6:	f000 ff66 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ab0:	48c5      	ldr	r0, [pc, #788]	@ (8000dc8 <display7SEG_24+0x344>)
 8000ab2:	f000 ff60 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000abc:	48c2      	ldr	r0, [pc, #776]	@ (8000dc8 <display7SEG_24+0x344>)
 8000abe:	f000 ff5a 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac8:	48bf      	ldr	r0, [pc, #764]	@ (8000dc8 <display7SEG_24+0x344>)
 8000aca:	f000 ff54 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad4:	48bc      	ldr	r0, [pc, #752]	@ (8000dc8 <display7SEG_24+0x344>)
 8000ad6:	f000 ff4e 	bl	8001976 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae0:	48b9      	ldr	r0, [pc, #740]	@ (8000dc8 <display7SEG_24+0x344>)
 8000ae2:	f000 ff48 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000ae6:	e19e      	b.n	8000e26 <display7SEG_24+0x3a2>
	else if(number == 1){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d12a      	bne.n	8000b44 <display7SEG_24+0xc0>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000af4:	48b4      	ldr	r0, [pc, #720]	@ (8000dc8 <display7SEG_24+0x344>)
 8000af6:	f000 ff3e 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b00:	48b1      	ldr	r0, [pc, #708]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b02:	f000 ff38 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b0c:	48ae      	ldr	r0, [pc, #696]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b0e:	f000 ff32 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b18:	48ab      	ldr	r0, [pc, #684]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b1a:	f000 ff2c 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b24:	48a8      	ldr	r0, [pc, #672]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b26:	f000 ff26 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b30:	48a5      	ldr	r0, [pc, #660]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b32:	f000 ff20 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b3c:	48a2      	ldr	r0, [pc, #648]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b3e:	f000 ff1a 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000b42:	e170      	b.n	8000e26 <display7SEG_24+0x3a2>
	else if(number == 2){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d12a      	bne.n	8000ba0 <display7SEG_24+0x11c>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b50:	489d      	ldr	r0, [pc, #628]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b52:	f000 ff10 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5c:	489a      	ldr	r0, [pc, #616]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b5e:	f000 ff0a 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b68:	4897      	ldr	r0, [pc, #604]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b6a:	f000 ff04 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b74:	4894      	ldr	r0, [pc, #592]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b76:	f000 fefe 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b80:	4891      	ldr	r0, [pc, #580]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b82:	f000 fef8 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b8c:	488e      	ldr	r0, [pc, #568]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b8e:	f000 fef2 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b98:	488b      	ldr	r0, [pc, #556]	@ (8000dc8 <display7SEG_24+0x344>)
 8000b9a:	f000 feec 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000b9e:	e142      	b.n	8000e26 <display7SEG_24+0x3a2>
	else if(number == 3){
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d12a      	bne.n	8000bfc <display7SEG_24+0x178>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bac:	4886      	ldr	r0, [pc, #536]	@ (8000dc8 <display7SEG_24+0x344>)
 8000bae:	f000 fee2 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb8:	4883      	ldr	r0, [pc, #524]	@ (8000dc8 <display7SEG_24+0x344>)
 8000bba:	f000 fedc 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bc4:	4880      	ldr	r0, [pc, #512]	@ (8000dc8 <display7SEG_24+0x344>)
 8000bc6:	f000 fed6 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd0:	487d      	ldr	r0, [pc, #500]	@ (8000dc8 <display7SEG_24+0x344>)
 8000bd2:	f000 fed0 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bdc:	487a      	ldr	r0, [pc, #488]	@ (8000dc8 <display7SEG_24+0x344>)
 8000bde:	f000 feca 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000be8:	4877      	ldr	r0, [pc, #476]	@ (8000dc8 <display7SEG_24+0x344>)
 8000bea:	f000 fec4 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bf4:	4874      	ldr	r0, [pc, #464]	@ (8000dc8 <display7SEG_24+0x344>)
 8000bf6:	f000 febe 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000bfa:	e114      	b.n	8000e26 <display7SEG_24+0x3a2>
	else if(number == 4){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d12a      	bne.n	8000c58 <display7SEG_24+0x1d4>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c08:	486f      	ldr	r0, [pc, #444]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c0a:	f000 feb4 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c14:	486c      	ldr	r0, [pc, #432]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c16:	f000 feae 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c20:	4869      	ldr	r0, [pc, #420]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c22:	f000 fea8 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c2c:	4866      	ldr	r0, [pc, #408]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c2e:	f000 fea2 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c38:	4863      	ldr	r0, [pc, #396]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c3a:	f000 fe9c 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c44:	4860      	ldr	r0, [pc, #384]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c46:	f000 fe96 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c50:	485d      	ldr	r0, [pc, #372]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c52:	f000 fe90 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000c56:	e0e6      	b.n	8000e26 <display7SEG_24+0x3a2>
	else if(number == 5){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	d12a      	bne.n	8000cb4 <display7SEG_24+0x230>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c64:	4858      	ldr	r0, [pc, #352]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c66:	f000 fe86 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c70:	4855      	ldr	r0, [pc, #340]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c72:	f000 fe80 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c7c:	4852      	ldr	r0, [pc, #328]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c7e:	f000 fe7a 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c88:	484f      	ldr	r0, [pc, #316]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c8a:	f000 fe74 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c94:	484c      	ldr	r0, [pc, #304]	@ (8000dc8 <display7SEG_24+0x344>)
 8000c96:	f000 fe6e 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ca0:	4849      	ldr	r0, [pc, #292]	@ (8000dc8 <display7SEG_24+0x344>)
 8000ca2:	f000 fe68 	bl	8001976 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cac:	4846      	ldr	r0, [pc, #280]	@ (8000dc8 <display7SEG_24+0x344>)
 8000cae:	f000 fe62 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000cb2:	e0b8      	b.n	8000e26 <display7SEG_24+0x3a2>
	else if(number == 6){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d12a      	bne.n	8000d10 <display7SEG_24+0x28c>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc0:	4841      	ldr	r0, [pc, #260]	@ (8000dc8 <display7SEG_24+0x344>)
 8000cc2:	f000 fe58 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ccc:	483e      	ldr	r0, [pc, #248]	@ (8000dc8 <display7SEG_24+0x344>)
 8000cce:	f000 fe52 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd8:	483b      	ldr	r0, [pc, #236]	@ (8000dc8 <display7SEG_24+0x344>)
 8000cda:	f000 fe4c 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ce4:	4838      	ldr	r0, [pc, #224]	@ (8000dc8 <display7SEG_24+0x344>)
 8000ce6:	f000 fe46 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf0:	4835      	ldr	r0, [pc, #212]	@ (8000dc8 <display7SEG_24+0x344>)
 8000cf2:	f000 fe40 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cfc:	4832      	ldr	r0, [pc, #200]	@ (8000dc8 <display7SEG_24+0x344>)
 8000cfe:	f000 fe3a 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d08:	482f      	ldr	r0, [pc, #188]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d0a:	f000 fe34 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000d0e:	e08a      	b.n	8000e26 <display7SEG_24+0x3a2>
	else if(number == 7){
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d12a      	bne.n	8000d6c <display7SEG_24+0x2e8>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1c:	482a      	ldr	r0, [pc, #168]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d1e:	f000 fe2a 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d28:	4827      	ldr	r0, [pc, #156]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d2a:	f000 fe24 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d34:	4824      	ldr	r0, [pc, #144]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d36:	f000 fe1e 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d40:	4821      	ldr	r0, [pc, #132]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d42:	f000 fe18 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4c:	481e      	ldr	r0, [pc, #120]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d4e:	f000 fe12 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d58:	481b      	ldr	r0, [pc, #108]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d5a:	f000 fe0c 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d64:	4818      	ldr	r0, [pc, #96]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d66:	f000 fe06 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000d6a:	e05c      	b.n	8000e26 <display7SEG_24+0x3a2>
	else if(number == 8){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d12c      	bne.n	8000dcc <display7SEG_24+0x348>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d78:	4813      	ldr	r0, [pc, #76]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d7a:	f000 fdfc 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d84:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d86:	f000 fdf6 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d90:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d92:	f000 fdf0 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d9c:	480a      	ldr	r0, [pc, #40]	@ (8000dc8 <display7SEG_24+0x344>)
 8000d9e:	f000 fdea 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da8:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <display7SEG_24+0x344>)
 8000daa:	f000 fde4 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000db4:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <display7SEG_24+0x344>)
 8000db6:	f000 fdde 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dc0:	4801      	ldr	r0, [pc, #4]	@ (8000dc8 <display7SEG_24+0x344>)
 8000dc2:	f000 fdd8 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000dc6:	e02e      	b.n	8000e26 <display7SEG_24+0x3a2>
 8000dc8:	40010800 	.word	0x40010800
	else if(number == 9){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b09      	cmp	r3, #9
 8000dd0:	d129      	bne.n	8000e26 <display7SEG_24+0x3a2>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd8:	4815      	ldr	r0, [pc, #84]	@ (8000e30 <display7SEG_24+0x3ac>)
 8000dda:	f000 fdcc 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de4:	4812      	ldr	r0, [pc, #72]	@ (8000e30 <display7SEG_24+0x3ac>)
 8000de6:	f000 fdc6 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df0:	480f      	ldr	r0, [pc, #60]	@ (8000e30 <display7SEG_24+0x3ac>)
 8000df2:	f000 fdc0 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <display7SEG_24+0x3ac>)
 8000dfe:	f000 fdba 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <display7SEG_24+0x3ac>)
 8000e0a:	f000 fdb4 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e14:	4806      	ldr	r0, [pc, #24]	@ (8000e30 <display7SEG_24+0x3ac>)
 8000e16:	f000 fdae 	bl	8001976 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e20:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <display7SEG_24+0x3ac>)
 8000e22:	f000 fda8 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010800 	.word	0x40010800

08000e34 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e44:	d107      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x22>
		button_reading();
 8000e46:	f7ff fc01 	bl	800064c <button_reading>
		runTimer();
 8000e4a:	f000 f9d3 	bl	80011f4 <runTimer>
		// To check timer
		HAL_GPIO_TogglePin(CHECK_GPIO_Port, CHECK_Pin);
 8000e4e:	2180      	movs	r1, #128	@ 0x80
 8000e50:	4803      	ldr	r0, [pc, #12]	@ (8000e60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e52:	f000 fda8 	bl	80019a6 <HAL_GPIO_TogglePin>
	}
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010800 	.word	0x40010800

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f000 fa82 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f812 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 f898 	bl	8000fa4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e74:	f000 f84a 	bl	8000f0c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setEnviromentStateInit();
 8000e78:	f7ff f968 	bl	800014c <setEnviromentStateInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <main+0x2c>)
 8000e7e:	f001 f9d9 	bl	8002234 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	fsm_for_input_processing();
 8000e82:	f7ff fb51 	bl	8000528 <fsm_for_input_processing>
	runFSM();
 8000e86:	f7ff faa1 	bl	80003cc <runFSM>
	fsm_for_input_processing();
 8000e8a:	bf00      	nop
 8000e8c:	e7f9      	b.n	8000e82 <main+0x1e>
 8000e8e:	bf00      	nop
 8000e90:	20000054 	.word	0x20000054

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b090      	sub	sp, #64	@ 0x40
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	2228      	movs	r2, #40	@ 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fd52 	bl	800294c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fd84 	bl	80019d8 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ed6:	f000 f8c7 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fff2 	bl	8001edc <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000efe:	f000 f8b3 	bl	8001068 <Error_Handler>
  }
}
 8000f02:	bf00      	nop
 8000f04:	3740      	adds	r7, #64	@ 0x40
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f32:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f40:	2209      	movs	r2, #9
 8000f42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f50:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f52:	f001 f91f 	bl	8002194 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f5c:	f000 f884 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f6e:	f001 fa9d 	bl	80024ac <HAL_TIM_ConfigClockSource>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f78:	f000 f876 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f8a:	f001 fc75 	bl	8002878 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f94:	f000 f868 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000054 	.word	0x20000054

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <MX_GPIO_Init+0xb8>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <MX_GPIO_Init+0xb8>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <MX_GPIO_Init+0xb8>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_GPIO_Init+0xb8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a21      	ldr	r2, [pc, #132]	@ (800105c <MX_GPIO_Init+0xb8>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <MX_GPIO_Init+0xb8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000fee:	481c      	ldr	r0, [pc, #112]	@ (8001060 <MX_GPIO_Init+0xbc>)
 8000ff0:	f000 fcc1 	bl	8001976 <HAL_GPIO_WritePin>
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|CHECK_Pin
                          |SEG24_A_Pin|SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin
                          |SEG24_E_Pin|SEG24_F_Pin|SEG24_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED13_RED_Pin|LED13_YELLOW_Pin|LED13_GREEN_Pin|LED24_RED_Pin
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8000ffa:	481a      	ldr	r0, [pc, #104]	@ (8001064 <MX_GPIO_Init+0xc0>)
 8000ffc:	f000 fcbb 	bl	8001976 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG13_A_Pin SEG13_B_Pin SEG13_C_Pin SEG13_D_Pin
                           SEG13_E_Pin SEG13_F_Pin SEG13_G_Pin CHECK_Pin
                           SEG24_A_Pin SEG24_B_Pin SEG24_C_Pin SEG24_D_Pin
                           SEG24_E_Pin SEG24_F_Pin SEG24_G_Pin */
  GPIO_InitStruct.Pin = SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8001000:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001004:	60bb      	str	r3, [r7, #8]
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|CHECK_Pin
                          |SEG24_A_Pin|SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin
                          |SEG24_E_Pin|SEG24_F_Pin|SEG24_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2302      	movs	r3, #2
 8001010:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	4811      	ldr	r0, [pc, #68]	@ (8001060 <MX_GPIO_Init+0xbc>)
 800101a:	f000 fb19 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 800101e:	2307      	movs	r3, #7
 8001020:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <MX_GPIO_Init+0xc0>)
 8001032:	f000 fb0d 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_RED_Pin LED13_YELLOW_Pin LED13_GREEN_Pin LED24_RED_Pin
                           LED24_YELLOW_Pin LED24_GREEN_Pin */
  GPIO_InitStruct.Pin = LED13_RED_Pin|LED13_YELLOW_Pin|LED13_GREEN_Pin|LED24_RED_Pin
 8001036:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 800103a:	60bb      	str	r3, [r7, #8]
                          |LED24_YELLOW_Pin|LED24_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2302      	movs	r3, #2
 8001046:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4619      	mov	r1, r3
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_GPIO_Init+0xc0>)
 8001050:	f000 fafe 	bl	8001650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	40010800 	.word	0x40010800
 8001064:	40010c00 	.word	0x40010c00

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <Error_Handler+0x8>

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <HAL_MspInit+0x5c>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_MspInit+0x60>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_MspInit+0x60>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e8:	d113      	bne.n	8001112 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	201c      	movs	r0, #28
 8001108:	f000 fa6b 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800110c:	201c      	movs	r0, #28
 800110e:	f000 fa84 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <NMI_Handler+0x4>

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <MemManage_Handler+0x4>

08001138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <UsageFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f944 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <TIM2_IRQHandler+0x10>)
 800117e:	f001 f8a5 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000054 	.word	0x20000054

0800118c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <getTimerFlags>:
	//__HAL_TIM_SET_PRESCALER(&htim2,PRESCALER);
	__HAL_TIM_SET_COUNTER(&htim2,COUNTER);
	TIMER_CYCLE = cycle;
}*/

int getTimerFlags(int index){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	return Timer_Flag[index];
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <getTimerFlags+0x1c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200000a4 	.word	0x200000a4

080011b8 <setTimer>:

void setTimer(int index, int duration){
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	Timer_Counter[index] = duration/TIMER_CYCLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <setTimer+0x30>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80011cc:	4907      	ldr	r1, [pc, #28]	@ (80011ec <setTimer+0x34>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Timer_Flag[index] = 0;
 80011d4:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <setTimer+0x38>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2100      	movs	r1, #0
 80011da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	20000004 	.word	0x20000004
 80011ec:	2000009c 	.word	0x2000009c
 80011f0:	200000a4 	.word	0x200000a4

080011f4 <runTimer>:

void runTimer(void){
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_TIMER;i++){
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	e01c      	b.n	800123a <runTimer+0x46>
		if(Timer_Counter[i] > 0){
 8001200:	4a12      	ldr	r2, [pc, #72]	@ (800124c <runTimer+0x58>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dd13      	ble.n	8001234 <runTimer+0x40>
			Timer_Counter[i]--;
 800120c:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <runTimer+0x58>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	1e5a      	subs	r2, r3, #1
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <runTimer+0x58>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(Timer_Counter[i] <=0){
 800121e:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <runTimer+0x58>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	2b00      	cmp	r3, #0
 8001228:	dc04      	bgt.n	8001234 <runTimer+0x40>
				Timer_Flag[i] = 1;
 800122a:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <runTimer+0x5c>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2101      	movs	r1, #1
 8001230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_TIMER;i++){
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3301      	adds	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b01      	cmp	r3, #1
 800123e:	dddf      	ble.n	8001200 <runTimer+0xc>
			}
		}
	}
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	2000009c 	.word	0x2000009c
 8001250:	200000a4 	.word	0x200000a4

08001254 <doRedGreen_Traffic>:
 *      Author: ADMINS
 */

#include "Traffic.h"

void doRedGreen_Traffic(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	480f      	ldr	r0, [pc, #60]	@ (800129c <doRedGreen_Traffic+0x48>)
 800125e:	f000 fb8a 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <doRedGreen_Traffic+0x48>)
 800126a:	f000 fb84 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2120      	movs	r1, #32
 8001272:	480a      	ldr	r0, [pc, #40]	@ (800129c <doRedGreen_Traffic+0x48>)
 8001274:	f000 fb7f 	bl	8001976 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2110      	movs	r1, #16
 800127c:	4807      	ldr	r0, [pc, #28]	@ (800129c <doRedGreen_Traffic+0x48>)
 800127e:	f000 fb7a 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <doRedGreen_Traffic+0x48>)
 8001288:	f000 fb75 	bl	8001976 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2180      	movs	r1, #128	@ 0x80
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <doRedGreen_Traffic+0x48>)
 8001292:	f000 fb70 	bl	8001976 <HAL_GPIO_WritePin>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40010c00 	.word	0x40010c00

080012a0 <doRedYellow_Traffic>:

void doRedYellow_Traffic(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <doRedYellow_Traffic+0x20>)
 80012ac:	f000 fb63 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <doRedYellow_Traffic+0x20>)
 80012b6:	f000 fb5e 	bl	8001976 <HAL_GPIO_WritePin>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40010c00 	.word	0x40010c00

080012c4 <doGreenRed_Traffic>:

void doGreenRed_Traffic(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2108      	movs	r1, #8
 80012cc:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <doGreenRed_Traffic+0x30>)
 80012ce:	f000 fb52 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <doGreenRed_Traffic+0x30>)
 80012d8:	f000 fb4d 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2140      	movs	r1, #64	@ 0x40
 80012e0:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <doGreenRed_Traffic+0x30>)
 80012e2:	f000 fb48 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2120      	movs	r1, #32
 80012ea:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <doGreenRed_Traffic+0x30>)
 80012ec:	f000 fb43 	bl	8001976 <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <doYellowRed_Traffic>:

void doYellowRed_Traffic(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2120      	movs	r1, #32
 8001300:	4807      	ldr	r0, [pc, #28]	@ (8001320 <doYellowRed_Traffic+0x28>)
 8001302:	f000 fb38 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2110      	movs	r1, #16
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <doYellowRed_Traffic+0x28>)
 800130c:	f000 fb33 	bl	8001976 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2140      	movs	r1, #64	@ 0x40
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <doYellowRed_Traffic+0x28>)
 8001316:	f000 fb2e 	bl	8001976 <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40010c00 	.word	0x40010c00

08001324 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001324:	f7ff ff32 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480b      	ldr	r0, [pc, #44]	@ (8001358 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800132a:	490c      	ldr	r1, [pc, #48]	@ (800135c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800132c:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <LoopFillZerobss+0x16>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001340:	4c09      	ldr	r4, [pc, #36]	@ (8001368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134e:	f001 fb05 	bl	800295c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001352:	f7ff fd87 	bl	8000e64 <main>
  bx lr
 8001356:	4770      	bx	lr
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001360:	080029e8 	.word	0x080029e8
  ldr r2, =_sbss
 8001364:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001368:	200000b0 	.word	0x200000b0

0800136c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_2_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <HAL_Init+0x28>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	@ (8001398 <HAL_Init+0x28>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f923 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	200f      	movs	r0, #15
 8001388:	f000 f808 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff fe72 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f93b 	bl	8001636 <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f000 f903 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	@ (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	2000000c 	.word	0x2000000c
 80013f8:	20000008 	.word	0x20000008

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <HAL_IncTick+0x1c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b05      	ldr	r3, [pc, #20]	@ (800141c <HAL_IncTick+0x20>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a03      	ldr	r2, [pc, #12]	@ (800141c <HAL_IncTick+0x20>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	2000000c 	.word	0x2000000c
 800141c:	200000ac 	.word	0x200000ac

08001420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b02      	ldr	r3, [pc, #8]	@ (8001430 <HAL_GetTick+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	200000ac 	.word	0x200000ac

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4906      	ldr	r1, [pc, #24]	@ (80014cc <__NVIC_EnableIRQ+0x34>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	@ (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	@ (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	@ 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff90 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff2d 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff42 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff90 	bl	8001524 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5f 	bl	80014d0 <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff35 	bl	8001498 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa2 	bl	8001588 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b08b      	sub	sp, #44	@ 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	e161      	b.n	8001928 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001664:	2201      	movs	r2, #1
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8150 	bne.w	8001922 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a97      	ldr	r2, [pc, #604]	@ (80018e4 <HAL_GPIO_Init+0x294>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d05e      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 800168c:	4a95      	ldr	r2, [pc, #596]	@ (80018e4 <HAL_GPIO_Init+0x294>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d875      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 8001692:	4a95      	ldr	r2, [pc, #596]	@ (80018e8 <HAL_GPIO_Init+0x298>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d058      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 8001698:	4a93      	ldr	r2, [pc, #588]	@ (80018e8 <HAL_GPIO_Init+0x298>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d86f      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 800169e:	4a93      	ldr	r2, [pc, #588]	@ (80018ec <HAL_GPIO_Init+0x29c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d052      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016a4:	4a91      	ldr	r2, [pc, #580]	@ (80018ec <HAL_GPIO_Init+0x29c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d869      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016aa:	4a91      	ldr	r2, [pc, #580]	@ (80018f0 <HAL_GPIO_Init+0x2a0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d04c      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016b0:	4a8f      	ldr	r2, [pc, #572]	@ (80018f0 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d863      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016b6:	4a8f      	ldr	r2, [pc, #572]	@ (80018f4 <HAL_GPIO_Init+0x2a4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d046      	beq.n	800174a <HAL_GPIO_Init+0xfa>
 80016bc:	4a8d      	ldr	r2, [pc, #564]	@ (80018f4 <HAL_GPIO_Init+0x2a4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d85d      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d82a      	bhi.n	800171c <HAL_GPIO_Init+0xcc>
 80016c6:	2b12      	cmp	r3, #18
 80016c8:	d859      	bhi.n	800177e <HAL_GPIO_Init+0x12e>
 80016ca:	a201      	add	r2, pc, #4	@ (adr r2, 80016d0 <HAL_GPIO_Init+0x80>)
 80016cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d0:	0800174b 	.word	0x0800174b
 80016d4:	08001725 	.word	0x08001725
 80016d8:	08001737 	.word	0x08001737
 80016dc:	08001779 	.word	0x08001779
 80016e0:	0800177f 	.word	0x0800177f
 80016e4:	0800177f 	.word	0x0800177f
 80016e8:	0800177f 	.word	0x0800177f
 80016ec:	0800177f 	.word	0x0800177f
 80016f0:	0800177f 	.word	0x0800177f
 80016f4:	0800177f 	.word	0x0800177f
 80016f8:	0800177f 	.word	0x0800177f
 80016fc:	0800177f 	.word	0x0800177f
 8001700:	0800177f 	.word	0x0800177f
 8001704:	0800177f 	.word	0x0800177f
 8001708:	0800177f 	.word	0x0800177f
 800170c:	0800177f 	.word	0x0800177f
 8001710:	0800177f 	.word	0x0800177f
 8001714:	0800172d 	.word	0x0800172d
 8001718:	08001741 	.word	0x08001741
 800171c:	4a76      	ldr	r2, [pc, #472]	@ (80018f8 <HAL_GPIO_Init+0x2a8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001722:	e02c      	b.n	800177e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e029      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	3304      	adds	r3, #4
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e024      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	3308      	adds	r3, #8
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e01f      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	330c      	adds	r3, #12
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e01a      	b.n	8001780 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001752:	2304      	movs	r3, #4
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e013      	b.n	8001780 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001760:	2308      	movs	r3, #8
 8001762:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	611a      	str	r2, [r3, #16]
          break;
 800176a:	e009      	b.n	8001780 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800176c:	2308      	movs	r3, #8
 800176e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	615a      	str	r2, [r3, #20]
          break;
 8001776:	e003      	b.n	8001780 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x130>
          break;
 800177e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2bff      	cmp	r3, #255	@ 0xff
 8001784:	d801      	bhi.n	800178a <HAL_GPIO_Init+0x13a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	e001      	b.n	800178e <HAL_GPIO_Init+0x13e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3304      	adds	r3, #4
 800178e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2bff      	cmp	r3, #255	@ 0xff
 8001794:	d802      	bhi.n	800179c <HAL_GPIO_Init+0x14c>
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	e002      	b.n	80017a2 <HAL_GPIO_Init+0x152>
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	3b08      	subs	r3, #8
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	210f      	movs	r1, #15
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	6a39      	ldr	r1, [r7, #32]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	431a      	orrs	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80a9 	beq.w	8001922 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d0:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <HAL_GPIO_Init+0x2ac>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a49      	ldr	r2, [pc, #292]	@ (80018fc <HAL_GPIO_Init+0x2ac>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b47      	ldr	r3, [pc, #284]	@ (80018fc <HAL_GPIO_Init+0x2ac>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e8:	4a45      	ldr	r2, [pc, #276]	@ (8001900 <HAL_GPIO_Init+0x2b0>)
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3d      	ldr	r2, [pc, #244]	@ (8001904 <HAL_GPIO_Init+0x2b4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00d      	beq.n	8001830 <HAL_GPIO_Init+0x1e0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3c      	ldr	r2, [pc, #240]	@ (8001908 <HAL_GPIO_Init+0x2b8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d007      	beq.n	800182c <HAL_GPIO_Init+0x1dc>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a3b      	ldr	r2, [pc, #236]	@ (800190c <HAL_GPIO_Init+0x2bc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_GPIO_Init+0x1d8>
 8001824:	2302      	movs	r3, #2
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 8001828:	2303      	movs	r3, #3
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 8001830:	2300      	movs	r3, #0
 8001832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001842:	492f      	ldr	r1, [pc, #188]	@ (8001900 <HAL_GPIO_Init+0x2b0>)
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800185c:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	492b      	ldr	r1, [pc, #172]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186a:	4b29      	ldr	r3, [pc, #164]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	43db      	mvns	r3, r3
 8001872:	4927      	ldr	r1, [pc, #156]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 8001874:	4013      	ands	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	4921      	ldr	r1, [pc, #132]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	491d      	ldr	r1, [pc, #116]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 800189c:	4013      	ands	r3, r2
 800189e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4917      	ldr	r1, [pc, #92]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4913      	ldr	r1, [pc, #76]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01f      	beq.n	8001914 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	490d      	ldr	r1, [pc, #52]	@ (8001910 <HAL_GPIO_Init+0x2c0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
 80018e0:	e01f      	b.n	8001922 <HAL_GPIO_Init+0x2d2>
 80018e2:	bf00      	nop
 80018e4:	10320000 	.word	0x10320000
 80018e8:	10310000 	.word	0x10310000
 80018ec:	10220000 	.word	0x10220000
 80018f0:	10210000 	.word	0x10210000
 80018f4:	10120000 	.word	0x10120000
 80018f8:	10110000 	.word	0x10110000
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000
 8001904:	40010800 	.word	0x40010800
 8001908:	40010c00 	.word	0x40010c00
 800190c:	40011000 	.word	0x40011000
 8001910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_GPIO_Init+0x2f4>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	43db      	mvns	r3, r3
 800191c:	4909      	ldr	r1, [pc, #36]	@ (8001944 <HAL_GPIO_Init+0x2f4>)
 800191e:	4013      	ands	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	3301      	adds	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	f47f ae96 	bne.w	8001664 <HAL_GPIO_Init+0x14>
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	372c      	adds	r7, #44	@ 0x2c
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e001      	b.n	800196a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001986:	787b      	ldrb	r3, [r7, #1]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001992:	e003      	b.n	800199c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	041a      	lsls	r2, r3, #16
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	611a      	str	r2, [r3, #16]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	041a      	lsls	r2, r3, #16
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	400b      	ands	r3, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	611a      	str	r2, [r3, #16]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e272      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8087 	beq.w	8001b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f8:	4b92      	ldr	r3, [pc, #584]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d00c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a04:	4b8f      	ldr	r3, [pc, #572]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d112      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5e>
 8001a10:	4b8c      	ldr	r3, [pc, #560]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a1c:	d10b      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1e:	4b89      	ldr	r3, [pc, #548]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d06c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x12c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d168      	bne.n	8001b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e24c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x76>
 8001a40:	4b80      	ldr	r3, [pc, #512]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a7f      	ldr	r2, [pc, #508]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e02e      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x98>
 8001a56:	4b7b      	ldr	r3, [pc, #492]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b78      	ldr	r3, [pc, #480]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a77      	ldr	r2, [pc, #476]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e01d      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0xbc>
 8001a7a:	4b72      	ldr	r3, [pc, #456]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a71      	ldr	r2, [pc, #452]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b6f      	ldr	r3, [pc, #444]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0xd4>
 8001a94:	4b6b      	ldr	r3, [pc, #428]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6a      	ldr	r2, [pc, #424]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b68      	ldr	r3, [pc, #416]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a67      	ldr	r2, [pc, #412]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fcb4 	bl	8001420 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fcb0 	bl	8001420 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	@ 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e200      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b5d      	ldr	r3, [pc, #372]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xe4>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fca0 	bl	8001420 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fc9c 	bl	8001420 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	@ 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1ec      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	4b53      	ldr	r3, [pc, #332]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x10c>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d063      	beq.n	8001bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b12:	4b4c      	ldr	r3, [pc, #304]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b1e:	4b49      	ldr	r3, [pc, #292]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x18c>
 8001b2a:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	4b43      	ldr	r3, [pc, #268]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x176>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1c0      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4939      	ldr	r1, [pc, #228]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	e03a      	b.n	8001bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fc55 	bl	8001420 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fc51 	bl	8001420 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1a1      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4927      	ldr	r1, [pc, #156]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b26      	ldr	r3, [pc, #152]	@ (8001c48 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fc34 	bl	8001420 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fc30 	bl	8001420 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e180      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d03a      	beq.n	8001c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d019      	beq.n	8001c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fc14 	bl	8001420 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc10 	bl	8001420 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e160      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f000 fa9c 	bl	8002158 <RCC_Delay>
 8001c20:	e01c      	b.n	8001c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c22:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <HAL_RCC_OscConfig+0x274>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7ff fbfa 	bl	8001420 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff fbf6 	bl	8001420 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d908      	bls.n	8001c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e146      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	42420000 	.word	0x42420000
 8001c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	4b92      	ldr	r3, [pc, #584]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e9      	bne.n	8001c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a6 	beq.w	8001db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b88      	ldr	r3, [pc, #544]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a87      	ldr	r2, [pc, #540]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b85      	ldr	r3, [pc, #532]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b82      	ldr	r3, [pc, #520]	@ (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fbb7 	bl	8001420 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb6:	f7ff fbb3 	bl	8001420 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	@ 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e103      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b75      	ldr	r3, [pc, #468]	@ (8001ea0 <HAL_RCC_OscConfig+0x4c8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x312>
 8001cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	e02d      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x334>
 8001cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a69      	ldr	r2, [pc, #420]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4b67      	ldr	r3, [pc, #412]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a66      	ldr	r2, [pc, #408]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	e01c      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x356>
 8001d14:	4b61      	ldr	r3, [pc, #388]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a60      	ldr	r2, [pc, #384]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	4b5e      	ldr	r3, [pc, #376]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a5d      	ldr	r2, [pc, #372]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x36e>
 8001d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a5a      	ldr	r2, [pc, #360]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	4b58      	ldr	r3, [pc, #352]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a57      	ldr	r2, [pc, #348]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d015      	beq.n	8001d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fb67 	bl	8001420 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff fb63 	bl	8001420 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0b1      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ee      	beq.n	8001d56 <HAL_RCC_OscConfig+0x37e>
 8001d78:	e014      	b.n	8001da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fb51 	bl	8001420 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff fb4d 	bl	8001420 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e09b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d98:	4b40      	ldr	r3, [pc, #256]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ee      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001daa:	4b3c      	ldr	r3, [pc, #240]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a3b      	ldr	r2, [pc, #236]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8087 	beq.w	8001ece <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc0:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d061      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d146      	bne.n	8001e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fb21 	bl	8001420 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7ff fb1d 	bl	8001420 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e06d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4921      	ldr	r1, [pc, #132]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a19      	ldr	r1, [r3, #32]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	491b      	ldr	r1, [pc, #108]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff faf1 	bl	8001420 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7ff faed 	bl	8001420 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e03d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46a>
 8001e60:	e035      	b.n	8001ece <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fada 	bl	8001420 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7ff fad6 	bl	8001420 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e026      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x498>
 8001e8e:	e01e      	b.n	8001ece <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e019      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <HAL_RCC_OscConfig+0x500>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0d0      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b67      	ldr	r3, [pc, #412]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4965      	ldr	r1, [pc, #404]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b63      	ldr	r3, [pc, #396]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0b8      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b59      	ldr	r3, [pc, #356]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f50:	4b53      	ldr	r3, [pc, #332]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a52      	ldr	r2, [pc, #328]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b50      	ldr	r3, [pc, #320]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	494d      	ldr	r1, [pc, #308]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d040      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b47      	ldr	r3, [pc, #284]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e073      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06b      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4936      	ldr	r1, [pc, #216]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fcc:	f7ff fa28 	bl	8001420 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff fa24 	bl	8001420 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e053      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2d      	ldr	r3, [pc, #180]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d210      	bcs.n	800202c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	4922      	ldr	r1, [pc, #136]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e032      	b.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4916      	ldr	r1, [pc, #88]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002056:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	490e      	ldr	r1, [pc, #56]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206a:	f000 f821 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800206e:	4602      	mov	r2, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	490a      	ldr	r1, [pc, #40]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	5ccb      	ldrb	r3, [r1, r3]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1d0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f986 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	080029bc 	.word	0x080029bc
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000008 	.word	0x20000008

080020b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x94>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d002      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x30>
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x36>
 80020de:	e027      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 80020e2:	613b      	str	r3, [r7, #16]
      break;
 80020e4:	e027      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f0:	5cd3      	ldrb	r3, [r2, r3]
 80020f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d010      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x94>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0c5b      	lsrs	r3, r3, #17
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xa0>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 8002112:	fb03 f202 	mul.w	r2, r3, r2
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e004      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	613b      	str	r3, [r7, #16]
      break;
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 8002132:	613b      	str	r3, [r7, #16]
      break;
 8002134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002136:	693b      	ldr	r3, [r7, #16]
}
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	007a1200 	.word	0x007a1200
 800214c:	080029cc 	.word	0x080029cc
 8002150:	080029dc 	.word	0x080029dc
 8002154:	003d0900 	.word	0x003d0900

08002158 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <RCC_Delay+0x34>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <RCC_Delay+0x38>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0a5b      	lsrs	r3, r3, #9
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002174:	bf00      	nop
  }
  while (Delay --);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f9      	bne.n	8002174 <RCC_Delay+0x1c>
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000000 	.word	0x20000000
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e041      	b.n	800222a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe ff8c 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f000 fa56 	bl	8002684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e035      	b.n	80022b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a16      	ldr	r2, [pc, #88]	@ (80022c4 <HAL_TIM_Base_Start_IT+0x90>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d009      	beq.n	8002282 <HAL_TIM_Base_Start_IT+0x4e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002276:	d004      	beq.n	8002282 <HAL_TIM_Base_Start_IT+0x4e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a12      	ldr	r2, [pc, #72]	@ (80022c8 <HAL_TIM_Base_Start_IT+0x94>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d111      	bne.n	80022a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d010      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a4:	e007      	b.n	80022b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40000400 	.word	0x40000400

080022cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d020      	beq.n	8002330 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0202 	mvn.w	r2, #2
 8002300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f998 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 800231c:	e005      	b.n	800232a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f98b 	bl	800263a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f99a 	bl	800265e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0204 	mvn.w	r2, #4
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f972 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f965 	bl	800263a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f974 	bl	800265e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0208 	mvn.w	r2, #8
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f94c 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f93f 	bl	800263a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f94e 	bl	800265e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d020      	beq.n	8002414 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0210 	mvn.w	r2, #16
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2208      	movs	r2, #8
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f926 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f919 	bl	800263a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f928 	bl	800265e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00c      	beq.n	8002438 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0201 	mvn.w	r2, #1
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe fcfe 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00c      	beq.n	800245c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa6f 	bl	800293a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f8f8 	bl	8002670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00c      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0220 	mvn.w	r2, #32
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa42 	bl	8002928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_TIM_ConfigClockSource+0x1c>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e0b4      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x186>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002500:	d03e      	beq.n	8002580 <HAL_TIM_ConfigClockSource+0xd4>
 8002502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002506:	f200 8087 	bhi.w	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800250e:	f000 8086 	beq.w	800261e <HAL_TIM_ConfigClockSource+0x172>
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002516:	d87f      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002518:	2b70      	cmp	r3, #112	@ 0x70
 800251a:	d01a      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xa6>
 800251c:	2b70      	cmp	r3, #112	@ 0x70
 800251e:	d87b      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002520:	2b60      	cmp	r3, #96	@ 0x60
 8002522:	d050      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002524:	2b60      	cmp	r3, #96	@ 0x60
 8002526:	d877      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002528:	2b50      	cmp	r3, #80	@ 0x50
 800252a:	d03c      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0xfa>
 800252c:	2b50      	cmp	r3, #80	@ 0x50
 800252e:	d873      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002530:	2b40      	cmp	r3, #64	@ 0x40
 8002532:	d058      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002534:	2b40      	cmp	r3, #64	@ 0x40
 8002536:	d86f      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002538:	2b30      	cmp	r3, #48	@ 0x30
 800253a:	d064      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x15a>
 800253c:	2b30      	cmp	r3, #48	@ 0x30
 800253e:	d86b      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b20      	cmp	r3, #32
 8002542:	d060      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x15a>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d867      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d05c      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x15a>
 800254c:	2b10      	cmp	r3, #16
 800254e:	d05a      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	e062      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002562:	f000 f96a 	bl	800283a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	609a      	str	r2, [r3, #8]
      break;
 800257e:	e04f      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002590:	f000 f953 	bl	800283a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025a2:	609a      	str	r2, [r3, #8]
      break;
 80025a4:	e03c      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	461a      	mov	r2, r3
 80025b4:	f000 f8ca 	bl	800274c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2150      	movs	r1, #80	@ 0x50
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f921 	bl	8002806 <TIM_ITRx_SetConfig>
      break;
 80025c4:	e02c      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d2:	461a      	mov	r2, r3
 80025d4:	f000 f8e8 	bl	80027a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2160      	movs	r1, #96	@ 0x60
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f911 	bl	8002806 <TIM_ITRx_SetConfig>
      break;
 80025e4:	e01c      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	461a      	mov	r2, r3
 80025f4:	f000 f8aa 	bl	800274c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2140      	movs	r1, #64	@ 0x40
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f901 	bl	8002806 <TIM_ITRx_SetConfig>
      break;
 8002604:	e00c      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	4610      	mov	r0, r2
 8002612:	f000 f8f8 	bl	8002806 <TIM_ITRx_SetConfig>
      break;
 8002616:	e003      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      break;
 800261c:	e000      	b.n	8002620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800261e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
	...

08002684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a2b      	ldr	r2, [pc, #172]	@ (8002744 <TIM_Base_SetConfig+0xc0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d007      	beq.n	80026ac <TIM_Base_SetConfig+0x28>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a2:	d003      	beq.n	80026ac <TIM_Base_SetConfig+0x28>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a28      	ldr	r2, [pc, #160]	@ (8002748 <TIM_Base_SetConfig+0xc4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d108      	bne.n	80026be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a20      	ldr	r2, [pc, #128]	@ (8002744 <TIM_Base_SetConfig+0xc0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <TIM_Base_SetConfig+0x52>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026cc:	d003      	beq.n	80026d6 <TIM_Base_SetConfig+0x52>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002748 <TIM_Base_SetConfig+0xc4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <TIM_Base_SetConfig+0xc0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f023 0201 	bic.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	611a      	str	r2, [r3, #16]
  }
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400

0800274c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f023 0201 	bic.w	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f023 030a 	bic.w	r3, r3, #10
 8002788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	621a      	str	r2, [r3, #32]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0210 	bic.w	r2, r3, #16
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	031b      	lsls	r3, r3, #12
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	621a      	str	r2, [r3, #32]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	f043 0307 	orr.w	r3, r3, #7
 8002828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800283a:	b480      	push	{r7}
 800283c:	b087      	sub	sp, #28
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002854:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	431a      	orrs	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4313      	orrs	r3, r2
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	609a      	str	r2, [r3, #8]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800288c:	2302      	movs	r3, #2
 800288e:	e041      	b.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d009      	beq.n	80028e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028dc:	d004      	beq.n	80028e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a10      	ldr	r2, [pc, #64]	@ (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10c      	bne.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40000400 	.word	0x40000400

08002928 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <memset>:
 800294c:	4603      	mov	r3, r0
 800294e:	4402      	add	r2, r0
 8002950:	4293      	cmp	r3, r2
 8002952:	d100      	bne.n	8002956 <memset+0xa>
 8002954:	4770      	bx	lr
 8002956:	f803 1b01 	strb.w	r1, [r3], #1
 800295a:	e7f9      	b.n	8002950 <memset+0x4>

0800295c <__libc_init_array>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	2600      	movs	r6, #0
 8002960:	4d0c      	ldr	r5, [pc, #48]	@ (8002994 <__libc_init_array+0x38>)
 8002962:	4c0d      	ldr	r4, [pc, #52]	@ (8002998 <__libc_init_array+0x3c>)
 8002964:	1b64      	subs	r4, r4, r5
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	42a6      	cmp	r6, r4
 800296a:	d109      	bne.n	8002980 <__libc_init_array+0x24>
 800296c:	f000 f81a 	bl	80029a4 <_init>
 8002970:	2600      	movs	r6, #0
 8002972:	4d0a      	ldr	r5, [pc, #40]	@ (800299c <__libc_init_array+0x40>)
 8002974:	4c0a      	ldr	r4, [pc, #40]	@ (80029a0 <__libc_init_array+0x44>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	42a6      	cmp	r6, r4
 800297c:	d105      	bne.n	800298a <__libc_init_array+0x2e>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	f855 3b04 	ldr.w	r3, [r5], #4
 8002984:	4798      	blx	r3
 8002986:	3601      	adds	r6, #1
 8002988:	e7ee      	b.n	8002968 <__libc_init_array+0xc>
 800298a:	f855 3b04 	ldr.w	r3, [r5], #4
 800298e:	4798      	blx	r3
 8002990:	3601      	adds	r6, #1
 8002992:	e7f2      	b.n	800297a <__libc_init_array+0x1e>
 8002994:	080029e0 	.word	0x080029e0
 8002998:	080029e0 	.word	0x080029e0
 800299c:	080029e0 	.word	0x080029e0
 80029a0:	080029e4 	.word	0x080029e4

080029a4 <_init>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	bf00      	nop
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr

080029b0 <_fini>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	bf00      	nop
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr
