
Lab3_Old.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003190  08003190  00004190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  00005048  2**0
                  CONTENTS
  4 .ARM          00000000  080031b4  080031b4  00005048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b4  080031b4  00005048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b4  080031b4  000041b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b8  080031b8  000041b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  080031bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000048  08003204  00005048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003204  0000511c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a2e  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d50  00000000  00000000  0000da9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0000f7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000868  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171b0  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d28b  00000000  00000000  00027d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a93  00000000  00000000  00034fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7a36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000b7a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ba5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08003178 	.word	0x08003178

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08003178 	.word	0x08003178

0800014c <runBlinkingLed>:
/*Temp of time duration when not set yet*/
int Time_LedRed_Duration_Temp = 1;
int Time_LedYellow_Duration_Temp = 1;
int Time_LedGreen_Duration_Temp = 1;

void runBlinkingLed(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	/*If mode is 2,3,4*/
	if(FSM_State >= NORMAL_STATE_MODE_2 && FSM_State <= NORMAL_STATE_MODE_4){
 8000152:	4b46      	ldr	r3, [pc, #280]	@ (800026c <runBlinkingLed+0x120>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	2b03      	cmp	r3, #3
 8000158:	dd79      	ble.n	800024e <runBlinkingLed+0x102>
 800015a:	4b44      	ldr	r3, [pc, #272]	@ (800026c <runBlinkingLed+0x120>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b06      	cmp	r3, #6
 8000160:	dc75      	bgt.n	800024e <runBlinkingLed+0x102>
		if(FSM_State == NORMAL_STATE_MODE_2){
 8000162:	4b42      	ldr	r3, [pc, #264]	@ (800026c <runBlinkingLed+0x120>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2b04      	cmp	r3, #4
 8000168:	d109      	bne.n	800017e <runBlinkingLed+0x32>
			activeTimer(BLINKING_LED_RED_TIMER);
 800016a:	2003      	movs	r0, #3
 800016c:	f001 fbd4 	bl	8001918 <activeTimer>
			ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 8000170:	2004      	movs	r0, #4
 8000172:	f001 fbc1 	bl	80018f8 <ignoreTimer>
			ignoreTimer(BLINKING_LED_GREEN_TIMER);
 8000176:	2005      	movs	r0, #5
 8000178:	f001 fbbe 	bl	80018f8 <ignoreTimer>
 800017c:	e01a      	b.n	80001b4 <runBlinkingLed+0x68>
		}
		else if(FSM_State == NORMAL_STATE_MODE_3){
 800017e:	4b3b      	ldr	r3, [pc, #236]	@ (800026c <runBlinkingLed+0x120>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b05      	cmp	r3, #5
 8000184:	d109      	bne.n	800019a <runBlinkingLed+0x4e>
			activeTimer(BLINKING_LED_YELLOW_TIMER);
 8000186:	2004      	movs	r0, #4
 8000188:	f001 fbc6 	bl	8001918 <activeTimer>
			ignoreTimer(BLINKING_LED_RED_TIMER);
 800018c:	2003      	movs	r0, #3
 800018e:	f001 fbb3 	bl	80018f8 <ignoreTimer>
			ignoreTimer(BLINKING_LED_GREEN_TIMER);
 8000192:	2005      	movs	r0, #5
 8000194:	f001 fbb0 	bl	80018f8 <ignoreTimer>
 8000198:	e00c      	b.n	80001b4 <runBlinkingLed+0x68>
		}
		else if(FSM_State == NORMAL_STATE_MODE_4){
 800019a:	4b34      	ldr	r3, [pc, #208]	@ (800026c <runBlinkingLed+0x120>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b06      	cmp	r3, #6
 80001a0:	d108      	bne.n	80001b4 <runBlinkingLed+0x68>
			activeTimer(BLINKING_LED_GREEN_TIMER);
 80001a2:	2005      	movs	r0, #5
 80001a4:	f001 fbb8 	bl	8001918 <activeTimer>
			ignoreTimer(BLINKING_LED_RED_TIMER);
 80001a8:	2003      	movs	r0, #3
 80001aa:	f001 fba5 	bl	80018f8 <ignoreTimer>
			ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 80001ae:	2004      	movs	r0, #4
 80001b0:	f001 fba2 	bl	80018f8 <ignoreTimer>
		else{
			/*This is fault mode*/
		}


		if(getTimerFlags(BLINKING_LED_RED_TIMER)){
 80001b4:	2003      	movs	r0, #3
 80001b6:	f001 fb8f 	bl	80018d8 <getTimerFlags>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d012      	beq.n	80001e6 <runBlinkingLed+0x9a>
			HAL_GPIO_TogglePin(LED13_RED_GPIO_Port, LED13_RED_Pin);
 80001c0:	2108      	movs	r1, #8
 80001c2:	482b      	ldr	r0, [pc, #172]	@ (8000270 <runBlinkingLed+0x124>)
 80001c4:	f001 ffd9 	bl	800217a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_RED_GPIO_Port, LED24_RED_Pin);
 80001c8:	2140      	movs	r1, #64	@ 0x40
 80001ca:	4829      	ldr	r0, [pc, #164]	@ (8000270 <runBlinkingLed+0x124>)
 80001cc:	f001 ffd5 	bl	800217a <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedRed_Duration * TIME_SCALER) / 2;
 80001d0:	4b28      	ldr	r3, [pc, #160]	@ (8000274 <runBlinkingLed+0x128>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80001d8:	fb02 f303 	mul.w	r3, r2, r3
 80001dc:	60fb      	str	r3, [r7, #12]

			setTimer(BLINKING_LED_RED_TIMER, Time_Blinking);
 80001de:	68f9      	ldr	r1, [r7, #12]
 80001e0:	2003      	movs	r0, #3
 80001e2:	f001 fba9 	bl	8001938 <setTimer>
		}

		if(getTimerFlags(BLINKING_LED_YELLOW_TIMER)){
 80001e6:	2004      	movs	r0, #4
 80001e8:	f001 fb76 	bl	80018d8 <getTimerFlags>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d012      	beq.n	8000218 <runBlinkingLed+0xcc>
			HAL_GPIO_TogglePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin);
 80001f2:	2110      	movs	r1, #16
 80001f4:	481e      	ldr	r0, [pc, #120]	@ (8000270 <runBlinkingLed+0x124>)
 80001f6:	f001 ffc0 	bl	800217a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin);
 80001fa:	2180      	movs	r1, #128	@ 0x80
 80001fc:	481c      	ldr	r0, [pc, #112]	@ (8000270 <runBlinkingLed+0x124>)
 80001fe:	f001 ffbc 	bl	800217a <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedYellow_Duration * TIME_SCALER) / 2;
 8000202:	4b1d      	ldr	r3, [pc, #116]	@ (8000278 <runBlinkingLed+0x12c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800020a:	fb02 f303 	mul.w	r3, r2, r3
 800020e:	60bb      	str	r3, [r7, #8]

			setTimer(BLINKING_LED_YELLOW_TIMER, Time_Blinking);
 8000210:	68b9      	ldr	r1, [r7, #8]
 8000212:	2004      	movs	r0, #4
 8000214:	f001 fb90 	bl	8001938 <setTimer>
		}

		if(getTimerFlags(BLINKING_LED_GREEN_TIMER)){
 8000218:	2005      	movs	r0, #5
 800021a:	f001 fb5d 	bl	80018d8 <getTimerFlags>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d01e      	beq.n	8000262 <runBlinkingLed+0x116>
			HAL_GPIO_TogglePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin);
 8000224:	2120      	movs	r1, #32
 8000226:	4812      	ldr	r0, [pc, #72]	@ (8000270 <runBlinkingLed+0x124>)
 8000228:	f001 ffa7 	bl	800217a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin);
 800022c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000230:	480f      	ldr	r0, [pc, #60]	@ (8000270 <runBlinkingLed+0x124>)
 8000232:	f001 ffa2 	bl	800217a <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedGreen_Duration * TIME_SCALER) / 2;
 8000236:	4b11      	ldr	r3, [pc, #68]	@ (800027c <runBlinkingLed+0x130>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800023e:	fb02 f303 	mul.w	r3, r2, r3
 8000242:	607b      	str	r3, [r7, #4]

			setTimer(BLINKING_LED_GREEN_TIMER, Time_Blinking);
 8000244:	6879      	ldr	r1, [r7, #4]
 8000246:	2005      	movs	r0, #5
 8000248:	f001 fb76 	bl	8001938 <setTimer>
		if(getTimerFlags(BLINKING_LED_GREEN_TIMER)){
 800024c:	e009      	b.n	8000262 <runBlinkingLed+0x116>
		}
	}
	else{
		ignoreTimer(BLINKING_LED_RED_TIMER);
 800024e:	2003      	movs	r0, #3
 8000250:	f001 fb52 	bl	80018f8 <ignoreTimer>
		ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 8000254:	2004      	movs	r0, #4
 8000256:	f001 fb4f 	bl	80018f8 <ignoreTimer>
		ignoreTimer(BLINKING_LED_GREEN_TIMER);
 800025a:	2005      	movs	r0, #5
 800025c:	f001 fb4c 	bl	80018f8 <ignoreTimer>
	}
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000064 	.word	0x20000064
 8000270:	40010c00 	.word	0x40010c00
 8000274:	20000000 	.word	0x20000000
 8000278:	20000004 	.word	0x20000004
 800027c:	20000008 	.word	0x20000008

08000280 <setEnviromentStateInit>:
#include "fsm.h"

/*Default Mode*/
int FSM_State;

void setEnviromentStateInit(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 8000284:	4b1f      	ldr	r3, [pc, #124]	@ (8000304 <setEnviromentStateInit+0x84>)
 8000286:	2205      	movs	r2, #5
 8000288:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 800028a:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <setEnviromentStateInit+0x88>)
 800028c:	2203      	movs	r2, #3
 800028e:	601a      	str	r2, [r3, #0]

	/*Update 7Seg buffer for scanning*/
	updateLedBuffer(0, Led13_Count);
 8000290:	4b1c      	ldr	r3, [pc, #112]	@ (8000304 <setEnviromentStateInit+0x84>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4619      	mov	r1, r3
 8000296:	2000      	movs	r0, #0
 8000298:	f000 fcae 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(1, 0);				/*In mode 1,2 this 7Seg is 0*/
 800029c:	2100      	movs	r1, #0
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 fcaa 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(2, 0);				/*In mode 1,2 this 7Seg is 0*/
 80002a4:	2100      	movs	r1, #0
 80002a6:	2002      	movs	r0, #2
 80002a8:	f000 fca6 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(3, Led24_Count);
 80002ac:	4b16      	ldr	r3, [pc, #88]	@ (8000308 <setEnviromentStateInit+0x88>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4619      	mov	r1, r3
 80002b2:	2003      	movs	r0, #3
 80002b4:	f000 fca0 	bl	8000bf8 <updateLedBuffer>

	/*Set timer for blinking led*/
	setTimer(BLINKING_LED_RED_TIMER, (Time_LedRed_Duration * TIME_SCALER)/2);
 80002b8:	4b14      	ldr	r3, [pc, #80]	@ (800030c <setEnviromentStateInit+0x8c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002c0:	fb02 f303 	mul.w	r3, r2, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	2003      	movs	r0, #3
 80002c8:	f001 fb36 	bl	8001938 <setTimer>
	setTimer(BLINKING_LED_YELLOW_TIMER, (Time_LedYellow_Duration * TIME_SCALER)/2);
 80002cc:	4b10      	ldr	r3, [pc, #64]	@ (8000310 <setEnviromentStateInit+0x90>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002d4:	fb02 f303 	mul.w	r3, r2, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	2004      	movs	r0, #4
 80002dc:	f001 fb2c 	bl	8001938 <setTimer>
	setTimer(BLINKING_LED_GREEN_TIMER, (Time_LedGreen_Duration * TIME_SCALER)/2);
 80002e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <setEnviromentStateInit+0x94>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002e8:	fb02 f303 	mul.w	r3, r2, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	2005      	movs	r0, #5
 80002f0:	f001 fb22 	bl	8001938 <setTimer>

	setEnviromentState0();
 80002f4:	f000 f812 	bl	800031c <setEnviromentState0>
	FSM_State = RED_GREEN_STATE_MODE1;
 80002f8:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <setEnviromentStateInit+0x98>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	2000007c 	.word	0x2000007c
 8000308:	20000080 	.word	0x20000080
 800030c:	20000000 	.word	0x20000000
 8000310:	20000004 	.word	0x20000004
 8000314:	20000008 	.word	0x20000008
 8000318:	20000064 	.word	0x20000064

0800031c <setEnviromentState0>:

void setEnviromentState0(void){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 8000320:	4b1e      	ldr	r3, [pc, #120]	@ (800039c <setEnviromentState0+0x80>)
 8000322:	2205      	movs	r2, #5
 8000324:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 8000326:	4b1e      	ldr	r3, [pc, #120]	@ (80003a0 <setEnviromentState0+0x84>)
 8000328:	2203      	movs	r2, #3
 800032a:	601a      	str	r2, [r3, #0]

	/*Enable 7Seg we use and disable 7Seg we not use*/
	disable7SEG(1);
 800032c:	2001      	movs	r0, #1
 800032e:	f000 fc75 	bl	8000c1c <disable7SEG>
	disable7SEG(2);
 8000332:	2002      	movs	r0, #2
 8000334:	f000 fc72 	bl	8000c1c <disable7SEG>
	enable7SEGNoClear(0);
 8000338:	2000      	movs	r0, #0
 800033a:	f000 fca1 	bl	8000c80 <enable7SEGNoClear>
	enable7SEGNoClear(3);
 800033e:	2003      	movs	r0, #3
 8000340:	f000 fc9e 	bl	8000c80 <enable7SEGNoClear>

	/*7Seg display immediate*/
	display7SEG_13(Led13_Count);
 8000344:	4b15      	ldr	r3, [pc, #84]	@ (800039c <setEnviromentState0+0x80>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fd8b 	bl	8000e64 <display7SEG_13>
	display7SEG_24(Led24_Count);
 800034e:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <setEnviromentState0+0x84>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f000 ff16 	bl	8001184 <display7SEG_24>

	/*Active timer*/
	activeTimer(DELAY_TIMER);
 8000358:	2000      	movs	r0, #0
 800035a:	f001 fadd 	bl	8001918 <activeTimer>
	activeTimer(TRAFFIC_TIMER);
 800035e:	2001      	movs	r0, #1
 8000360:	f001 fada 	bl	8001918 <activeTimer>
	ignoreTimer(BLINKING_LED_RED_TIMER);
 8000364:	2003      	movs	r0, #3
 8000366:	f001 fac7 	bl	80018f8 <ignoreTimer>
	ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 800036a:	2004      	movs	r0, #4
 800036c:	f001 fac4 	bl	80018f8 <ignoreTimer>
	ignoreTimer(BLINKING_LED_GREEN_TIMER);
 8000370:	2005      	movs	r0, #5
 8000372:	f001 fac1 	bl	80018f8 <ignoreTimer>

	/*We not use scanning 7Seg in Mode 1*/
	ignoreTimer(SEVENT_SEG_SCAN_TIMER);
 8000376:	2002      	movs	r0, #2
 8000378:	f001 fabe 	bl	80018f8 <ignoreTimer>

	/*Set timer for scanning 7Seg for reset counter value*/
	setTimer(SEVENT_SEG_SCAN_TIMER, DURATION_FOR_SEVENT_SEG_SCAN_LED);
 800037c:	21fa      	movs	r1, #250	@ 0xfa
 800037e:	2002      	movs	r0, #2
 8000380:	f001 fada 	bl	8001938 <setTimer>

	setTimer(DELAY_TIMER, 0);
 8000384:	2100      	movs	r1, #0
 8000386:	2000      	movs	r0, #0
 8000388:	f001 fad6 	bl	8001938 <setTimer>
	setTimer(TRAFFIC_TIMER, 3000);
 800038c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000390:	2001      	movs	r0, #1
 8000392:	f001 fad1 	bl	8001938 <setTimer>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000007c 	.word	0x2000007c
 80003a0:	20000080 	.word	0x20000080

080003a4 <setEnviromentState1>:

void setEnviromentState1(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	Led24_Count = 2;
 80003a8:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <setEnviromentState1+0x18>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 80003ae:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80003b2:	2001      	movs	r0, #1
 80003b4:	f001 fac0 	bl	8001938 <setTimer>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000080 	.word	0x20000080

080003c0 <setEnviromentState2>:
void setEnviromentState2(void){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	Led13_Count = 3;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <setEnviromentState2+0x20>)
 80003c6:	2203      	movs	r2, #3
 80003c8:	601a      	str	r2, [r3, #0]
	Led24_Count = 5;
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <setEnviromentState2+0x24>)
 80003cc:	2205      	movs	r2, #5
 80003ce:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 3000);
 80003d0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80003d4:	2001      	movs	r0, #1
 80003d6:	f001 faaf 	bl	8001938 <setTimer>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000007c 	.word	0x2000007c
 80003e4:	20000080 	.word	0x20000080

080003e8 <setEnviromentState3>:

void setEnviromentState3(void){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	Led13_Count = 2;
 80003ec:	4b04      	ldr	r3, [pc, #16]	@ (8000400 <setEnviromentState3+0x18>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 80003f2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80003f6:	2001      	movs	r0, #1
 80003f8:	f001 fa9e 	bl	8001938 <setTimer>
}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000007c 	.word	0x2000007c

08000404 <setEnviromentState4>:

void setEnviromentState4(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	/*Clear all traffic led in mode 1*/
	clearAllTraffic();
 8000408:	f001 fae8 	bl	80019dc <clearAllTraffic>
	/*Ignore timer delay and timer traffic*/
	ignoreTimer(DELAY_TIMER);
 800040c:	2000      	movs	r0, #0
 800040e:	f001 fa73 	bl	80018f8 <ignoreTimer>
	ignoreTimer(TRAFFIC_TIMER);
 8000412:	2001      	movs	r0, #1
 8000414:	f001 fa70 	bl	80018f8 <ignoreTimer>

	activeTimer(SEVENT_SEG_SCAN_TIMER);
 8000418:	2002      	movs	r0, #2
 800041a:	f001 fa7d 	bl	8001918 <activeTimer>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}

08000422 <setEnviromentState5>:

void setEnviromentState5(void){
 8000422:	b580      	push	{r7, lr}
 8000424:	af00      	add	r7, sp, #0
	/*Clear all traffic led in mode 1*/
	clearAllTraffic();
 8000426:	f001 fad9 	bl	80019dc <clearAllTraffic>
	/*Ignore timer delay and timer traffic*/
	ignoreTimer(DELAY_TIMER);
 800042a:	2000      	movs	r0, #0
 800042c:	f001 fa64 	bl	80018f8 <ignoreTimer>
	ignoreTimer(TRAFFIC_TIMER);
 8000430:	2001      	movs	r0, #1
 8000432:	f001 fa61 	bl	80018f8 <ignoreTimer>
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}

0800043a <setEnviromentState6>:

void setEnviromentState6(void){
 800043a:	b580      	push	{r7, lr}
 800043c:	af00      	add	r7, sp, #0
	/*Clear all traffic led in mode 1*/
	clearAllTraffic();
 800043e:	f001 facd 	bl	80019dc <clearAllTraffic>
	/*Ignore timer delay and timer traffic*/
	ignoreTimer(DELAY_TIMER);
 8000442:	2000      	movs	r0, #0
 8000444:	f001 fa58 	bl	80018f8 <ignoreTimer>
	ignoreTimer(TRAFFIC_TIMER);
 8000448:	2001      	movs	r0, #1
 800044a:	f001 fa55 	bl	80018f8 <ignoreTimer>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <doState0>:

void doState0(void){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	doRedGreen_Traffic();
 8000458:	f001 fae6 	bl	8001a28 <doRedGreen_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 800045c:	2000      	movs	r0, #0
 800045e:	f001 fa3b 	bl	80018d8 <getTimerFlags>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d018      	beq.n	800049a <doState0+0x46>

		/*Just for debug
		HAL_GPIO_WritePin(CHECK_GPIO_Port, CHECK_Pin, GPIO_PIN_RESET);*/

		display7SEG_13(Led13_Count);
 8000468:	4b0d      	ldr	r3, [pc, #52]	@ (80004a0 <doState0+0x4c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fcf9 	bl	8000e64 <display7SEG_13>
		display7SEG_24(Led24_Count);
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <doState0+0x50>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fe84 	bl	8001184 <display7SEG_24>

		Led13_Count--;
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <doState0+0x4c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3b01      	subs	r3, #1
 8000482:	4a07      	ldr	r2, [pc, #28]	@ (80004a0 <doState0+0x4c>)
 8000484:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 8000486:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <doState0+0x50>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a05      	ldr	r2, [pc, #20]	@ (80004a4 <doState0+0x50>)
 800048e:	6013      	str	r3, [r2, #0]

		//updateLedBuffer(0, Led13_Count);
		//updateLedBuffer(3, Led24_Count);

		setTimer(DELAY_TIMER, 1000);
 8000490:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000494:	2000      	movs	r0, #0
 8000496:	f001 fa4f 	bl	8001938 <setTimer>
	}
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	2000007c 	.word	0x2000007c
 80004a4:	20000080 	.word	0x20000080

080004a8 <doState1>:

void doState1(void){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	doRedYellow_Traffic();
 80004ac:	f001 fae2 	bl	8001a74 <doRedYellow_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 80004b0:	2000      	movs	r0, #0
 80004b2:	f001 fa11 	bl	80018d8 <getTimerFlags>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d018      	beq.n	80004ee <doState1+0x46>
		display7SEG_13(Led13_Count);
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <doState1+0x4c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fccf 	bl	8000e64 <display7SEG_13>
		display7SEG_24(Led24_Count);
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <doState1+0x50>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fe5a 	bl	8001184 <display7SEG_24>

		Led13_Count--;
 80004d0:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <doState1+0x4c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	4a07      	ldr	r2, [pc, #28]	@ (80004f4 <doState1+0x4c>)
 80004d8:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 80004da:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <doState1+0x50>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3b01      	subs	r3, #1
 80004e0:	4a05      	ldr	r2, [pc, #20]	@ (80004f8 <doState1+0x50>)
 80004e2:	6013      	str	r3, [r2, #0]

		//updateLedBuffer(0, Led13_Count);
		//updateLedBuffer(3, Led24_Count);

		setTimer(DELAY_TIMER, 1000);
 80004e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004e8:	2000      	movs	r0, #0
 80004ea:	f001 fa25 	bl	8001938 <setTimer>
	}
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000007c 	.word	0x2000007c
 80004f8:	20000080 	.word	0x20000080

080004fc <doState2>:

void doState2(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	doGreenRed_Traffic();
 8000500:	f001 faca 	bl	8001a98 <doGreenRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000504:	2000      	movs	r0, #0
 8000506:	f001 f9e7 	bl	80018d8 <getTimerFlags>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d018      	beq.n	8000542 <doState2+0x46>
		display7SEG_13(Led13_Count);
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <doState2+0x4c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fca5 	bl	8000e64 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <doState2+0x50>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fe30 	bl	8001184 <display7SEG_24>

		Led13_Count--;
 8000524:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <doState2+0x4c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	4a07      	ldr	r2, [pc, #28]	@ (8000548 <doState2+0x4c>)
 800052c:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <doState2+0x50>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a05      	ldr	r2, [pc, #20]	@ (800054c <doState2+0x50>)
 8000536:	6013      	str	r3, [r2, #0]

		//updateLedBuffer(0, Led13_Count);
		//updateLedBuffer(3, Led24_Count);

		setTimer(DELAY_TIMER, 1000);
 8000538:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800053c:	2000      	movs	r0, #0
 800053e:	f001 f9fb 	bl	8001938 <setTimer>
	}
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000007c 	.word	0x2000007c
 800054c:	20000080 	.word	0x20000080

08000550 <doState3>:

void doState3(void){
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	doYellowRed_Traffic();
 8000554:	f001 faba 	bl	8001acc <doYellowRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000558:	2000      	movs	r0, #0
 800055a:	f001 f9bd 	bl	80018d8 <getTimerFlags>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d018      	beq.n	8000596 <doState3+0x46>
		display7SEG_13(Led13_Count);
 8000564:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <doState3+0x4c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fc7b 	bl	8000e64 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <doState3+0x50>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fe06 	bl	8001184 <display7SEG_24>

		Led13_Count--;
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <doState3+0x4c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <doState3+0x4c>)
 8000580:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 8000582:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <doState3+0x50>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a05      	ldr	r2, [pc, #20]	@ (80005a0 <doState3+0x50>)
 800058a:	6013      	str	r3, [r2, #0]

		//updateLedBuffer(0, Led13_Count);
		//updateLedBuffer(3, Led24_Count);

		setTimer(DELAY_TIMER, 1000);
 800058c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000590:	2000      	movs	r0, #0
 8000592:	f001 f9d1 	bl	8001938 <setTimer>
	}
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	20000080 	.word	0x20000080

080005a4 <doState4>:

void doState4(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	and one 7seg for mode becaue mode 1->4*/
	//display7SEG_13((int)(Time_LedRed_Duration_Temp / 10));
	//display7SEG_Time((int)(Time_LedRed_Duration_Temp % 10));
	/*Display mode*/
	//display7SEG_24(FSM_State - 2);
	updateLedBuffer(0, Time_LedRed_Duration_Temp / 10);
 80005a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000664 <doState4+0xc0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000668 <doState4+0xc4>)
 80005ae:	fb82 1203 	smull	r1, r2, r2, r3
 80005b2:	1092      	asrs	r2, r2, #2
 80005b4:	17db      	asrs	r3, r3, #31
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fb1c 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(1, Time_LedRed_Duration_Temp % 10);
 80005c0:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <doState4+0xc0>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <doState4+0xc4>)
 80005c6:	fb83 1302 	smull	r1, r3, r3, r2
 80005ca:	1099      	asrs	r1, r3, #2
 80005cc:	17d3      	asrs	r3, r2, #31
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	460b      	mov	r3, r1
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	1ad1      	subs	r1, r2, r3
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fb0c 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(2, (FSM_State - 2) / 10);
 80005e0:	4b22      	ldr	r3, [pc, #136]	@ (800066c <doState4+0xc8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3b02      	subs	r3, #2
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <doState4+0xc4>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	1092      	asrs	r2, r2, #2
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 faff 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(3, (FSM_State - 2) % 10);
 80005fa:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <doState4+0xc8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	1e9a      	subs	r2, r3, #2
 8000600:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <doState4+0xc4>)
 8000602:	fb83 1302 	smull	r1, r3, r3, r2
 8000606:	1099      	asrs	r1, r3, #2
 8000608:	17d3      	asrs	r3, r2, #31
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	460b      	mov	r3, r1
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	1ad1      	subs	r1, r2, r3
 8000616:	2003      	movs	r0, #3
 8000618:	f000 faee 	bl	8000bf8 <updateLedBuffer>

	if(buttonState[1] == BUTTON_PRESSED){
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <doState4+0xcc>)
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d10b      	bne.n	800063c <doState4+0x98>
		/*Increase time duration by one*/
		Time_LedRed_Duration_Temp++;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <doState4+0xc0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <doState4+0xc0>)
 800062c:	6013      	str	r3, [r2, #0]

		if(Time_LedRed_Duration_Temp > 99){
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <doState4+0xc0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b63      	cmp	r3, #99	@ 0x63
 8000634:	dd02      	ble.n	800063c <doState4+0x98>
			Time_LedRed_Duration_Temp = 1;
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <doState4+0xc0>)
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
		}
	}

	if(buttonState[2] == BUTTON_PRESSED){
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <doState4+0xcc>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10d      	bne.n	8000660 <doState4+0xbc>
		/*Update blinking time duration*/
		Time_LedRed_Duration = Time_LedRed_Duration_Temp;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <doState4+0xc0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <doState4+0xd0>)
 800064a:	6013      	str	r3, [r2, #0]
		setTimer(BLINKING_LED_RED_TIMER, (Time_LedRed_Duration * TIME_SCALER)/2);
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <doState4+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000654:	fb02 f303 	mul.w	r3, r2, r3
 8000658:	4619      	mov	r1, r3
 800065a:	2003      	movs	r0, #3
 800065c:	f001 f96c 	bl	8001938 <setTimer>
	}
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000000c 	.word	0x2000000c
 8000668:	66666667 	.word	0x66666667
 800066c:	20000064 	.word	0x20000064
 8000670:	20000068 	.word	0x20000068
 8000674:	20000000 	.word	0x20000000

08000678 <doState5>:

void doState5(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	//display7SEG_13((int)(Time_LedYellow_Duration_Temp / 10));
	//display7SEG_Time((int)(Time_LedYellow_Duration_Temp % 10));
	/*Display mode*/
	//display7SEG_24(FSM_State - 2);

	updateLedBuffer(0, Time_LedYellow_Duration_Temp / 10);
 800067c:	4b2e      	ldr	r3, [pc, #184]	@ (8000738 <doState5+0xc0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a2e      	ldr	r2, [pc, #184]	@ (800073c <doState5+0xc4>)
 8000682:	fb82 1203 	smull	r1, r2, r2, r3
 8000686:	1092      	asrs	r2, r2, #2
 8000688:	17db      	asrs	r3, r3, #31
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	4619      	mov	r1, r3
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fab2 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(1, Time_LedYellow_Duration_Temp % 10);
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <doState5+0xc0>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <doState5+0xc4>)
 800069a:	fb83 1302 	smull	r1, r3, r3, r2
 800069e:	1099      	asrs	r1, r3, #2
 80006a0:	17d3      	asrs	r3, r2, #31
 80006a2:	1ac9      	subs	r1, r1, r3
 80006a4:	460b      	mov	r3, r1
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	440b      	add	r3, r1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	1ad1      	subs	r1, r2, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 faa2 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(2, (FSM_State - 2) / 10);
 80006b4:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <doState5+0xc8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	4a20      	ldr	r2, [pc, #128]	@ (800073c <doState5+0xc4>)
 80006bc:	fb82 1203 	smull	r1, r2, r2, r3
 80006c0:	1092      	asrs	r2, r2, #2
 80006c2:	17db      	asrs	r3, r3, #31
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 fa95 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(3, (FSM_State - 2) % 10);
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <doState5+0xc8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1e9a      	subs	r2, r3, #2
 80006d4:	4b19      	ldr	r3, [pc, #100]	@ (800073c <doState5+0xc4>)
 80006d6:	fb83 1302 	smull	r1, r3, r3, r2
 80006da:	1099      	asrs	r1, r3, #2
 80006dc:	17d3      	asrs	r3, r2, #31
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	1ad1      	subs	r1, r2, r3
 80006ea:	2003      	movs	r0, #3
 80006ec:	f000 fa84 	bl	8000bf8 <updateLedBuffer>

	if(buttonState[1] == BUTTON_PRESSED){
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <doState5+0xcc>)
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d10b      	bne.n	8000710 <doState5+0x98>
		/*Increase time duration by one*/
		Time_LedYellow_Duration_Temp++;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <doState5+0xc0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <doState5+0xc0>)
 8000700:	6013      	str	r3, [r2, #0]

		if(Time_LedYellow_Duration_Temp > 99){
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <doState5+0xc0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b63      	cmp	r3, #99	@ 0x63
 8000708:	dd02      	ble.n	8000710 <doState5+0x98>
			Time_LedYellow_Duration_Temp = 1;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <doState5+0xc0>)
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
		}
	}

	if(buttonState[2] == BUTTON_PRESSED){
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <doState5+0xcc>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d10d      	bne.n	8000734 <doState5+0xbc>
		/*Update blinking time duration*/
		Time_LedYellow_Duration = Time_LedYellow_Duration_Temp;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <doState5+0xc0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <doState5+0xd0>)
 800071e:	6013      	str	r3, [r2, #0]
		setTimer(BLINKING_LED_YELLOW_TIMER, (Time_LedGreen_Duration * TIME_SCALER)/2);
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <doState5+0xd4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000728:	fb02 f303 	mul.w	r3, r2, r3
 800072c:	4619      	mov	r1, r3
 800072e:	2004      	movs	r0, #4
 8000730:	f001 f902 	bl	8001938 <setTimer>
	}
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000010 	.word	0x20000010
 800073c:	66666667 	.word	0x66666667
 8000740:	20000064 	.word	0x20000064
 8000744:	20000068 	.word	0x20000068
 8000748:	20000004 	.word	0x20000004
 800074c:	20000008 	.word	0x20000008

08000750 <doState6>:

void doState6(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//display7SEG_13((int)(Time_LedGreen_Duration_Temp / 10));
	//display7SEG_Time((int)(Time_LedGreen_Duration_Temp % 10));
	/*Display mode*/
	//display7SEG_24(FSM_State - 2);

	updateLedBuffer(0, Time_LedGreen_Duration_Temp / 10);
 8000754:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <doState6+0xc0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a2e      	ldr	r2, [pc, #184]	@ (8000814 <doState6+0xc4>)
 800075a:	fb82 1203 	smull	r1, r2, r2, r3
 800075e:	1092      	asrs	r2, r2, #2
 8000760:	17db      	asrs	r3, r3, #31
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	4619      	mov	r1, r3
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fa46 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(1, Time_LedGreen_Duration_Temp % 10);
 800076c:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <doState6+0xc0>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b28      	ldr	r3, [pc, #160]	@ (8000814 <doState6+0xc4>)
 8000772:	fb83 1302 	smull	r1, r3, r3, r2
 8000776:	1099      	asrs	r1, r3, #2
 8000778:	17d3      	asrs	r3, r2, #31
 800077a:	1ac9      	subs	r1, r1, r3
 800077c:	460b      	mov	r3, r1
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	1ad1      	subs	r1, r2, r3
 8000786:	2001      	movs	r0, #1
 8000788:	f000 fa36 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(2, (FSM_State - 2) / 10);
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <doState6+0xc8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3b02      	subs	r3, #2
 8000792:	4a20      	ldr	r2, [pc, #128]	@ (8000814 <doState6+0xc4>)
 8000794:	fb82 1203 	smull	r1, r2, r2, r3
 8000798:	1092      	asrs	r2, r2, #2
 800079a:	17db      	asrs	r3, r3, #31
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 fa29 	bl	8000bf8 <updateLedBuffer>
	updateLedBuffer(3, (FSM_State - 2) % 10);
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <doState6+0xc8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1e9a      	subs	r2, r3, #2
 80007ac:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <doState6+0xc4>)
 80007ae:	fb83 1302 	smull	r1, r3, r3, r2
 80007b2:	1099      	asrs	r1, r3, #2
 80007b4:	17d3      	asrs	r3, r2, #31
 80007b6:	1ac9      	subs	r1, r1, r3
 80007b8:	460b      	mov	r3, r1
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	440b      	add	r3, r1
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	1ad1      	subs	r1, r2, r3
 80007c2:	2003      	movs	r0, #3
 80007c4:	f000 fa18 	bl	8000bf8 <updateLedBuffer>

	if(buttonState[1] == BUTTON_PRESSED){
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <doState6+0xcc>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10b      	bne.n	80007e8 <doState6+0x98>
		/*Increase time duration by one*/
		Time_LedGreen_Duration_Temp++;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <doState6+0xc0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <doState6+0xc0>)
 80007d8:	6013      	str	r3, [r2, #0]

		if(Time_LedGreen_Duration_Temp > 99){
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <doState6+0xc0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b63      	cmp	r3, #99	@ 0x63
 80007e0:	dd02      	ble.n	80007e8 <doState6+0x98>
			Time_LedGreen_Duration_Temp = 1;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <doState6+0xc0>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
		}
	}

	if(buttonState[2] == BUTTON_PRESSED){
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <doState6+0xcc>)
 80007ea:	789b      	ldrb	r3, [r3, #2]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10d      	bne.n	800080c <doState6+0xbc>
		/*Update blinking time duration*/
		Time_LedGreen_Duration = Time_LedGreen_Duration_Temp;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <doState6+0xc0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <doState6+0xd0>)
 80007f6:	6013      	str	r3, [r2, #0]
		setTimer(BLINKING_LED_GREEN_TIMER, (Time_LedGreen_Duration * TIME_SCALER)/2);
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <doState6+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000800:	fb02 f303 	mul.w	r3, r2, r3
 8000804:	4619      	mov	r1, r3
 8000806:	2005      	movs	r0, #5
 8000808:	f001 f896 	bl	8001938 <setTimer>
	}
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000014 	.word	0x20000014
 8000814:	66666667 	.word	0x66666667
 8000818:	20000064 	.word	0x20000064
 800081c:	20000068 	.word	0x20000068
 8000820:	20000008 	.word	0x20000008

08000824 <runFSM>:


void runFSM(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	switch(FSM_State){
 8000828:	4b54      	ldr	r3, [pc, #336]	@ (800097c <runFSM+0x158>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b06      	cmp	r3, #6
 800082e:	f200 8093 	bhi.w	8000958 <runFSM+0x134>
 8000832:	a201      	add	r2, pc, #4	@ (adr r2, 8000838 <runFSM+0x14>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	08000855 	.word	0x08000855
 800083c:	08000887 	.word	0x08000887
 8000840:	080008b5 	.word	0x080008b5
 8000844:	080008e3 	.word	0x080008e3
 8000848:	08000911 	.word	0x08000911
 800084c:	08000929 	.word	0x08000929
 8000850:	08000941 	.word	0x08000941
	case RED_GREEN_STATE_MODE1:
		doState0();
 8000854:	f7ff fdfe 	bl	8000454 <doState0>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000858:	2001      	movs	r0, #1
 800085a:	f001 f83d 	bl	80018d8 <getTimerFlags>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d004      	beq.n	800086e <runFSM+0x4a>
			setEnviromentState1();
 8000864:	f7ff fd9e 	bl	80003a4 <setEnviromentState1>
			FSM_State = RED_YELLOW_STATE_MODE1;
 8000868:	4b44      	ldr	r3, [pc, #272]	@ (800097c <runFSM+0x158>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
		}

		if(is_button_pressed(0)){
 800086e:	2000      	movs	r0, #0
 8000870:	f000 f8e6 	bl	8000a40 <is_button_pressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d070      	beq.n	800095c <runFSM+0x138>
			setEnviromentState4();	/*Mode 2*/
 800087a:	f7ff fdc3 	bl	8000404 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 800087e:	4b3f      	ldr	r3, [pc, #252]	@ (800097c <runFSM+0x158>)
 8000880:	2204      	movs	r2, #4
 8000882:	601a      	str	r2, [r3, #0]
		}
		break;
 8000884:	e06a      	b.n	800095c <runFSM+0x138>
	case RED_YELLOW_STATE_MODE1:
		doState1();
 8000886:	f7ff fe0f 	bl	80004a8 <doState1>

		if(getTimerFlags(TRAFFIC_TIMER)){
 800088a:	2001      	movs	r0, #1
 800088c:	f001 f824 	bl	80018d8 <getTimerFlags>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d004      	beq.n	80008a0 <runFSM+0x7c>
			setEnviromentState2();
 8000896:	f7ff fd93 	bl	80003c0 <setEnviromentState2>
			FSM_State = GREEN_RED_STATE_MODE1;
 800089a:	4b38      	ldr	r3, [pc, #224]	@ (800097c <runFSM+0x158>)
 800089c:	2202      	movs	r2, #2
 800089e:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 80008a0:	4b37      	ldr	r3, [pc, #220]	@ (8000980 <runFSM+0x15c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d15b      	bne.n	8000960 <runFSM+0x13c>
			setEnviromentState4();	/*Mode 2*/
 80008a8:	f7ff fdac 	bl	8000404 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 80008ac:	4b33      	ldr	r3, [pc, #204]	@ (800097c <runFSM+0x158>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	601a      	str	r2, [r3, #0]
		}
		break;
 80008b2:	e055      	b.n	8000960 <runFSM+0x13c>
	case GREEN_RED_STATE_MODE1:
		doState2();
 80008b4:	f7ff fe22 	bl	80004fc <doState2>

		if(getTimerFlags(TRAFFIC_TIMER)){
 80008b8:	2001      	movs	r0, #1
 80008ba:	f001 f80d 	bl	80018d8 <getTimerFlags>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d004      	beq.n	80008ce <runFSM+0xaa>
			setEnviromentState3();
 80008c4:	f7ff fd90 	bl	80003e8 <setEnviromentState3>
			FSM_State = YELLOW_RED_STATE_MODE1;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	@ (800097c <runFSM+0x158>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 80008ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <runFSM+0x15c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d146      	bne.n	8000964 <runFSM+0x140>
			setEnviromentState4();	/*Mode 2*/
 80008d6:	f7ff fd95 	bl	8000404 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 80008da:	4b28      	ldr	r3, [pc, #160]	@ (800097c <runFSM+0x158>)
 80008dc:	2204      	movs	r2, #4
 80008de:	601a      	str	r2, [r3, #0]
		}
		break;
 80008e0:	e040      	b.n	8000964 <runFSM+0x140>
	case YELLOW_RED_STATE_MODE1:
		doState3();
 80008e2:	f7ff fe35 	bl	8000550 <doState3>

		if(getTimerFlags(TRAFFIC_TIMER)){
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fff6 	bl	80018d8 <getTimerFlags>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d004      	beq.n	80008fc <runFSM+0xd8>
			setEnviromentState0();
 80008f2:	f7ff fd13 	bl	800031c <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <runFSM+0x158>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 80008fc:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <runFSM+0x15c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d131      	bne.n	8000968 <runFSM+0x144>
			setEnviromentState4();	/*Mode 2*/
 8000904:	f7ff fd7e 	bl	8000404 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 8000908:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <runFSM+0x158>)
 800090a:	2204      	movs	r2, #4
 800090c:	601a      	str	r2, [r3, #0]
		}
		break;
 800090e:	e02b      	b.n	8000968 <runFSM+0x144>
	case NORMAL_STATE_MODE_2:
		doState4();
 8000910:	f7ff fe48 	bl	80005a4 <doState4>

		if(buttonState[0] == BUTTON_PRESSED){
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <runFSM+0x15c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d127      	bne.n	800096c <runFSM+0x148>
			setEnviromentState5();	/*Mode 3*/
 800091c:	f7ff fd81 	bl	8000422 <setEnviromentState5>
			FSM_State = NORMAL_STATE_MODE_3;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <runFSM+0x158>)
 8000922:	2205      	movs	r2, #5
 8000924:	601a      	str	r2, [r3, #0]
		}
		break;
 8000926:	e021      	b.n	800096c <runFSM+0x148>
	case NORMAL_STATE_MODE_3:
		doState5();
 8000928:	f7ff fea6 	bl	8000678 <doState5>

		if(buttonState[0] == BUTTON_PRESSED){
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <runFSM+0x15c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d11d      	bne.n	8000970 <runFSM+0x14c>
			setEnviromentState6();	/*Mode 4*/
 8000934:	f7ff fd81 	bl	800043a <setEnviromentState6>
			FSM_State = NORMAL_STATE_MODE_4;
 8000938:	4b10      	ldr	r3, [pc, #64]	@ (800097c <runFSM+0x158>)
 800093a:	2206      	movs	r2, #6
 800093c:	601a      	str	r2, [r3, #0]
		}
		break;
 800093e:	e017      	b.n	8000970 <runFSM+0x14c>
	case NORMAL_STATE_MODE_4:
		doState6();
 8000940:	f7ff ff06 	bl	8000750 <doState6>

		if(buttonState[0] == BUTTON_PRESSED){
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <runFSM+0x15c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d113      	bne.n	8000974 <runFSM+0x150>
			setEnviromentState0();	/*Mode 1*/
 800094c:	f7ff fce6 	bl	800031c <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <runFSM+0x158>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
		}
		break;
 8000956:	e00d      	b.n	8000974 <runFSM+0x150>
	default:
		break;
 8000958:	bf00      	nop
 800095a:	e00c      	b.n	8000976 <runFSM+0x152>
		break;
 800095c:	bf00      	nop
 800095e:	e00a      	b.n	8000976 <runFSM+0x152>
		break;
 8000960:	bf00      	nop
 8000962:	e008      	b.n	8000976 <runFSM+0x152>
		break;
 8000964:	bf00      	nop
 8000966:	e006      	b.n	8000976 <runFSM+0x152>
		break;
 8000968:	bf00      	nop
 800096a:	e004      	b.n	8000976 <runFSM+0x152>
		break;
 800096c:	bf00      	nop
 800096e:	e002      	b.n	8000976 <runFSM+0x152>
		break;
 8000970:	bf00      	nop
 8000972:	e000      	b.n	8000976 <runFSM+0x152>
		break;
 8000974:	bf00      	nop
	}

	return;
 8000976:	bf00      	nop
}
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000064 	.word	0x20000064
 8000980:	20000068 	.word	0x20000068

08000984 <fsm_for_input_processing>:

#include "input_processing.h"

enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED,BUTTON_RELEASED,BUTTON_RELEASED};

void fsm_for_input_processing(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	for(int i=0;i<N0_OF_BUTTONS;i++){
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	e04c      	b.n	8000a2a <fsm_for_input_processing+0xa6>
		switch(buttonState[i]){
 8000990:	4a2a      	ldr	r2, [pc, #168]	@ (8000a3c <fsm_for_input_processing+0xb8>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d030      	beq.n	80009fe <fsm_for_input_processing+0x7a>
 800099c:	2b02      	cmp	r3, #2
 800099e:	dc41      	bgt.n	8000a24 <fsm_for_input_processing+0xa0>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <fsm_for_input_processing+0x26>
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d00e      	beq.n	80009c6 <fsm_for_input_processing+0x42>
 80009a8:	e03c      	b.n	8000a24 <fsm_for_input_processing+0xa0>
		case BUTTON_RELEASED:
			if(is_button_pressed(i)){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f846 	bl	8000a40 <is_button_pressed>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d02f      	beq.n	8000a1a <fsm_for_input_processing+0x96>
				buttonState[i] = BUTTON_PRESSED;
 80009ba:	4a20      	ldr	r2, [pc, #128]	@ (8000a3c <fsm_for_input_processing+0xb8>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
				// Increase value PORTA by one
			}
			break;
 80009c4:	e029      	b.n	8000a1a <fsm_for_input_processing+0x96>
		case BUTTON_PRESSED:
			if(!is_button_pressed(i)){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f838 	bl	8000a40 <is_button_pressed>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d105      	bne.n	80009e2 <fsm_for_input_processing+0x5e>
				buttonState[i] = BUTTON_RELEASED;
 80009d6:	4a19      	ldr	r2, [pc, #100]	@ (8000a3c <fsm_for_input_processing+0xb8>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4413      	add	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
					// Set timer 500ms for auto increase
					//setTimer(AUTO_INCREASE, 500);
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 80009e0:	e01d      	b.n	8000a1e <fsm_for_input_processing+0x9a>
				if(is_button_pressed_1s(i)){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f848 	bl	8000a7c <is_button_pressed_1s>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d015      	beq.n	8000a1e <fsm_for_input_processing+0x9a>
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <fsm_for_input_processing+0xb8>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	2202      	movs	r2, #2
 80009fa:	701a      	strb	r2, [r3, #0]
			break;
 80009fc:	e00f      	b.n	8000a1e <fsm_for_input_processing+0x9a>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed(i)){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f81c 	bl	8000a40 <is_button_pressed>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d109      	bne.n	8000a22 <fsm_for_input_processing+0x9e>
				buttonState[i] = BUTTON_RELEASED;
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a3c <fsm_for_input_processing+0xb8>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
				/*if(getTimerFlags(AUTO_INCREASE)){
					// Increase value PORTA by one
					//setTimer(AUTO_INCREASE, 500);
				}*/
			}
			break;
 8000a18:	e003      	b.n	8000a22 <fsm_for_input_processing+0x9e>
			break;
 8000a1a:	bf00      	nop
 8000a1c:	e002      	b.n	8000a24 <fsm_for_input_processing+0xa0>
			break;
 8000a1e:	bf00      	nop
 8000a20:	e000      	b.n	8000a24 <fsm_for_input_processing+0xa0>
			break;
 8000a22:	bf00      	nop
	for(int i=0;i<N0_OF_BUTTONS;i++){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3301      	adds	r3, #1
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	ddaf      	ble.n	8000990 <fsm_for_input_processing+0xc>
		}
	}
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000068 	.word	0x20000068

08000a40 <is_button_pressed>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0};
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {0};

unsigned char is_button_pressed(uint8_t index){
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d901      	bls.n	8000a54 <is_button_pressed+0x14>
 8000a50:	2300      	movs	r3, #0
 8000a52:	e00b      	b.n	8000a6c <is_button_pressed+0x2c>

	if(flagForButtonPress[index]){
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <is_button_pressed+0x38>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d005      	beq.n	8000a6a <is_button_pressed+0x2a>
		flagForButtonPress[index] = 0;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <is_button_pressed+0x38>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <is_button_pressed+0x2c>
	}

	return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2000006c 	.word	0x2000006c

08000a7c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d901      	bls.n	8000a90 <is_button_pressed_1s+0x14>
 8000a8c:	23ff      	movs	r3, #255	@ 0xff
 8000a8e:	e00b      	b.n	8000aa8 <is_button_pressed_1s+0x2c>

	if(flagForButtonPress1s[index]){
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <is_button_pressed_1s+0x38>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d005      	beq.n	8000aa6 <is_button_pressed_1s+0x2a>
		flagForButtonPress1s[index] = 0;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <is_button_pressed_1s+0x38>)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <is_button_pressed_1s+0x2c>
	}

	return 0;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000070 	.word	0x20000070

08000ab8 <button_reading>:

/*Many bug in input_reading :))*/
void button_reading(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e082      	b.n	8000bca <button_reading+0x112>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000ac4:	4a45      	ldr	r2, [pc, #276]	@ (8000bdc <button_reading+0x124>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	7819      	ldrb	r1, [r3, #0]
 8000acc:	4a44      	ldr	r2, [pc, #272]	@ (8000be0 <button_reading+0x128>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000ad6:	4a43      	ldr	r2, [pc, #268]	@ (8000be4 <button_reading+0x12c>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	7819      	ldrb	r1, [r3, #0]
 8000ade:	4a3f      	ldr	r2, [pc, #252]	@ (8000bdc <button_reading+0x124>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	701a      	strb	r2, [r3, #0]
		// Chose button port
		if(i == 0){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10b      	bne.n	8000b06 <button_reading+0x4e>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000aee:	2101      	movs	r1, #1
 8000af0:	483d      	ldr	r0, [pc, #244]	@ (8000be8 <button_reading+0x130>)
 8000af2:	f001 fb13 	bl	800211c <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4a3a      	ldr	r2, [pc, #232]	@ (8000be4 <button_reading+0x12c>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	460a      	mov	r2, r1
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e01c      	b.n	8000b40 <button_reading+0x88>
		}
		else if(i == 1){
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d10b      	bne.n	8000b24 <button_reading+0x6c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4836      	ldr	r0, [pc, #216]	@ (8000be8 <button_reading+0x130>)
 8000b10:	f001 fb04 	bl	800211c <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4619      	mov	r1, r3
 8000b18:	4a32      	ldr	r2, [pc, #200]	@ (8000be4 <button_reading+0x12c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	460a      	mov	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	e00d      	b.n	8000b40 <button_reading+0x88>
		}
		else if( i == 2){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d10a      	bne.n	8000b40 <button_reading+0x88>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	482e      	ldr	r0, [pc, #184]	@ (8000be8 <button_reading+0x130>)
 8000b2e:	f001 faf5 	bl	800211c <HAL_GPIO_ReadPin>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <button_reading+0x12c>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	701a      	strb	r2, [r3, #0]
		}
		else{
			/*This is fault value of index button*/
		}

		if((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) &&
 8000b40:	4a28      	ldr	r2, [pc, #160]	@ (8000be4 <button_reading+0x12c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	4924      	ldr	r1, [pc, #144]	@ (8000bdc <button_reading+0x124>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	440b      	add	r3, r1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d137      	bne.n	8000bc4 <button_reading+0x10c>
				(debounceButtonBuffer2[i] == debounceButtonBuffer3[i])){
 8000b54:	4a21      	ldr	r2, [pc, #132]	@ (8000bdc <button_reading+0x124>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4920      	ldr	r1, [pc, #128]	@ (8000be0 <button_reading+0x128>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	440b      	add	r3, r1
 8000b62:	781b      	ldrb	r3, [r3, #0]
		if((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) &&
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d12d      	bne.n	8000bc4 <button_reading+0x10c>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 8000b68:	4a1e      	ldr	r2, [pc, #120]	@ (8000be4 <button_reading+0x12c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	491e      	ldr	r1, [pc, #120]	@ (8000bec <button_reading+0x134>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	440b      	add	r3, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d019      	beq.n	8000bb0 <button_reading+0xf8>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <button_reading+0x12c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	7819      	ldrb	r1, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	@ (8000bec <button_reading+0x134>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	460a      	mov	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000b8e:	4a17      	ldr	r2, [pc, #92]	@ (8000bec <button_reading+0x134>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d114      	bne.n	8000bc4 <button_reading+0x10c>
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000b9a:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <button_reading+0x138>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2164      	movs	r1, #100	@ 0x64
 8000ba0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress[i] = 1;
 8000ba4:	4a13      	ldr	r2, [pc, #76]	@ (8000bf4 <button_reading+0x13c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	e009      	b.n	8000bc4 <button_reading+0x10c>
				}
			}
			else{
				counterForButtonPress1s[i]--;
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <button_reading+0x138>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	b299      	uxth	r1, r3
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <button_reading+0x138>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	f77f af79 	ble.w	8000ac4 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000020 	.word	0x20000020
 8000be0:	20000024 	.word	0x20000024
 8000be4:	2000001c 	.word	0x2000001c
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	20000018 	.word	0x20000018
 8000bf0:	20000074 	.word	0x20000074
 8000bf4:	2000006c 	.word	0x2000006c

08000bf8 <updateLedBuffer>:
int Led24_Count;

int index_led = 0;
int led_buffer[4] = {5,0,0,3};

void updateLedBuffer(int index, int value){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	led_buffer[index] = value;
 8000c02:	4905      	ldr	r1, [pc, #20]	@ (8000c18 <updateLedBuffer+0x20>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000028 	.word	0x20000028

08000c1c <disable7SEG>:

void disable7SEG(int index){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if(index == 0){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d106      	bne.n	8000c38 <disable7SEG+0x1c>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c30:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <disable7SEG+0x60>)
 8000c32:	f001 fa8a 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
	}
	else{

	}
}
 8000c36:	e01c      	b.n	8000c72 <disable7SEG+0x56>
	else if(index == 1){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d106      	bne.n	8000c4c <disable7SEG+0x30>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <disable7SEG+0x60>)
 8000c46:	f001 fa80 	bl	800214a <HAL_GPIO_WritePin>
}
 8000c4a:	e012      	b.n	8000c72 <disable7SEG+0x56>
	else if(index == 2){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d106      	bne.n	8000c60 <disable7SEG+0x44>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c58:	4808      	ldr	r0, [pc, #32]	@ (8000c7c <disable7SEG+0x60>)
 8000c5a:	f001 fa76 	bl	800214a <HAL_GPIO_WritePin>
}
 8000c5e:	e008      	b.n	8000c72 <disable7SEG+0x56>
	else if(index == 3){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d105      	bne.n	8000c72 <disable7SEG+0x56>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c6c:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <disable7SEG+0x60>)
 8000c6e:	f001 fa6c 	bl	800214a <HAL_GPIO_WritePin>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <enable7SEGNoClear>:

void enable7SEGNoClear(int index){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if(index == 0){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d106      	bne.n	8000c9c <enable7SEGNoClear+0x1c>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c94:	4812      	ldr	r0, [pc, #72]	@ (8000ce0 <enable7SEGNoClear+0x60>)
 8000c96:	f001 fa58 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
	}
	else{

	}
}
 8000c9a:	e01c      	b.n	8000cd6 <enable7SEGNoClear+0x56>
	else if(index == 1){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d106      	bne.n	8000cb0 <enable7SEGNoClear+0x30>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ca8:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <enable7SEGNoClear+0x60>)
 8000caa:	f001 fa4e 	bl	800214a <HAL_GPIO_WritePin>
}
 8000cae:	e012      	b.n	8000cd6 <enable7SEGNoClear+0x56>
	else if(index == 2){
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d106      	bne.n	8000cc4 <enable7SEGNoClear+0x44>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cbc:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <enable7SEGNoClear+0x60>)
 8000cbe:	f001 fa44 	bl	800214a <HAL_GPIO_WritePin>
}
 8000cc2:	e008      	b.n	8000cd6 <enable7SEGNoClear+0x56>
	else if(index == 3){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d105      	bne.n	8000cd6 <enable7SEGNoClear+0x56>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <enable7SEGNoClear+0x60>)
 8000cd2:	f001 fa3a 	bl	800214a <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <enable7SEG>:

void enable7SEG(int index){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if(index == 0){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d118      	bne.n	8000d24 <enable7SEG+0x40>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf8:	4836      	ldr	r0, [pc, #216]	@ (8000dd4 <enable7SEG+0xf0>)
 8000cfa:	f001 fa26 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d04:	4833      	ldr	r0, [pc, #204]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d06:	f001 fa20 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d10:	4830      	ldr	r0, [pc, #192]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d12:	f001 fa1a 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d1c:	482d      	ldr	r0, [pc, #180]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d1e:	f001 fa14 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
	}
	else{

	}
}
 8000d22:	e052      	b.n	8000dca <enable7SEG+0xe6>
	else if(index == 1){
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d118      	bne.n	8000d5c <enable7SEG+0x78>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d30:	4828      	ldr	r0, [pc, #160]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d32:	f001 fa0a 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3c:	4825      	ldr	r0, [pc, #148]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d3e:	f001 fa04 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d48:	4822      	ldr	r0, [pc, #136]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d4a:	f001 f9fe 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d54:	481f      	ldr	r0, [pc, #124]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d56:	f001 f9f8 	bl	800214a <HAL_GPIO_WritePin>
}
 8000d5a:	e036      	b.n	8000dca <enable7SEG+0xe6>
	else if(index == 2){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d118      	bne.n	8000d94 <enable7SEG+0xb0>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d68:	481a      	ldr	r0, [pc, #104]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d6a:	f001 f9ee 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d74:	4817      	ldr	r0, [pc, #92]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d76:	f001 f9e8 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d80:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d82:	f001 f9e2 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d8c:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <enable7SEG+0xf0>)
 8000d8e:	f001 f9dc 	bl	800214a <HAL_GPIO_WritePin>
}
 8000d92:	e01a      	b.n	8000dca <enable7SEG+0xe6>
	else if(index == 3){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d117      	bne.n	8000dca <enable7SEG+0xe6>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <enable7SEG+0xf0>)
 8000da2:	f001 f9d2 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dac:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <enable7SEG+0xf0>)
 8000dae:	f001 f9cc 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db8:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <enable7SEG+0xf0>)
 8000dba:	f001 f9c6 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <enable7SEG+0xf0>)
 8000dc6:	f001 f9c0 	bl	800214a <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <display7SEG>:

void display7SEG(int index){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	switch(index){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d836      	bhi.n	8000e54 <display7SEG+0x7c>
 8000de6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <display7SEG+0x14>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000dfd 	.word	0x08000dfd
 8000df0:	08000e13 	.word	0x08000e13
 8000df4:	08000e29 	.word	0x08000e29
 8000df8:	08000e3f 	.word	0x08000e3f
	case 0:
		enable7SEG(index);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff71 	bl	8000ce4 <enable7SEG>
		display7SEG_13(led_buffer[index]);
 8000e02:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <display7SEG+0x88>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f82a 	bl	8000e64 <display7SEG_13>
		break;
 8000e10:	e021      	b.n	8000e56 <display7SEG+0x7e>
	case 1:
		enable7SEG(index);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff66 	bl	8000ce4 <enable7SEG>
		display7SEG_13(led_buffer[index]);
 8000e18:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <display7SEG+0x88>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f81f 	bl	8000e64 <display7SEG_13>
		break;
 8000e26:	e016      	b.n	8000e56 <display7SEG+0x7e>
	case 2:
		enable7SEG(index);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff5b 	bl	8000ce4 <enable7SEG>
		display7SEG_24(led_buffer[index]);
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e60 <display7SEG+0x88>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f9a4 	bl	8001184 <display7SEG_24>
		break;
 8000e3c:	e00b      	b.n	8000e56 <display7SEG+0x7e>
	case 3:
		enable7SEG(index);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff50 	bl	8000ce4 <enable7SEG>
		display7SEG_24(led_buffer[index]);
 8000e44:	4a06      	ldr	r2, [pc, #24]	@ (8000e60 <display7SEG+0x88>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f999 	bl	8001184 <display7SEG_24>
		break;
 8000e52:	e000      	b.n	8000e56 <display7SEG+0x7e>
	default:
		break;
 8000e54:	bf00      	nop
	}
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000028 	.word	0x20000028

08000e64 <display7SEG_13>:

void display7SEG_13(int number){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d123      	bne.n	8000eba <display7SEG_13+0x56>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2101      	movs	r1, #1
 8000e76:	48c2      	ldr	r0, [pc, #776]	@ (8001180 <display7SEG_13+0x31c>)
 8000e78:	f001 f967 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2102      	movs	r1, #2
 8000e80:	48bf      	ldr	r0, [pc, #764]	@ (8001180 <display7SEG_13+0x31c>)
 8000e82:	f001 f962 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2104      	movs	r1, #4
 8000e8a:	48bd      	ldr	r0, [pc, #756]	@ (8001180 <display7SEG_13+0x31c>)
 8000e8c:	f001 f95d 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2108      	movs	r1, #8
 8000e94:	48ba      	ldr	r0, [pc, #744]	@ (8001180 <display7SEG_13+0x31c>)
 8000e96:	f001 f958 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	48b8      	ldr	r0, [pc, #736]	@ (8001180 <display7SEG_13+0x31c>)
 8000ea0:	f001 f953 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2120      	movs	r1, #32
 8000ea8:	48b5      	ldr	r0, [pc, #724]	@ (8001180 <display7SEG_13+0x31c>)
 8000eaa:	f001 f94e 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	48b3      	ldr	r0, [pc, #716]	@ (8001180 <display7SEG_13+0x31c>)
 8000eb4:	f001 f949 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000eb8:	e15d      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 1){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d123      	bne.n	8000f08 <display7SEG_13+0xa4>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	48ae      	ldr	r0, [pc, #696]	@ (8001180 <display7SEG_13+0x31c>)
 8000ec6:	f001 f940 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2102      	movs	r1, #2
 8000ece:	48ac      	ldr	r0, [pc, #688]	@ (8001180 <display7SEG_13+0x31c>)
 8000ed0:	f001 f93b 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	48a9      	ldr	r0, [pc, #676]	@ (8001180 <display7SEG_13+0x31c>)
 8000eda:	f001 f936 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	48a7      	ldr	r0, [pc, #668]	@ (8001180 <display7SEG_13+0x31c>)
 8000ee4:	f001 f931 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2110      	movs	r1, #16
 8000eec:	48a4      	ldr	r0, [pc, #656]	@ (8001180 <display7SEG_13+0x31c>)
 8000eee:	f001 f92c 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	48a2      	ldr	r0, [pc, #648]	@ (8001180 <display7SEG_13+0x31c>)
 8000ef8:	f001 f927 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2140      	movs	r1, #64	@ 0x40
 8000f00:	489f      	ldr	r0, [pc, #636]	@ (8001180 <display7SEG_13+0x31c>)
 8000f02:	f001 f922 	bl	800214a <HAL_GPIO_WritePin>
}
 8000f06:	e136      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 2){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <display7SEG_13+0xf2>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2101      	movs	r1, #1
 8000f12:	489b      	ldr	r0, [pc, #620]	@ (8001180 <display7SEG_13+0x31c>)
 8000f14:	f001 f919 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4898      	ldr	r0, [pc, #608]	@ (8001180 <display7SEG_13+0x31c>)
 8000f1e:	f001 f914 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2104      	movs	r1, #4
 8000f26:	4896      	ldr	r0, [pc, #600]	@ (8001180 <display7SEG_13+0x31c>)
 8000f28:	f001 f90f 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2108      	movs	r1, #8
 8000f30:	4893      	ldr	r0, [pc, #588]	@ (8001180 <display7SEG_13+0x31c>)
 8000f32:	f001 f90a 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2110      	movs	r1, #16
 8000f3a:	4891      	ldr	r0, [pc, #580]	@ (8001180 <display7SEG_13+0x31c>)
 8000f3c:	f001 f905 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2120      	movs	r1, #32
 8000f44:	488e      	ldr	r0, [pc, #568]	@ (8001180 <display7SEG_13+0x31c>)
 8000f46:	f001 f900 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2140      	movs	r1, #64	@ 0x40
 8000f4e:	488c      	ldr	r0, [pc, #560]	@ (8001180 <display7SEG_13+0x31c>)
 8000f50:	f001 f8fb 	bl	800214a <HAL_GPIO_WritePin>
}
 8000f54:	e10f      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 3){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d123      	bne.n	8000fa4 <display7SEG_13+0x140>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4887      	ldr	r0, [pc, #540]	@ (8001180 <display7SEG_13+0x31c>)
 8000f62:	f001 f8f2 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4885      	ldr	r0, [pc, #532]	@ (8001180 <display7SEG_13+0x31c>)
 8000f6c:	f001 f8ed 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2104      	movs	r1, #4
 8000f74:	4882      	ldr	r0, [pc, #520]	@ (8001180 <display7SEG_13+0x31c>)
 8000f76:	f001 f8e8 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4880      	ldr	r0, [pc, #512]	@ (8001180 <display7SEG_13+0x31c>)
 8000f80:	f001 f8e3 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	487d      	ldr	r0, [pc, #500]	@ (8001180 <display7SEG_13+0x31c>)
 8000f8a:	f001 f8de 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2120      	movs	r1, #32
 8000f92:	487b      	ldr	r0, [pc, #492]	@ (8001180 <display7SEG_13+0x31c>)
 8000f94:	f001 f8d9 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2140      	movs	r1, #64	@ 0x40
 8000f9c:	4878      	ldr	r0, [pc, #480]	@ (8001180 <display7SEG_13+0x31c>)
 8000f9e:	f001 f8d4 	bl	800214a <HAL_GPIO_WritePin>
}
 8000fa2:	e0e8      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 4){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d123      	bne.n	8000ff2 <display7SEG_13+0x18e>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2101      	movs	r1, #1
 8000fae:	4874      	ldr	r0, [pc, #464]	@ (8001180 <display7SEG_13+0x31c>)
 8000fb0:	f001 f8cb 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4871      	ldr	r0, [pc, #452]	@ (8001180 <display7SEG_13+0x31c>)
 8000fba:	f001 f8c6 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	486f      	ldr	r0, [pc, #444]	@ (8001180 <display7SEG_13+0x31c>)
 8000fc4:	f001 f8c1 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2108      	movs	r1, #8
 8000fcc:	486c      	ldr	r0, [pc, #432]	@ (8001180 <display7SEG_13+0x31c>)
 8000fce:	f001 f8bc 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	486a      	ldr	r0, [pc, #424]	@ (8001180 <display7SEG_13+0x31c>)
 8000fd8:	f001 f8b7 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2120      	movs	r1, #32
 8000fe0:	4867      	ldr	r0, [pc, #412]	@ (8001180 <display7SEG_13+0x31c>)
 8000fe2:	f001 f8b2 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2140      	movs	r1, #64	@ 0x40
 8000fea:	4865      	ldr	r0, [pc, #404]	@ (8001180 <display7SEG_13+0x31c>)
 8000fec:	f001 f8ad 	bl	800214a <HAL_GPIO_WritePin>
}
 8000ff0:	e0c1      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 5){
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b05      	cmp	r3, #5
 8000ff6:	d123      	bne.n	8001040 <display7SEG_13+0x1dc>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4860      	ldr	r0, [pc, #384]	@ (8001180 <display7SEG_13+0x31c>)
 8000ffe:	f001 f8a4 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2102      	movs	r1, #2
 8001006:	485e      	ldr	r0, [pc, #376]	@ (8001180 <display7SEG_13+0x31c>)
 8001008:	f001 f89f 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2104      	movs	r1, #4
 8001010:	485b      	ldr	r0, [pc, #364]	@ (8001180 <display7SEG_13+0x31c>)
 8001012:	f001 f89a 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2108      	movs	r1, #8
 800101a:	4859      	ldr	r0, [pc, #356]	@ (8001180 <display7SEG_13+0x31c>)
 800101c:	f001 f895 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2110      	movs	r1, #16
 8001024:	4856      	ldr	r0, [pc, #344]	@ (8001180 <display7SEG_13+0x31c>)
 8001026:	f001 f890 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2120      	movs	r1, #32
 800102e:	4854      	ldr	r0, [pc, #336]	@ (8001180 <display7SEG_13+0x31c>)
 8001030:	f001 f88b 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2140      	movs	r1, #64	@ 0x40
 8001038:	4851      	ldr	r0, [pc, #324]	@ (8001180 <display7SEG_13+0x31c>)
 800103a:	f001 f886 	bl	800214a <HAL_GPIO_WritePin>
}
 800103e:	e09a      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 6){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b06      	cmp	r3, #6
 8001044:	d123      	bne.n	800108e <display7SEG_13+0x22a>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2101      	movs	r1, #1
 800104a:	484d      	ldr	r0, [pc, #308]	@ (8001180 <display7SEG_13+0x31c>)
 800104c:	f001 f87d 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2102      	movs	r1, #2
 8001054:	484a      	ldr	r0, [pc, #296]	@ (8001180 <display7SEG_13+0x31c>)
 8001056:	f001 f878 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2104      	movs	r1, #4
 800105e:	4848      	ldr	r0, [pc, #288]	@ (8001180 <display7SEG_13+0x31c>)
 8001060:	f001 f873 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4845      	ldr	r0, [pc, #276]	@ (8001180 <display7SEG_13+0x31c>)
 800106a:	f001 f86e 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2110      	movs	r1, #16
 8001072:	4843      	ldr	r0, [pc, #268]	@ (8001180 <display7SEG_13+0x31c>)
 8001074:	f001 f869 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2120      	movs	r1, #32
 800107c:	4840      	ldr	r0, [pc, #256]	@ (8001180 <display7SEG_13+0x31c>)
 800107e:	f001 f864 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2140      	movs	r1, #64	@ 0x40
 8001086:	483e      	ldr	r0, [pc, #248]	@ (8001180 <display7SEG_13+0x31c>)
 8001088:	f001 f85f 	bl	800214a <HAL_GPIO_WritePin>
}
 800108c:	e073      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 7){
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b07      	cmp	r3, #7
 8001092:	d123      	bne.n	80010dc <display7SEG_13+0x278>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2101      	movs	r1, #1
 8001098:	4839      	ldr	r0, [pc, #228]	@ (8001180 <display7SEG_13+0x31c>)
 800109a:	f001 f856 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2102      	movs	r1, #2
 80010a2:	4837      	ldr	r0, [pc, #220]	@ (8001180 <display7SEG_13+0x31c>)
 80010a4:	f001 f851 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2104      	movs	r1, #4
 80010ac:	4834      	ldr	r0, [pc, #208]	@ (8001180 <display7SEG_13+0x31c>)
 80010ae:	f001 f84c 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2108      	movs	r1, #8
 80010b6:	4832      	ldr	r0, [pc, #200]	@ (8001180 <display7SEG_13+0x31c>)
 80010b8:	f001 f847 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2110      	movs	r1, #16
 80010c0:	482f      	ldr	r0, [pc, #188]	@ (8001180 <display7SEG_13+0x31c>)
 80010c2:	f001 f842 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2120      	movs	r1, #32
 80010ca:	482d      	ldr	r0, [pc, #180]	@ (8001180 <display7SEG_13+0x31c>)
 80010cc:	f001 f83d 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2140      	movs	r1, #64	@ 0x40
 80010d4:	482a      	ldr	r0, [pc, #168]	@ (8001180 <display7SEG_13+0x31c>)
 80010d6:	f001 f838 	bl	800214a <HAL_GPIO_WritePin>
}
 80010da:	e04c      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 8){
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d123      	bne.n	800112a <display7SEG_13+0x2c6>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	4826      	ldr	r0, [pc, #152]	@ (8001180 <display7SEG_13+0x31c>)
 80010e8:	f001 f82f 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2102      	movs	r1, #2
 80010f0:	4823      	ldr	r0, [pc, #140]	@ (8001180 <display7SEG_13+0x31c>)
 80010f2:	f001 f82a 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2104      	movs	r1, #4
 80010fa:	4821      	ldr	r0, [pc, #132]	@ (8001180 <display7SEG_13+0x31c>)
 80010fc:	f001 f825 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2108      	movs	r1, #8
 8001104:	481e      	ldr	r0, [pc, #120]	@ (8001180 <display7SEG_13+0x31c>)
 8001106:	f001 f820 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2110      	movs	r1, #16
 800110e:	481c      	ldr	r0, [pc, #112]	@ (8001180 <display7SEG_13+0x31c>)
 8001110:	f001 f81b 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2120      	movs	r1, #32
 8001118:	4819      	ldr	r0, [pc, #100]	@ (8001180 <display7SEG_13+0x31c>)
 800111a:	f001 f816 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2140      	movs	r1, #64	@ 0x40
 8001122:	4817      	ldr	r0, [pc, #92]	@ (8001180 <display7SEG_13+0x31c>)
 8001124:	f001 f811 	bl	800214a <HAL_GPIO_WritePin>
}
 8001128:	e025      	b.n	8001176 <display7SEG_13+0x312>
	else if(number == 9){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d122      	bne.n	8001176 <display7SEG_13+0x312>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2101      	movs	r1, #1
 8001134:	4812      	ldr	r0, [pc, #72]	@ (8001180 <display7SEG_13+0x31c>)
 8001136:	f001 f808 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2102      	movs	r1, #2
 800113e:	4810      	ldr	r0, [pc, #64]	@ (8001180 <display7SEG_13+0x31c>)
 8001140:	f001 f803 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2104      	movs	r1, #4
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <display7SEG_13+0x31c>)
 800114a:	f000 fffe 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2108      	movs	r1, #8
 8001152:	480b      	ldr	r0, [pc, #44]	@ (8001180 <display7SEG_13+0x31c>)
 8001154:	f000 fff9 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <display7SEG_13+0x31c>)
 800115e:	f000 fff4 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2120      	movs	r1, #32
 8001166:	4806      	ldr	r0, [pc, #24]	@ (8001180 <display7SEG_13+0x31c>)
 8001168:	f000 ffef 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2140      	movs	r1, #64	@ 0x40
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <display7SEG_13+0x31c>)
 8001172:	f000 ffea 	bl	800214a <HAL_GPIO_WritePin>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40010800 	.word	0x40010800

08001184 <display7SEG_24>:

void display7SEG_24(int number){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if(number == 0){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d12a      	bne.n	80011e8 <display7SEG_24+0x64>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001198:	48cb      	ldr	r0, [pc, #812]	@ (80014c8 <display7SEG_24+0x344>)
 800119a:	f000 ffd6 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a4:	48c8      	ldr	r0, [pc, #800]	@ (80014c8 <display7SEG_24+0x344>)
 80011a6:	f000 ffd0 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b0:	48c5      	ldr	r0, [pc, #788]	@ (80014c8 <display7SEG_24+0x344>)
 80011b2:	f000 ffca 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011bc:	48c2      	ldr	r0, [pc, #776]	@ (80014c8 <display7SEG_24+0x344>)
 80011be:	f000 ffc4 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c8:	48bf      	ldr	r0, [pc, #764]	@ (80014c8 <display7SEG_24+0x344>)
 80011ca:	f000 ffbe 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d4:	48bc      	ldr	r0, [pc, #752]	@ (80014c8 <display7SEG_24+0x344>)
 80011d6:	f000 ffb8 	bl	800214a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011e0:	48b9      	ldr	r0, [pc, #740]	@ (80014c8 <display7SEG_24+0x344>)
 80011e2:	f000 ffb2 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 80011e6:	e19e      	b.n	8001526 <display7SEG_24+0x3a2>
	else if(number == 1){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d12a      	bne.n	8001244 <display7SEG_24+0xc0>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f4:	48b4      	ldr	r0, [pc, #720]	@ (80014c8 <display7SEG_24+0x344>)
 80011f6:	f000 ffa8 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001200:	48b1      	ldr	r0, [pc, #708]	@ (80014c8 <display7SEG_24+0x344>)
 8001202:	f000 ffa2 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800120c:	48ae      	ldr	r0, [pc, #696]	@ (80014c8 <display7SEG_24+0x344>)
 800120e:	f000 ff9c 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001218:	48ab      	ldr	r0, [pc, #684]	@ (80014c8 <display7SEG_24+0x344>)
 800121a:	f000 ff96 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001224:	48a8      	ldr	r0, [pc, #672]	@ (80014c8 <display7SEG_24+0x344>)
 8001226:	f000 ff90 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001230:	48a5      	ldr	r0, [pc, #660]	@ (80014c8 <display7SEG_24+0x344>)
 8001232:	f000 ff8a 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800123c:	48a2      	ldr	r0, [pc, #648]	@ (80014c8 <display7SEG_24+0x344>)
 800123e:	f000 ff84 	bl	800214a <HAL_GPIO_WritePin>
}
 8001242:	e170      	b.n	8001526 <display7SEG_24+0x3a2>
	else if(number == 2){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d12a      	bne.n	80012a0 <display7SEG_24+0x11c>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001250:	489d      	ldr	r0, [pc, #628]	@ (80014c8 <display7SEG_24+0x344>)
 8001252:	f000 ff7a 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800125c:	489a      	ldr	r0, [pc, #616]	@ (80014c8 <display7SEG_24+0x344>)
 800125e:	f000 ff74 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001268:	4897      	ldr	r0, [pc, #604]	@ (80014c8 <display7SEG_24+0x344>)
 800126a:	f000 ff6e 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001274:	4894      	ldr	r0, [pc, #592]	@ (80014c8 <display7SEG_24+0x344>)
 8001276:	f000 ff68 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001280:	4891      	ldr	r0, [pc, #580]	@ (80014c8 <display7SEG_24+0x344>)
 8001282:	f000 ff62 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128c:	488e      	ldr	r0, [pc, #568]	@ (80014c8 <display7SEG_24+0x344>)
 800128e:	f000 ff5c 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001298:	488b      	ldr	r0, [pc, #556]	@ (80014c8 <display7SEG_24+0x344>)
 800129a:	f000 ff56 	bl	800214a <HAL_GPIO_WritePin>
}
 800129e:	e142      	b.n	8001526 <display7SEG_24+0x3a2>
	else if(number == 3){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d12a      	bne.n	80012fc <display7SEG_24+0x178>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ac:	4886      	ldr	r0, [pc, #536]	@ (80014c8 <display7SEG_24+0x344>)
 80012ae:	f000 ff4c 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b8:	4883      	ldr	r0, [pc, #524]	@ (80014c8 <display7SEG_24+0x344>)
 80012ba:	f000 ff46 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012c4:	4880      	ldr	r0, [pc, #512]	@ (80014c8 <display7SEG_24+0x344>)
 80012c6:	f000 ff40 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d0:	487d      	ldr	r0, [pc, #500]	@ (80014c8 <display7SEG_24+0x344>)
 80012d2:	f000 ff3a 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012dc:	487a      	ldr	r0, [pc, #488]	@ (80014c8 <display7SEG_24+0x344>)
 80012de:	f000 ff34 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e8:	4877      	ldr	r0, [pc, #476]	@ (80014c8 <display7SEG_24+0x344>)
 80012ea:	f000 ff2e 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012f4:	4874      	ldr	r0, [pc, #464]	@ (80014c8 <display7SEG_24+0x344>)
 80012f6:	f000 ff28 	bl	800214a <HAL_GPIO_WritePin>
}
 80012fa:	e114      	b.n	8001526 <display7SEG_24+0x3a2>
	else if(number == 4){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d12a      	bne.n	8001358 <display7SEG_24+0x1d4>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001308:	486f      	ldr	r0, [pc, #444]	@ (80014c8 <display7SEG_24+0x344>)
 800130a:	f000 ff1e 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001314:	486c      	ldr	r0, [pc, #432]	@ (80014c8 <display7SEG_24+0x344>)
 8001316:	f000 ff18 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001320:	4869      	ldr	r0, [pc, #420]	@ (80014c8 <display7SEG_24+0x344>)
 8001322:	f000 ff12 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800132c:	4866      	ldr	r0, [pc, #408]	@ (80014c8 <display7SEG_24+0x344>)
 800132e:	f000 ff0c 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001338:	4863      	ldr	r0, [pc, #396]	@ (80014c8 <display7SEG_24+0x344>)
 800133a:	f000 ff06 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001344:	4860      	ldr	r0, [pc, #384]	@ (80014c8 <display7SEG_24+0x344>)
 8001346:	f000 ff00 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001350:	485d      	ldr	r0, [pc, #372]	@ (80014c8 <display7SEG_24+0x344>)
 8001352:	f000 fefa 	bl	800214a <HAL_GPIO_WritePin>
}
 8001356:	e0e6      	b.n	8001526 <display7SEG_24+0x3a2>
	else if(number == 5){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d12a      	bne.n	80013b4 <display7SEG_24+0x230>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001364:	4858      	ldr	r0, [pc, #352]	@ (80014c8 <display7SEG_24+0x344>)
 8001366:	f000 fef0 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001370:	4855      	ldr	r0, [pc, #340]	@ (80014c8 <display7SEG_24+0x344>)
 8001372:	f000 feea 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800137c:	4852      	ldr	r0, [pc, #328]	@ (80014c8 <display7SEG_24+0x344>)
 800137e:	f000 fee4 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001388:	484f      	ldr	r0, [pc, #316]	@ (80014c8 <display7SEG_24+0x344>)
 800138a:	f000 fede 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001394:	484c      	ldr	r0, [pc, #304]	@ (80014c8 <display7SEG_24+0x344>)
 8001396:	f000 fed8 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a0:	4849      	ldr	r0, [pc, #292]	@ (80014c8 <display7SEG_24+0x344>)
 80013a2:	f000 fed2 	bl	800214a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ac:	4846      	ldr	r0, [pc, #280]	@ (80014c8 <display7SEG_24+0x344>)
 80013ae:	f000 fecc 	bl	800214a <HAL_GPIO_WritePin>
}
 80013b2:	e0b8      	b.n	8001526 <display7SEG_24+0x3a2>
	else if(number == 6){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d12a      	bne.n	8001410 <display7SEG_24+0x28c>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013c0:	4841      	ldr	r0, [pc, #260]	@ (80014c8 <display7SEG_24+0x344>)
 80013c2:	f000 fec2 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013cc:	483e      	ldr	r0, [pc, #248]	@ (80014c8 <display7SEG_24+0x344>)
 80013ce:	f000 febc 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013d8:	483b      	ldr	r0, [pc, #236]	@ (80014c8 <display7SEG_24+0x344>)
 80013da:	f000 feb6 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013e4:	4838      	ldr	r0, [pc, #224]	@ (80014c8 <display7SEG_24+0x344>)
 80013e6:	f000 feb0 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013f0:	4835      	ldr	r0, [pc, #212]	@ (80014c8 <display7SEG_24+0x344>)
 80013f2:	f000 feaa 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013fc:	4832      	ldr	r0, [pc, #200]	@ (80014c8 <display7SEG_24+0x344>)
 80013fe:	f000 fea4 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001408:	482f      	ldr	r0, [pc, #188]	@ (80014c8 <display7SEG_24+0x344>)
 800140a:	f000 fe9e 	bl	800214a <HAL_GPIO_WritePin>
}
 800140e:	e08a      	b.n	8001526 <display7SEG_24+0x3a2>
	else if(number == 7){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b07      	cmp	r3, #7
 8001414:	d12a      	bne.n	800146c <display7SEG_24+0x2e8>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800141c:	482a      	ldr	r0, [pc, #168]	@ (80014c8 <display7SEG_24+0x344>)
 800141e:	f000 fe94 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001428:	4827      	ldr	r0, [pc, #156]	@ (80014c8 <display7SEG_24+0x344>)
 800142a:	f000 fe8e 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001434:	4824      	ldr	r0, [pc, #144]	@ (80014c8 <display7SEG_24+0x344>)
 8001436:	f000 fe88 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001440:	4821      	ldr	r0, [pc, #132]	@ (80014c8 <display7SEG_24+0x344>)
 8001442:	f000 fe82 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800144c:	481e      	ldr	r0, [pc, #120]	@ (80014c8 <display7SEG_24+0x344>)
 800144e:	f000 fe7c 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001458:	481b      	ldr	r0, [pc, #108]	@ (80014c8 <display7SEG_24+0x344>)
 800145a:	f000 fe76 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001464:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <display7SEG_24+0x344>)
 8001466:	f000 fe70 	bl	800214a <HAL_GPIO_WritePin>
}
 800146a:	e05c      	b.n	8001526 <display7SEG_24+0x3a2>
	else if(number == 8){
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b08      	cmp	r3, #8
 8001470:	d12c      	bne.n	80014cc <display7SEG_24+0x348>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001478:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <display7SEG_24+0x344>)
 800147a:	f000 fe66 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001484:	4810      	ldr	r0, [pc, #64]	@ (80014c8 <display7SEG_24+0x344>)
 8001486:	f000 fe60 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001490:	480d      	ldr	r0, [pc, #52]	@ (80014c8 <display7SEG_24+0x344>)
 8001492:	f000 fe5a 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800149c:	480a      	ldr	r0, [pc, #40]	@ (80014c8 <display7SEG_24+0x344>)
 800149e:	f000 fe54 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014a8:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <display7SEG_24+0x344>)
 80014aa:	f000 fe4e 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b4:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <display7SEG_24+0x344>)
 80014b6:	f000 fe48 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014c0:	4801      	ldr	r0, [pc, #4]	@ (80014c8 <display7SEG_24+0x344>)
 80014c2:	f000 fe42 	bl	800214a <HAL_GPIO_WritePin>
}
 80014c6:	e02e      	b.n	8001526 <display7SEG_24+0x3a2>
 80014c8:	40010800 	.word	0x40010800
	else if(number == 9){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b09      	cmp	r3, #9
 80014d0:	d129      	bne.n	8001526 <display7SEG_24+0x3a2>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d8:	4815      	ldr	r0, [pc, #84]	@ (8001530 <display7SEG_24+0x3ac>)
 80014da:	f000 fe36 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e4:	4812      	ldr	r0, [pc, #72]	@ (8001530 <display7SEG_24+0x3ac>)
 80014e6:	f000 fe30 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014f0:	480f      	ldr	r0, [pc, #60]	@ (8001530 <display7SEG_24+0x3ac>)
 80014f2:	f000 fe2a 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <display7SEG_24+0x3ac>)
 80014fe:	f000 fe24 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001508:	4809      	ldr	r0, [pc, #36]	@ (8001530 <display7SEG_24+0x3ac>)
 800150a:	f000 fe1e 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001514:	4806      	ldr	r0, [pc, #24]	@ (8001530 <display7SEG_24+0x3ac>)
 8001516:	f000 fe18 	bl	800214a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001520:	4803      	ldr	r0, [pc, #12]	@ (8001530 <display7SEG_24+0x3ac>)
 8001522:	f000 fe12 	bl	800214a <HAL_GPIO_WritePin>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40010800 	.word	0x40010800

08001534 <run7Seg>:

void run7Seg(void){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	if(getTimerFlags(SEVENT_SEG_SCAN_TIMER)){
 8001538:	2002      	movs	r0, #2
 800153a:	f000 f9cd 	bl	80018d8 <getTimerFlags>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d015      	beq.n	8001570 <run7Seg+0x3c>
		display7SEG(index_led);
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <run7Seg+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fc45 	bl	8000dd8 <display7SEG>

		index_led++;
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <run7Seg+0x40>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <run7Seg+0x40>)
 8001556:	6013      	str	r3, [r2, #0]
		if(index_led >= MAX_LED){
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <run7Seg+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2204      	movs	r2, #4
 800155e:	4293      	cmp	r3, r2
 8001560:	db02      	blt.n	8001568 <run7Seg+0x34>
			index_led = 0;
 8001562:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <run7Seg+0x40>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
		}

		setTimer(SEVENT_SEG_SCAN_TIMER, DURATION_FOR_SEVENT_SEG_SCAN_LED);
 8001568:	21fa      	movs	r1, #250	@ 0xfa
 800156a:	2002      	movs	r0, #2
 800156c:	f000 f9e4 	bl	8001938 <setTimer>
	}
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000084 	.word	0x20000084

08001578 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001588:	d103      	bne.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800158a:	f7ff fa95 	bl	8000ab8 <button_reading>
		runTimer();
 800158e:	f000 f9f1 	bl	8001974 <runTimer>
		/*Just for debug
		HAL_GPIO_TogglePin(CHECK_GPIO_Port, CHECK_Pin);*/
	}
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f000 fad0 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a4:	f000 f816 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a8:	f000 f89c 	bl	80016e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015ac:	f000 f84e 	bl	800164c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setEnviromentStateInit();
 80015b0:	f7fe fe66 	bl	8000280 <setEnviromentStateInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <main+0x34>)
 80015b6:	f001 fa27 	bl	8002a08 <HAL_TIM_Base_Start_IT>
	//display7SEG_24(buttonState[0]);
//	if(is_button_pressed(0)){
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	}

	fsm_for_input_processing();
 80015ba:	f7ff f9e3 	bl	8000984 <fsm_for_input_processing>
	runFSM();
 80015be:	f7ff f931 	bl	8000824 <runFSM>
	run7Seg();
 80015c2:	f7ff ffb7 	bl	8001534 <run7Seg>
	runBlinkingLed();
 80015c6:	f7fe fdc1 	bl	800014c <runBlinkingLed>
	fsm_for_input_processing();
 80015ca:	bf00      	nop
 80015cc:	e7f5      	b.n	80015ba <main+0x1e>
 80015ce:	bf00      	nop
 80015d0:	20000088 	.word	0x20000088

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b090      	sub	sp, #64	@ 0x40
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	2228      	movs	r2, #40	@ 0x28
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fd9c 	bl	8003120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fa:	2301      	movs	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fe:	2310      	movs	r3, #16
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fdce 	bl	80021ac <HAL_RCC_OscConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001616:	f000 f8c7 	bl	80017a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f001 f83c 	bl	80026b0 <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800163e:	f000 f8b3 	bl	80017a8 <Error_Handler>
  }
}
 8001642:	bf00      	nop
 8001644:	3740      	adds	r7, #64	@ 0x40
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001668:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <MX_TIM2_Init+0x94>)
 800166a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800166e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <MX_TIM2_Init+0x94>)
 8001672:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <MX_TIM2_Init+0x94>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800167e:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <MX_TIM2_Init+0x94>)
 8001680:	2209      	movs	r2, #9
 8001682:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <MX_TIM2_Init+0x94>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <MX_TIM2_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001690:	4813      	ldr	r0, [pc, #76]	@ (80016e0 <MX_TIM2_Init+0x94>)
 8001692:	f001 f969 	bl	8002968 <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800169c:	f000 f884 	bl	80017a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <MX_TIM2_Init+0x94>)
 80016ae:	f001 fae7 	bl	8002c80 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016b8:	f000 f876 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_TIM2_Init+0x94>)
 80016ca:	f001 fcbf 	bl	800304c <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016d4:	f000 f868 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000088 	.word	0x20000088

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b28      	ldr	r3, [pc, #160]	@ (800179c <MX_GPIO_Init+0xb8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a27      	ldr	r2, [pc, #156]	@ (800179c <MX_GPIO_Init+0xb8>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b25      	ldr	r3, [pc, #148]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a21      	ldr	r2, [pc, #132]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_GPIO_Init+0xb8>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8001728:	2200      	movs	r2, #0
 800172a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800172e:	481c      	ldr	r0, [pc, #112]	@ (80017a0 <MX_GPIO_Init+0xbc>)
 8001730:	f000 fd0b 	bl	800214a <HAL_GPIO_WritePin>
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|LED_Pin
                          |SEG24_A_Pin|SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin
                          |SEG24_E_Pin|SEG24_F_Pin|SEG24_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001734:	2200      	movs	r2, #0
 8001736:	f24f 11f8 	movw	r1, #61944	@ 0xf1f8
 800173a:	481a      	ldr	r0, [pc, #104]	@ (80017a4 <MX_GPIO_Init+0xc0>)
 800173c:	f000 fd05 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG13_A_Pin SEG13_B_Pin SEG13_C_Pin SEG13_D_Pin
                           SEG13_E_Pin SEG13_F_Pin SEG13_G_Pin LED_Pin
                           SEG24_A_Pin SEG24_B_Pin SEG24_C_Pin SEG24_D_Pin
                           SEG24_E_Pin SEG24_F_Pin SEG24_G_Pin */
  GPIO_InitStruct.Pin = SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8001740:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001744:	60bb      	str	r3, [r7, #8]
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|LED_Pin
                          |SEG24_A_Pin|SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin
                          |SEG24_E_Pin|SEG24_F_Pin|SEG24_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4619      	mov	r1, r3
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <MX_GPIO_Init+0xbc>)
 800175a:	f000 fb63 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 800175e:	2307      	movs	r3, #7
 8001760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <MX_GPIO_Init+0xc0>)
 8001772:	f000 fb57 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED13_RED_Pin LED13_YELLOW_Pin LED13_GREEN_Pin LED24_RED_Pin
                           LED24_YELLOW_Pin LED24_GREEN_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001776:	f24f 13f8 	movw	r3, #61944	@ 0xf1f8
 800177a:	60bb      	str	r3, [r7, #8]
                          |LED13_RED_Pin|LED13_YELLOW_Pin|LED13_GREEN_Pin|LED24_RED_Pin
                          |LED24_YELLOW_Pin|LED24_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2302      	movs	r3, #2
 8001786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_GPIO_Init+0xc0>)
 8001790:	f000 fb48 	bl	8001e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <Error_Handler+0x8>

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <HAL_MspInit+0x5c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a14      	ldr	r2, [pc, #80]	@ (8001810 <HAL_MspInit+0x5c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_MspInit+0x5c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <HAL_MspInit+0x5c>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <HAL_MspInit+0x5c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_MspInit+0x5c>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <HAL_MspInit+0x60>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_MspInit+0x60>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000

08001818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001828:	d113      	bne.n	8001852 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_TIM_Base_MspInit+0x44>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <HAL_TIM_Base_MspInit+0x44>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_TIM_Base_MspInit+0x44>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	201c      	movs	r0, #28
 8001848:	f000 fab5 	bl	8001db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184c:	201c      	movs	r0, #28
 800184e:	f000 face 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <NMI_Handler+0x4>

08001868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <MemManage_Handler+0x4>

08001878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <UsageFault_Handler+0x4>

08001888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 f98e 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <TIM2_IRQHandler+0x10>)
 80018be:	f001 f8ef 	bl	8002aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000088 	.word	0x20000088

080018cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <getTimerFlags>:
	//__HAL_TIM_SET_PRESCALER(&htim2,PRESCALER);
	__HAL_TIM_SET_COUNTER(&htim2,COUNTER);
	TIMER_CYCLE = cycle;
}*/

int getTimerFlags(int index){
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	return Timer_Flag[index];
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <getTimerFlags+0x1c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200000e8 	.word	0x200000e8

080018f8 <ignoreTimer>:

void ignoreTimer(int index){
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	Timer_Ignore[index] = 1;
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <ignoreTimer+0x1c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2101      	movs	r1, #1
 8001906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	200000d0 	.word	0x200000d0

08001918 <activeTimer>:

void activeTimer(int index){
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	Timer_Ignore[index] = 0;
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <activeTimer+0x1c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2100      	movs	r1, #0
 8001926:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	200000d0 	.word	0x200000d0

08001938 <setTimer>:

void setTimer(int index, int duration){
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
	Timer_Counter[index] = duration/TIMER_CYCLE;
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <setTimer+0x30>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	fb92 f2f3 	sdiv	r2, r2, r3
 800194c:	4907      	ldr	r1, [pc, #28]	@ (800196c <setTimer+0x34>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Timer_Flag[index] = 0;
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <setTimer+0x38>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2100      	movs	r1, #0
 800195a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	2000003c 	.word	0x2000003c
 800196c:	20000100 	.word	0x20000100
 8001970:	200000e8 	.word	0x200000e8

08001974 <runTimer>:

void runTimer(void){
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_TIMER;i++){
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	e01e      	b.n	80019be <runTimer+0x4a>
		if(Timer_Ignore[i]){
 8001980:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <runTimer+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d114      	bne.n	80019b6 <runTimer+0x42>
			continue;
		}

		Timer_Counter[i]--;
 800198c:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <runTimer+0x60>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	1e5a      	subs	r2, r3, #1
 8001996:	490f      	ldr	r1, [pc, #60]	@ (80019d4 <runTimer+0x60>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(Timer_Counter[i] <= 0){
 800199e:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <runTimer+0x60>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dc06      	bgt.n	80019b8 <runTimer+0x44>
			Timer_Flag[i] = 1;
 80019aa:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <runTimer+0x64>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2101      	movs	r1, #1
 80019b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80019b4:	e000      	b.n	80019b8 <runTimer+0x44>
			continue;
 80019b6:	bf00      	nop
	for(int i=0;i<MAX_TIMER;i++){
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	dddd      	ble.n	8001980 <runTimer+0xc>
		}
	}
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	200000d0 	.word	0x200000d0
 80019d4:	20000100 	.word	0x20000100
 80019d8:	200000e8 	.word	0x200000e8

080019dc <clearAllTraffic>:
 *      Author: ADMINS
 */

#include "Traffic.h"

void clearAllTraffic(void){
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2108      	movs	r1, #8
 80019e4:	480f      	ldr	r0, [pc, #60]	@ (8001a24 <clearAllTraffic+0x48>)
 80019e6:	f000 fbb0 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2110      	movs	r1, #16
 80019ee:	480d      	ldr	r0, [pc, #52]	@ (8001a24 <clearAllTraffic+0x48>)
 80019f0:	f000 fbab 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2120      	movs	r1, #32
 80019f8:	480a      	ldr	r0, [pc, #40]	@ (8001a24 <clearAllTraffic+0x48>)
 80019fa:	f000 fba6 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2140      	movs	r1, #64	@ 0x40
 8001a02:	4808      	ldr	r0, [pc, #32]	@ (8001a24 <clearAllTraffic+0x48>)
 8001a04:	f000 fba1 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <clearAllTraffic+0x48>)
 8001a0e:	f000 fb9c 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <clearAllTraffic+0x48>)
 8001a1a:	f000 fb96 	bl	800214a <HAL_GPIO_WritePin>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40010c00 	.word	0x40010c00

08001a28 <doRedGreen_Traffic>:

void doRedGreen_Traffic(void){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2108      	movs	r1, #8
 8001a30:	480f      	ldr	r0, [pc, #60]	@ (8001a70 <doRedGreen_Traffic+0x48>)
 8001a32:	f000 fb8a 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <doRedGreen_Traffic+0x48>)
 8001a3e:	f000 fb84 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2120      	movs	r1, #32
 8001a46:	480a      	ldr	r0, [pc, #40]	@ (8001a70 <doRedGreen_Traffic+0x48>)
 8001a48:	f000 fb7f 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2110      	movs	r1, #16
 8001a50:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <doRedGreen_Traffic+0x48>)
 8001a52:	f000 fb7a 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2140      	movs	r1, #64	@ 0x40
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <doRedGreen_Traffic+0x48>)
 8001a5c:	f000 fb75 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2180      	movs	r1, #128	@ 0x80
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <doRedGreen_Traffic+0x48>)
 8001a66:	f000 fb70 	bl	800214a <HAL_GPIO_WritePin>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40010c00 	.word	0x40010c00

08001a74 <doRedYellow_Traffic>:

void doRedYellow_Traffic(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a7e:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <doRedYellow_Traffic+0x20>)
 8001a80:	f000 fb63 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2180      	movs	r1, #128	@ 0x80
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <doRedYellow_Traffic+0x20>)
 8001a8a:	f000 fb5e 	bl	800214a <HAL_GPIO_WritePin>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40010c00 	.word	0x40010c00

08001a98 <doGreenRed_Traffic>:

void doGreenRed_Traffic(void){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2108      	movs	r1, #8
 8001aa0:	4809      	ldr	r0, [pc, #36]	@ (8001ac8 <doGreenRed_Traffic+0x30>)
 8001aa2:	f000 fb52 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	4807      	ldr	r0, [pc, #28]	@ (8001ac8 <doGreenRed_Traffic+0x30>)
 8001aac:	f000 fb4d 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2140      	movs	r1, #64	@ 0x40
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <doGreenRed_Traffic+0x30>)
 8001ab6:	f000 fb48 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	2120      	movs	r1, #32
 8001abe:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <doGreenRed_Traffic+0x30>)
 8001ac0:	f000 fb43 	bl	800214a <HAL_GPIO_WritePin>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40010c00 	.word	0x40010c00

08001acc <doYellowRed_Traffic>:

void doYellowRed_Traffic(void){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	4807      	ldr	r0, [pc, #28]	@ (8001af4 <doYellowRed_Traffic+0x28>)
 8001ad6:	f000 fb38 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2110      	movs	r1, #16
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <doYellowRed_Traffic+0x28>)
 8001ae0:	f000 fb33 	bl	800214a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2140      	movs	r1, #64	@ 0x40
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <doYellowRed_Traffic+0x28>)
 8001aea:	f000 fb2e 	bl	800214a <HAL_GPIO_WritePin>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40010c00 	.word	0x40010c00

08001af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af8:	f7ff fee8 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001afc:	480b      	ldr	r0, [pc, #44]	@ (8001b2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001afe:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b00:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b14:	4c09      	ldr	r4, [pc, #36]	@ (8001b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b22:	f001 fb05 	bl	8003130 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b26:	f7ff fd39 	bl	800159c <main>
  bx lr
 8001b2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001b34:	080031bc 	.word	0x080031bc
  ldr r2, =_sbss
 8001b38:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001b3c:	2000011c 	.word	0x2000011c

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <HAL_Init+0x28>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_Init+0x28>)
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f923 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	200f      	movs	r0, #15
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fe28 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f93b 	bl	8001e0a <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f000 f903 	bl	8001db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000038 	.word	0x20000038
 8001bc8:	20000044 	.word	0x20000044
 8001bcc:	20000040 	.word	0x20000040

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <HAL_IncTick+0x20>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a03      	ldr	r2, [pc, #12]	@ (8001bf0 <HAL_IncTick+0x20>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000044 	.word	0x20000044
 8001bf0:	20000118 	.word	0x20000118

08001bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	@ (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000118 	.word	0x20000118

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4906      	ldr	r1, [pc, #24]	@ (8001ca0 <__NVIC_EnableIRQ+0x34>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	@ (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	@ (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d6c:	d301      	bcc.n	8001d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00f      	b.n	8001d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d72:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <SysTick_Config+0x40>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f7ff ff90 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <SysTick_Config+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <SysTick_Config+0x40>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff2d 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff42 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff90 	bl	8001cf8 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5f 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff35 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffa2 	bl	8001d5c <SysTick_Config>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b08b      	sub	sp, #44	@ 0x2c
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	e161      	b.n	80020fc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8150 	bne.w	80020f6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4a97      	ldr	r2, [pc, #604]	@ (80020b8 <HAL_GPIO_Init+0x294>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d05e      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e60:	4a95      	ldr	r2, [pc, #596]	@ (80020b8 <HAL_GPIO_Init+0x294>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d875      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e66:	4a95      	ldr	r2, [pc, #596]	@ (80020bc <HAL_GPIO_Init+0x298>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d058      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e6c:	4a93      	ldr	r2, [pc, #588]	@ (80020bc <HAL_GPIO_Init+0x298>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d86f      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e72:	4a93      	ldr	r2, [pc, #588]	@ (80020c0 <HAL_GPIO_Init+0x29c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d052      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e78:	4a91      	ldr	r2, [pc, #580]	@ (80020c0 <HAL_GPIO_Init+0x29c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d869      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e7e:	4a91      	ldr	r2, [pc, #580]	@ (80020c4 <HAL_GPIO_Init+0x2a0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d04c      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e84:	4a8f      	ldr	r2, [pc, #572]	@ (80020c4 <HAL_GPIO_Init+0x2a0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d863      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e8a:	4a8f      	ldr	r2, [pc, #572]	@ (80020c8 <HAL_GPIO_Init+0x2a4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d046      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e90:	4a8d      	ldr	r2, [pc, #564]	@ (80020c8 <HAL_GPIO_Init+0x2a4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d85d      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e96:	2b12      	cmp	r3, #18
 8001e98:	d82a      	bhi.n	8001ef0 <HAL_GPIO_Init+0xcc>
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d859      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea4 <HAL_GPIO_Init+0x80>)
 8001ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001ef9 	.word	0x08001ef9
 8001eac:	08001f0b 	.word	0x08001f0b
 8001eb0:	08001f4d 	.word	0x08001f4d
 8001eb4:	08001f53 	.word	0x08001f53
 8001eb8:	08001f53 	.word	0x08001f53
 8001ebc:	08001f53 	.word	0x08001f53
 8001ec0:	08001f53 	.word	0x08001f53
 8001ec4:	08001f53 	.word	0x08001f53
 8001ec8:	08001f53 	.word	0x08001f53
 8001ecc:	08001f53 	.word	0x08001f53
 8001ed0:	08001f53 	.word	0x08001f53
 8001ed4:	08001f53 	.word	0x08001f53
 8001ed8:	08001f53 	.word	0x08001f53
 8001edc:	08001f53 	.word	0x08001f53
 8001ee0:	08001f53 	.word	0x08001f53
 8001ee4:	08001f53 	.word	0x08001f53
 8001ee8:	08001f01 	.word	0x08001f01
 8001eec:	08001f15 	.word	0x08001f15
 8001ef0:	4a76      	ldr	r2, [pc, #472]	@ (80020cc <HAL_GPIO_Init+0x2a8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ef6:	e02c      	b.n	8001f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	623b      	str	r3, [r7, #32]
          break;
 8001efe:	e029      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	3304      	adds	r3, #4
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e024      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	3308      	adds	r3, #8
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e01f      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	330c      	adds	r3, #12
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e01a      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d102      	bne.n	8001f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f26:	2304      	movs	r3, #4
 8001f28:	623b      	str	r3, [r7, #32]
          break;
 8001f2a:	e013      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f34:	2308      	movs	r3, #8
 8001f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	611a      	str	r2, [r3, #16]
          break;
 8001f3e:	e009      	b.n	8001f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f40:	2308      	movs	r3, #8
 8001f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	615a      	str	r2, [r3, #20]
          break;
 8001f4a:	e003      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
          break;
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          break;
 8001f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	@ 0xff
 8001f58:	d801      	bhi.n	8001f5e <HAL_GPIO_Init+0x13a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	e001      	b.n	8001f62 <HAL_GPIO_Init+0x13e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2bff      	cmp	r3, #255	@ 0xff
 8001f68:	d802      	bhi.n	8001f70 <HAL_GPIO_Init+0x14c>
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	e002      	b.n	8001f76 <HAL_GPIO_Init+0x152>
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	3b08      	subs	r3, #8
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	210f      	movs	r1, #15
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	6a39      	ldr	r1, [r7, #32]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	431a      	orrs	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80a9 	beq.w	80020f6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80020d0 <HAL_GPIO_Init+0x2ac>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a49      	ldr	r2, [pc, #292]	@ (80020d0 <HAL_GPIO_Init+0x2ac>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b47      	ldr	r3, [pc, #284]	@ (80020d0 <HAL_GPIO_Init+0x2ac>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fbc:	4a45      	ldr	r2, [pc, #276]	@ (80020d4 <HAL_GPIO_Init+0x2b0>)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80020d8 <HAL_GPIO_Init+0x2b4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00d      	beq.n	8002004 <HAL_GPIO_Init+0x1e0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3c      	ldr	r2, [pc, #240]	@ (80020dc <HAL_GPIO_Init+0x2b8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <HAL_GPIO_Init+0x1dc>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3b      	ldr	r2, [pc, #236]	@ (80020e0 <HAL_GPIO_Init+0x2bc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_GPIO_Init+0x1d8>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e004      	b.n	8002006 <HAL_GPIO_Init+0x1e2>
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x1e2>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_GPIO_Init+0x1e2>
 8002004:	2300      	movs	r3, #0
 8002006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002008:	f002 0203 	and.w	r2, r2, #3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4093      	lsls	r3, r2
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002016:	492f      	ldr	r1, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x2b0>)
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002030:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	492b      	ldr	r1, [pc, #172]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203e:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	4927      	ldr	r1, [pc, #156]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002048:	4013      	ands	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002058:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4921      	ldr	r1, [pc, #132]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002066:	4b1f      	ldr	r3, [pc, #124]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	491d      	ldr	r1, [pc, #116]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002070:	4013      	ands	r3, r2
 8002072:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002080:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4917      	ldr	r1, [pc, #92]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	4913      	ldr	r1, [pc, #76]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 8002098:	4013      	ands	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01f      	beq.n	80020e8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	490d      	ldr	r1, [pc, #52]	@ (80020e4 <HAL_GPIO_Init+0x2c0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
 80020b4:	e01f      	b.n	80020f6 <HAL_GPIO_Init+0x2d2>
 80020b6:	bf00      	nop
 80020b8:	10320000 	.word	0x10320000
 80020bc:	10310000 	.word	0x10310000
 80020c0:	10220000 	.word	0x10220000
 80020c4:	10210000 	.word	0x10210000
 80020c8:	10120000 	.word	0x10120000
 80020cc:	10110000 	.word	0x10110000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40010800 	.word	0x40010800
 80020dc:	40010c00 	.word	0x40010c00
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_GPIO_Init+0x2f4>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4909      	ldr	r1, [pc, #36]	@ (8002118 <HAL_GPIO_Init+0x2f4>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f47f ae96 	bne.w	8001e38 <HAL_GPIO_Init+0x14>
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	372c      	adds	r7, #44	@ 0x2c
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	807b      	strh	r3, [r7, #2]
 8002156:	4613      	mov	r3, r2
 8002158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215a:	787b      	ldrb	r3, [r7, #1]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002166:	e003      	b.n	8002170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	041a      	lsls	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800218c:	887a      	ldrh	r2, [r7, #2]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4013      	ands	r3, r2
 8002192:	041a      	lsls	r2, r3, #16
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43d9      	mvns	r1, r3
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	400b      	ands	r3, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e272      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8087 	beq.w	80022da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021cc:	4b92      	ldr	r3, [pc, #584]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d00c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d112      	bne.n	800220a <HAL_RCC_OscConfig+0x5e>
 80021e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f0:	d10b      	bne.n	800220a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f2:	4b89      	ldr	r3, [pc, #548]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d06c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x12c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d168      	bne.n	80022d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e24c      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x76>
 8002214:	4b80      	ldr	r3, [pc, #512]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a7f      	ldr	r2, [pc, #508]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e02e      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x98>
 800222a:	4b7b      	ldr	r3, [pc, #492]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7a      	ldr	r2, [pc, #488]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b78      	ldr	r3, [pc, #480]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a77      	ldr	r2, [pc, #476]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0xbc>
 800224e:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a71      	ldr	r2, [pc, #452]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6e      	ldr	r2, [pc, #440]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002268:	4b6b      	ldr	r3, [pc, #428]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6a      	ldr	r2, [pc, #424]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b68      	ldr	r3, [pc, #416]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a67      	ldr	r2, [pc, #412]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fcb4 	bl	8001bf4 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fcb0 	bl	8001bf4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	@ 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e200      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xe4>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fca0 	bl	8001bf4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff fc9c 	bl	8001bf4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	@ 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1ec      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x10c>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d063      	beq.n	80023ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022f2:	4b49      	ldr	r3, [pc, #292]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d11c      	bne.n	8002338 <HAL_RCC_OscConfig+0x18c>
 80022fe:	4b46      	ldr	r3, [pc, #280]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	4b43      	ldr	r3, [pc, #268]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e1c0      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b3d      	ldr	r3, [pc, #244]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4939      	ldr	r1, [pc, #228]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	e03a      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff fc55 	bl	8001bf4 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234e:	f7ff fc51 	bl	8001bf4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1a1      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4927      	ldr	r1, [pc, #156]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e015      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b26      	ldr	r3, [pc, #152]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fc34 	bl	8001bf4 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002390:	f7ff fc30 	bl	8001bf4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e180      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d03a      	beq.n	8002430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d019      	beq.n	80023f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x274>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7ff fc14 	bl	8001bf4 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff fc10 	bl	8001bf4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e160      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 fa9c 	bl	800292c <RCC_Delay>
 80023f4:	e01c      	b.n	8002430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_RCC_OscConfig+0x274>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7ff fbfa 	bl	8001bf4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002402:	e00f      	b.n	8002424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff fbf6 	bl	8001bf4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d908      	bls.n	8002424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e146      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	42420000 	.word	0x42420000
 8002420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b92      	ldr	r3, [pc, #584]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e9      	bne.n	8002404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a6 	beq.w	800258a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b8b      	ldr	r3, [pc, #556]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a87      	ldr	r2, [pc, #540]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b85      	ldr	r3, [pc, #532]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b82      	ldr	r3, [pc, #520]	@ (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b7f      	ldr	r3, [pc, #508]	@ (8002674 <HAL_RCC_OscConfig+0x4c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7e      	ldr	r2, [pc, #504]	@ (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7ff fbb7 	bl	8001bf4 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7ff fbb3 	bl	8001bf4 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	@ 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e103      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b75      	ldr	r3, [pc, #468]	@ (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x312>
 80024b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6213      	str	r3, [r2, #32]
 80024bc:	e02d      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x334>
 80024c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a69      	ldr	r2, [pc, #420]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b67      	ldr	r3, [pc, #412]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a66      	ldr	r2, [pc, #408]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	e01c      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x356>
 80024e8:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a60      	ldr	r2, [pc, #384]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 8002502:	4b5b      	ldr	r3, [pc, #364]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a5a      	ldr	r2, [pc, #360]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6213      	str	r3, [r2, #32]
 800250e:	4b58      	ldr	r3, [pc, #352]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a57      	ldr	r2, [pc, #348]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d015      	beq.n	800254e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff fb67 	bl	8001bf4 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7ff fb63 	bl	8001bf4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0b1      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	4b4b      	ldr	r3, [pc, #300]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ee      	beq.n	800252a <HAL_RCC_OscConfig+0x37e>
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff fb51 	bl	8001bf4 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7ff fb4d 	bl	8001bf4 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e09b      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	4b40      	ldr	r3, [pc, #256]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ee      	bne.n	8002556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4b3c      	ldr	r3, [pc, #240]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a3b      	ldr	r2, [pc, #236]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8087 	beq.w	80026a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002594:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d061      	beq.n	8002664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d146      	bne.n	8002636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a8:	4b33      	ldr	r3, [pc, #204]	@ (8002678 <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff fb21 	bl	8001bf4 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff fb1d 	bl	8001bf4 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e06d      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025de:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4921      	ldr	r1, [pc, #132]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a19      	ldr	r1, [r3, #32]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	430b      	orrs	r3, r1
 8002602:	491b      	ldr	r1, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_RCC_OscConfig+0x4cc>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff faf1 	bl	8001bf4 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7ff faed 	bl	8001bf4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e03d      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x46a>
 8002634:	e035      	b.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_RCC_OscConfig+0x4cc>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fada 	bl	8001bf4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff fad6 	bl	8001bf4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e026      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x498>
 8002662:	e01e      	b.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e019      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
 8002678:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_RCC_OscConfig+0x500>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0d0      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d910      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b67      	ldr	r3, [pc, #412]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4965      	ldr	r1, [pc, #404]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b63      	ldr	r3, [pc, #396]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0b8      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800270c:	4b59      	ldr	r3, [pc, #356]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a58      	ldr	r2, [pc, #352]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002724:	4b53      	ldr	r3, [pc, #332]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a52      	ldr	r2, [pc, #328]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800272e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b50      	ldr	r3, [pc, #320]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	494d      	ldr	r1, [pc, #308]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d040      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d115      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e073      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	4b3d      	ldr	r3, [pc, #244]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e06b      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b39      	ldr	r3, [pc, #228]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4936      	ldr	r1, [pc, #216]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7ff fa28 	bl	8001bf4 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7ff fa24 	bl	8001bf4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e053      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d210      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0207 	bic.w	r2, r3, #7
 80027e6:	4922      	ldr	r1, [pc, #136]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e032      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4916      	ldr	r1, [pc, #88]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282a:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	490e      	ldr	r1, [pc, #56]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800283e:	f000 f821 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002842:	4602      	mov	r2, r0
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	490a      	ldr	r1, [pc, #40]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	5ccb      	ldrb	r3, [r1, r3]
 8002852:	fa22 f303 	lsr.w	r3, r2, r3
 8002856:	4a09      	ldr	r2, [pc, #36]	@ (800287c <HAL_RCC_ClockConfig+0x1cc>)
 8002858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <HAL_RCC_ClockConfig+0x1d0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f986 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000
 8002874:	40021000 	.word	0x40021000
 8002878:	08003190 	.word	0x08003190
 800287c:	20000038 	.word	0x20000038
 8002880:	20000040 	.word	0x20000040

08002884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d002      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x30>
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x36>
 80028b2:	e027      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_RCC_GetSysClockFreq+0x98>)
 80028b6:	613b      	str	r3, [r7, #16]
      break;
 80028b8:	e027      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0c9b      	lsrs	r3, r3, #18
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028c4:	5cd3      	ldrb	r3, [r2, r3]
 80028c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d010      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028d2:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x94>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	0c5b      	lsrs	r3, r3, #17
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a0d      	ldr	r2, [pc, #52]	@ (800291c <HAL_RCC_GetSysClockFreq+0x98>)
 80028e6:	fb03 f202 	mul.w	r2, r3, r2
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e004      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002928 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	613b      	str	r3, [r7, #16]
      break;
 8002902:	e002      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_RCC_GetSysClockFreq+0x98>)
 8002906:	613b      	str	r3, [r7, #16]
      break;
 8002908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290a:	693b      	ldr	r3, [r7, #16]
}
 800290c:	4618      	mov	r0, r3
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	007a1200 	.word	0x007a1200
 8002920:	080031a0 	.word	0x080031a0
 8002924:	080031b0 	.word	0x080031b0
 8002928:	003d0900 	.word	0x003d0900

0800292c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002934:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <RCC_Delay+0x34>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <RCC_Delay+0x38>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a5b      	lsrs	r3, r3, #9
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002948:	bf00      	nop
  }
  while (Delay --);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	60fa      	str	r2, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <RCC_Delay+0x1c>
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000038 	.word	0x20000038
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe ff42 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 fa56 	bl	8002e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d001      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e035      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <HAL_TIM_Base_Start_IT+0x90>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_TIM_Base_Start_IT+0x4e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4a:	d004      	beq.n	8002a56 <HAL_TIM_Base_Start_IT+0x4e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <HAL_TIM_Base_Start_IT+0x94>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d111      	bne.n	8002a7a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b06      	cmp	r3, #6
 8002a66:	d010      	beq.n	8002a8a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a78:	e007      	b.n	8002a8a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400

08002aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0202 	mvn.w	r2, #2
 8002ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f998 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f98b 	bl	8002e0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f99a 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d020      	beq.n	8002b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01b      	beq.n	8002b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0204 	mvn.w	r2, #4
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f972 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f965 	bl	8002e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f974 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d020      	beq.n	8002b9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01b      	beq.n	8002b9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0208 	mvn.w	r2, #8
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f94c 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f93f 	bl	8002e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f94e 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d020      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0210 	mvn.w	r2, #16
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f926 	bl	8002e20 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f919 	bl	8002e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f928 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0201 	mvn.w	r2, #1
 8002c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fe fcb6 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00c      	beq.n	8002c30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa6f 	bl	800310e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00c      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8f8 	bl	8002e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0220 	mvn.w	r2, #32
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa42 	bl	80030fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_TIM_ConfigClockSource+0x1c>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e0b4      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x186>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd4:	d03e      	beq.n	8002d54 <HAL_TIM_ConfigClockSource+0xd4>
 8002cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cda:	f200 8087 	bhi.w	8002dec <HAL_TIM_ConfigClockSource+0x16c>
 8002cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce2:	f000 8086 	beq.w	8002df2 <HAL_TIM_ConfigClockSource+0x172>
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cea:	d87f      	bhi.n	8002dec <HAL_TIM_ConfigClockSource+0x16c>
 8002cec:	2b70      	cmp	r3, #112	@ 0x70
 8002cee:	d01a      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0xa6>
 8002cf0:	2b70      	cmp	r3, #112	@ 0x70
 8002cf2:	d87b      	bhi.n	8002dec <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b60      	cmp	r3, #96	@ 0x60
 8002cf6:	d050      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x11a>
 8002cf8:	2b60      	cmp	r3, #96	@ 0x60
 8002cfa:	d877      	bhi.n	8002dec <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b50      	cmp	r3, #80	@ 0x50
 8002cfe:	d03c      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0xfa>
 8002d00:	2b50      	cmp	r3, #80	@ 0x50
 8002d02:	d873      	bhi.n	8002dec <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b40      	cmp	r3, #64	@ 0x40
 8002d06:	d058      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x13a>
 8002d08:	2b40      	cmp	r3, #64	@ 0x40
 8002d0a:	d86f      	bhi.n	8002dec <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b30      	cmp	r3, #48	@ 0x30
 8002d0e:	d064      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x15a>
 8002d10:	2b30      	cmp	r3, #48	@ 0x30
 8002d12:	d86b      	bhi.n	8002dec <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d060      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x15a>
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d867      	bhi.n	8002dec <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d05c      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x15a>
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d05a      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x15a>
 8002d24:	e062      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d36:	f000 f96a 	bl	800300e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	609a      	str	r2, [r3, #8]
      break;
 8002d52:	e04f      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d64:	f000 f953 	bl	800300e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d76:	609a      	str	r2, [r3, #8]
      break;
 8002d78:	e03c      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d86:	461a      	mov	r2, r3
 8002d88:	f000 f8ca 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2150      	movs	r1, #80	@ 0x50
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f921 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002d98:	e02c      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002da6:	461a      	mov	r2, r3
 8002da8:	f000 f8e8 	bl	8002f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2160      	movs	r1, #96	@ 0x60
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f911 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002db8:	e01c      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f000 f8aa 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2140      	movs	r1, #64	@ 0x40
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f901 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002dd8:	e00c      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4610      	mov	r0, r2
 8002de6:	f000 f8f8 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 8002dea:	e003      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      break;
 8002df0:	e000      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
	...

08002e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f18 <TIM_Base_SetConfig+0xc0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <TIM_Base_SetConfig+0x28>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e76:	d003      	beq.n	8002e80 <TIM_Base_SetConfig+0x28>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a28      	ldr	r2, [pc, #160]	@ (8002f1c <TIM_Base_SetConfig+0xc4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a20      	ldr	r2, [pc, #128]	@ (8002f18 <TIM_Base_SetConfig+0xc0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <TIM_Base_SetConfig+0x52>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea0:	d003      	beq.n	8002eaa <TIM_Base_SetConfig+0x52>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f1c <TIM_Base_SetConfig+0xc4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8002f18 <TIM_Base_SetConfig+0xc0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d103      	bne.n	8002ef0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f023 0201 	bic.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40000400 	.word	0x40000400

08002f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0201 	bic.w	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 030a 	bic.w	r3, r3, #10
 8002f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f023 0210 	bic.w	r2, r3, #16
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	031b      	lsls	r3, r3, #12
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f043 0307 	orr.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	609a      	str	r2, [r3, #8]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003060:	2302      	movs	r3, #2
 8003062:	e041      	b.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b0:	d004      	beq.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a10      	ldr	r2, [pc, #64]	@ (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10c      	bne.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40000400 	.word	0x40000400

080030fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <memset>:
 8003120:	4603      	mov	r3, r0
 8003122:	4402      	add	r2, r0
 8003124:	4293      	cmp	r3, r2
 8003126:	d100      	bne.n	800312a <memset+0xa>
 8003128:	4770      	bx	lr
 800312a:	f803 1b01 	strb.w	r1, [r3], #1
 800312e:	e7f9      	b.n	8003124 <memset+0x4>

08003130 <__libc_init_array>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	2600      	movs	r6, #0
 8003134:	4d0c      	ldr	r5, [pc, #48]	@ (8003168 <__libc_init_array+0x38>)
 8003136:	4c0d      	ldr	r4, [pc, #52]	@ (800316c <__libc_init_array+0x3c>)
 8003138:	1b64      	subs	r4, r4, r5
 800313a:	10a4      	asrs	r4, r4, #2
 800313c:	42a6      	cmp	r6, r4
 800313e:	d109      	bne.n	8003154 <__libc_init_array+0x24>
 8003140:	f000 f81a 	bl	8003178 <_init>
 8003144:	2600      	movs	r6, #0
 8003146:	4d0a      	ldr	r5, [pc, #40]	@ (8003170 <__libc_init_array+0x40>)
 8003148:	4c0a      	ldr	r4, [pc, #40]	@ (8003174 <__libc_init_array+0x44>)
 800314a:	1b64      	subs	r4, r4, r5
 800314c:	10a4      	asrs	r4, r4, #2
 800314e:	42a6      	cmp	r6, r4
 8003150:	d105      	bne.n	800315e <__libc_init_array+0x2e>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	f855 3b04 	ldr.w	r3, [r5], #4
 8003158:	4798      	blx	r3
 800315a:	3601      	adds	r6, #1
 800315c:	e7ee      	b.n	800313c <__libc_init_array+0xc>
 800315e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003162:	4798      	blx	r3
 8003164:	3601      	adds	r6, #1
 8003166:	e7f2      	b.n	800314e <__libc_init_array+0x1e>
 8003168:	080031b4 	.word	0x080031b4
 800316c:	080031b4 	.word	0x080031b4
 8003170:	080031b4 	.word	0x080031b4
 8003174:	080031b8 	.word	0x080031b8

08003178 <_init>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr

08003184 <_fini>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr
