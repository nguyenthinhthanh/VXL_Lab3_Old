
Lab3_Old.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b4c  08002b4c  00003b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b70  08002b70  00004020  2**0
                  CONTENTS
  4 .ARM          00000000  08002b70  08002b70  00004020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b70  08002b70  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00003b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b74  08002b74  00003b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08002b78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000020  08002b98  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002b98  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087f4  00000000  00000000  00004049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d07  00000000  00000000  0000c83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0000e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083f  00000000  00000000  0000f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001719e  00000000  00000000  0000f867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d10b  00000000  00000000  00026a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a59  00000000  00000000  00033b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a6c  00000000  00000000  000b65ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b9018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b34 	.word	0x08002b34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002b34 	.word	0x08002b34

0800014c <runBlinkingLed>:
/*1s time duration default*/
int Time_LedRed_Duration = 1;
int Time_LedYellow_Duration = 1;
int Time_LedGreen_Duration = 1;

void runBlinkingLed(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	/*If mode is 2,3,4*/
	if(FSM_State >= NORMAL_STATE_MODE_2 && FSM_State <= NORMAL_STATE_MODE_4){
 8000152:	4b36      	ldr	r3, [pc, #216]	@ (800022c <runBlinkingLed+0xe0>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	2b03      	cmp	r3, #3
 8000158:	dd5a      	ble.n	8000210 <runBlinkingLed+0xc4>
 800015a:	4b34      	ldr	r3, [pc, #208]	@ (800022c <runBlinkingLed+0xe0>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b06      	cmp	r3, #6
 8000160:	dc56      	bgt.n	8000210 <runBlinkingLed+0xc4>
		activeTimer(BLINKING_LED_RED_TIMER);
 8000162:	2002      	movs	r0, #2
 8000164:	f001 f8dc 	bl	8001320 <activeTimer>
		activeTimer(BLINKING_LED_YELLOW_TIMER);
 8000168:	2003      	movs	r0, #3
 800016a:	f001 f8d9 	bl	8001320 <activeTimer>
		activeTimer(BLINKING_LED_GREEN_TIMER);
 800016e:	2004      	movs	r0, #4
 8000170:	f001 f8d6 	bl	8001320 <activeTimer>

		if(getTimerFlags(BLINKING_LED_RED_TIMER)){
 8000174:	2002      	movs	r0, #2
 8000176:	f001 f8b3 	bl	80012e0 <getTimerFlags>
 800017a:	4603      	mov	r3, r0
 800017c:	2b00      	cmp	r3, #0
 800017e:	d013      	beq.n	80001a8 <runBlinkingLed+0x5c>
			HAL_GPIO_TogglePin(LED13_RED_GPIO_Port, LED13_RED_Pin);
 8000180:	2108      	movs	r1, #8
 8000182:	482b      	ldr	r0, [pc, #172]	@ (8000230 <runBlinkingLed+0xe4>)
 8000184:	f001 fcd7 	bl	8001b36 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_RED_GPIO_Port, LED24_GREEN_Pin);
 8000188:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800018c:	4828      	ldr	r0, [pc, #160]	@ (8000230 <runBlinkingLed+0xe4>)
 800018e:	f001 fcd2 	bl	8001b36 <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedRed_Duration * TIME_SCALER) / 2;
 8000192:	4b28      	ldr	r3, [pc, #160]	@ (8000234 <runBlinkingLed+0xe8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800019a:	fb02 f303 	mul.w	r3, r2, r3
 800019e:	60fb      	str	r3, [r7, #12]

			setTimer(BLINKING_LED_RED_TIMER, Time_Blinking);
 80001a0:	68f9      	ldr	r1, [r7, #12]
 80001a2:	2002      	movs	r0, #2
 80001a4:	f001 f8cc 	bl	8001340 <setTimer>
		}

		if(getTimerFlags(BLINKING_LED_YELLOW_TIMER)){
 80001a8:	2003      	movs	r0, #3
 80001aa:	f001 f899 	bl	80012e0 <getTimerFlags>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d012      	beq.n	80001da <runBlinkingLed+0x8e>
			HAL_GPIO_TogglePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin);
 80001b4:	2110      	movs	r1, #16
 80001b6:	481e      	ldr	r0, [pc, #120]	@ (8000230 <runBlinkingLed+0xe4>)
 80001b8:	f001 fcbd 	bl	8001b36 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin);
 80001bc:	2180      	movs	r1, #128	@ 0x80
 80001be:	481c      	ldr	r0, [pc, #112]	@ (8000230 <runBlinkingLed+0xe4>)
 80001c0:	f001 fcb9 	bl	8001b36 <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedYellow_Duration * TIME_SCALER) / 2;
 80001c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000238 <runBlinkingLed+0xec>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80001cc:	fb02 f303 	mul.w	r3, r2, r3
 80001d0:	60bb      	str	r3, [r7, #8]

			setTimer(BLINKING_LED_YELLOW_TIMER, Time_Blinking);
 80001d2:	68b9      	ldr	r1, [r7, #8]
 80001d4:	2003      	movs	r0, #3
 80001d6:	f001 f8b3 	bl	8001340 <setTimer>
		}

		if(getTimerFlags(BLINKING_LED_GREEN_TIMER)){
 80001da:	2004      	movs	r0, #4
 80001dc:	f001 f880 	bl	80012e0 <getTimerFlags>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d01e      	beq.n	8000224 <runBlinkingLed+0xd8>
			HAL_GPIO_TogglePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin);
 80001e6:	2120      	movs	r1, #32
 80001e8:	4811      	ldr	r0, [pc, #68]	@ (8000230 <runBlinkingLed+0xe4>)
 80001ea:	f001 fca4 	bl	8001b36 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin);
 80001ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f2:	480f      	ldr	r0, [pc, #60]	@ (8000230 <runBlinkingLed+0xe4>)
 80001f4:	f001 fc9f 	bl	8001b36 <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedGreen_Duration * TIME_SCALER) / 2;
 80001f8:	4b10      	ldr	r3, [pc, #64]	@ (800023c <runBlinkingLed+0xf0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	607b      	str	r3, [r7, #4]

			setTimer(BLINKING_LED_GREEN_TIMER, Time_Blinking);
 8000206:	6879      	ldr	r1, [r7, #4]
 8000208:	2004      	movs	r0, #4
 800020a:	f001 f899 	bl	8001340 <setTimer>
		if(getTimerFlags(BLINKING_LED_GREEN_TIMER)){
 800020e:	e009      	b.n	8000224 <runBlinkingLed+0xd8>
		}
	}
	else{
		ignoreTimer(BLINKING_LED_RED_TIMER);
 8000210:	2002      	movs	r0, #2
 8000212:	f001 f875 	bl	8001300 <ignoreTimer>
		ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 8000216:	2003      	movs	r0, #3
 8000218:	f001 f872 	bl	8001300 <ignoreTimer>
		ignoreTimer(BLINKING_LED_GREEN_TIMER);
 800021c:	2004      	movs	r0, #4
 800021e:	f001 f86f 	bl	8001300 <ignoreTimer>
	}
}
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	2000003c 	.word	0x2000003c
 8000230:	40010c00 	.word	0x40010c00
 8000234:	20000000 	.word	0x20000000
 8000238:	20000004 	.word	0x20000004
 800023c:	20000008 	.word	0x20000008

08000240 <setEnviromentStateInit>:
#include "fsm.h"

/*Default Mode*/
int FSM_State;

void setEnviromentStateInit(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 8000244:	4b1a      	ldr	r3, [pc, #104]	@ (80002b0 <setEnviromentStateInit+0x70>)
 8000246:	2205      	movs	r2, #5
 8000248:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 800024a:	4b1a      	ldr	r3, [pc, #104]	@ (80002b4 <setEnviromentStateInit+0x74>)
 800024c:	2203      	movs	r2, #3
 800024e:	601a      	str	r2, [r3, #0]
	/*7Seg display immediate*/
	display7SEG_13(Led13_Count);
 8000250:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <setEnviromentStateInit+0x70>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fb2d 	bl	80008b4 <display7SEG_13>
	display7SEG_24(Led24_Count);
 800025a:	4b16      	ldr	r3, [pc, #88]	@ (80002b4 <setEnviromentStateInit+0x74>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fcb8 	bl	8000bd4 <display7SEG_24>

	/*Run immediate so delay when first time is 0*/
	setTimer(BLINKING_LED_RED_TIMER, (Time_LedRed_Duration * TIME_SCALER)/2);
 8000264:	4b14      	ldr	r3, [pc, #80]	@ (80002b8 <setEnviromentStateInit+0x78>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800026c:	fb02 f303 	mul.w	r3, r2, r3
 8000270:	4619      	mov	r1, r3
 8000272:	2002      	movs	r0, #2
 8000274:	f001 f864 	bl	8001340 <setTimer>
	setTimer(BLINKING_LED_YELLOW_TIMER, (Time_LedYellow_Duration * TIME_SCALER)/2);
 8000278:	4b10      	ldr	r3, [pc, #64]	@ (80002bc <setEnviromentStateInit+0x7c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000280:	fb02 f303 	mul.w	r3, r2, r3
 8000284:	4619      	mov	r1, r3
 8000286:	2003      	movs	r0, #3
 8000288:	f001 f85a 	bl	8001340 <setTimer>
	setTimer(BLINKING_LED_GREEN_TIMER, (Time_LedGreen_Duration * TIME_SCALER)/2);
 800028c:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <setEnviromentStateInit+0x80>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000294:	fb02 f303 	mul.w	r3, r2, r3
 8000298:	4619      	mov	r1, r3
 800029a:	2004      	movs	r0, #4
 800029c:	f001 f850 	bl	8001340 <setTimer>

	setEnviromentState0();
 80002a0:	f000 f812 	bl	80002c8 <setEnviromentState0>
	FSM_State = RED_GREEN_STATE_MODE1;
 80002a4:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <setEnviromentStateInit+0x84>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000058 	.word	0x20000058
 80002b4:	2000005c 	.word	0x2000005c
 80002b8:	20000000 	.word	0x20000000
 80002bc:	20000004 	.word	0x20000004
 80002c0:	20000008 	.word	0x20000008
 80002c4:	2000003c 	.word	0x2000003c

080002c8 <setEnviromentState0>:

void setEnviromentState0(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 80002cc:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <setEnviromentState0+0x28>)
 80002ce:	2205      	movs	r2, #5
 80002d0:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <setEnviromentState0+0x2c>)
 80002d4:	2203      	movs	r2, #3
 80002d6:	601a      	str	r2, [r3, #0]
	setTimer(DELAY_TIMER, 0);
 80002d8:	2100      	movs	r1, #0
 80002da:	2000      	movs	r0, #0
 80002dc:	f001 f830 	bl	8001340 <setTimer>
	setTimer(TRAFFIC_TIMER, 3000);
 80002e0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80002e4:	2001      	movs	r0, #1
 80002e6:	f001 f82b 	bl	8001340 <setTimer>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000058 	.word	0x20000058
 80002f4:	2000005c 	.word	0x2000005c

080002f8 <setEnviromentState1>:

void setEnviromentState1(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	Led24_Count = 2;
 80002fc:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <setEnviromentState1+0x18>)
 80002fe:	2202      	movs	r2, #2
 8000300:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 8000302:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000306:	2001      	movs	r0, #1
 8000308:	f001 f81a 	bl	8001340 <setTimer>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000005c 	.word	0x2000005c

08000314 <setEnviromentState2>:
void setEnviromentState2(void){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	Led13_Count = 3;
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <setEnviromentState2+0x20>)
 800031a:	2203      	movs	r2, #3
 800031c:	601a      	str	r2, [r3, #0]
	Led24_Count = 5;
 800031e:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <setEnviromentState2+0x24>)
 8000320:	2205      	movs	r2, #5
 8000322:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 3000);
 8000324:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000328:	2001      	movs	r0, #1
 800032a:	f001 f809 	bl	8001340 <setTimer>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000058 	.word	0x20000058
 8000338:	2000005c 	.word	0x2000005c

0800033c <setEnviromentState3>:

void setEnviromentState3(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	Led13_Count = 2;
 8000340:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <setEnviromentState3+0x18>)
 8000342:	2202      	movs	r2, #2
 8000344:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 8000346:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800034a:	2001      	movs	r0, #1
 800034c:	f000 fff8 	bl	8001340 <setTimer>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000058 	.word	0x20000058

08000358 <setEnviromentState4>:

void setEnviromentState4(void){
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	/*May be ignore timer delay and timer traffic*/
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <setEnviromentState5>:

void setEnviromentState5(void){
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <doState0>:

void setEnviromentState6(void){

}

void doState0(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	doRedGreen_Traffic();
 8000374:	f001 f836 	bl	80013e4 <doRedGreen_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000378:	2000      	movs	r0, #0
 800037a:	f000 ffb1 	bl	80012e0 <getTimerFlags>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d018      	beq.n	80003b6 <doState0+0x46>

		/*Just for debug
		HAL_GPIO_WritePin(CHECK_GPIO_Port, CHECK_Pin, GPIO_PIN_RESET);*/
		display7SEG_13(Led13_Count);
 8000384:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <doState0+0x4c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fa93 	bl	80008b4 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800038e:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <doState0+0x50>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fc1e 	bl	8000bd4 <display7SEG_24>

		Led13_Count--;
 8000398:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <doState0+0x4c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3b01      	subs	r3, #1
 800039e:	4a07      	ldr	r2, [pc, #28]	@ (80003bc <doState0+0x4c>)
 80003a0:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 80003a2:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <doState0+0x50>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	4a05      	ldr	r2, [pc, #20]	@ (80003c0 <doState0+0x50>)
 80003aa:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 80003ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 ffc5 	bl	8001340 <setTimer>
	}
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000058 	.word	0x20000058
 80003c0:	2000005c 	.word	0x2000005c

080003c4 <doState1>:

void doState1(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	doRedYellow_Traffic();
 80003c8:	f001 f832 	bl	8001430 <doRedYellow_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 80003cc:	2000      	movs	r0, #0
 80003ce:	f000 ff87 	bl	80012e0 <getTimerFlags>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d018      	beq.n	800040a <doState1+0x46>
		display7SEG_13(Led13_Count);
 80003d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <doState1+0x4c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fa69 	bl	80008b4 <display7SEG_13>
		display7SEG_24(Led24_Count);
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <doState1+0x50>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fbf4 	bl	8000bd4 <display7SEG_24>

		Led13_Count--;
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <doState1+0x4c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	4a07      	ldr	r2, [pc, #28]	@ (8000410 <doState1+0x4c>)
 80003f4:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 80003f6:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <doState1+0x50>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a05      	ldr	r2, [pc, #20]	@ (8000414 <doState1+0x50>)
 80003fe:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 8000400:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000404:	2000      	movs	r0, #0
 8000406:	f000 ff9b 	bl	8001340 <setTimer>
	}
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000058 	.word	0x20000058
 8000414:	2000005c 	.word	0x2000005c

08000418 <doState2>:

void doState2(void){
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	doGreenRed_Traffic();
 800041c:	f001 f81a 	bl	8001454 <doGreenRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000420:	2000      	movs	r0, #0
 8000422:	f000 ff5d 	bl	80012e0 <getTimerFlags>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d018      	beq.n	800045e <doState2+0x46>
		display7SEG_13(Led13_Count);
 800042c:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <doState2+0x4c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fa3f 	bl	80008b4 <display7SEG_13>
		display7SEG_24(Led24_Count);
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <doState2+0x50>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f000 fbca 	bl	8000bd4 <display7SEG_24>

		Led13_Count--;
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <doState2+0x4c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	4a07      	ldr	r2, [pc, #28]	@ (8000464 <doState2+0x4c>)
 8000448:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <doState2+0x50>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3b01      	subs	r3, #1
 8000450:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <doState2+0x50>)
 8000452:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 8000454:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000458:	2000      	movs	r0, #0
 800045a:	f000 ff71 	bl	8001340 <setTimer>
	}
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000058 	.word	0x20000058
 8000468:	2000005c 	.word	0x2000005c

0800046c <doState3>:

void doState3(void){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	doYellowRed_Traffic();
 8000470:	f001 f80a 	bl	8001488 <doYellowRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000474:	2000      	movs	r0, #0
 8000476:	f000 ff33 	bl	80012e0 <getTimerFlags>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d018      	beq.n	80004b2 <doState3+0x46>
		display7SEG_13(Led13_Count);
 8000480:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <doState3+0x4c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fa15 	bl	80008b4 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <doState3+0x50>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fba0 	bl	8000bd4 <display7SEG_24>

		Led13_Count--;
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <doState3+0x4c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3b01      	subs	r3, #1
 800049a:	4a07      	ldr	r2, [pc, #28]	@ (80004b8 <doState3+0x4c>)
 800049c:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 800049e:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <doState3+0x50>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <doState3+0x50>)
 80004a6:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 80004a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004ac:	2000      	movs	r0, #0
 80004ae:	f000 ff47 	bl	8001340 <setTimer>
	}
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000058 	.word	0x20000058
 80004bc:	2000005c 	.word	0x2000005c

080004c0 <doState4>:

void doState4(void){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	/*Display two 7seg for time duration value
	and one 7seg for mode becaue mode 1->4*/


	if(buttonState[1] == BUTTON_PRESSED){
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <doState4+0x38>)
 80004c6:	785b      	ldrb	r3, [r3, #1]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d104      	bne.n	80004d6 <doState4+0x16>
		/*Increase time duration by one*/
		Time_LedRed_Duration++;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <doState4+0x3c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	4a0a      	ldr	r2, [pc, #40]	@ (80004fc <doState4+0x3c>)
 80004d4:	6013      	str	r3, [r2, #0]
	}

	if(buttonState[2] == BUTTON_PRESSED){
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <doState4+0x38>)
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d109      	bne.n	80004f2 <doState4+0x32>
		/*Update blinking time duration*/
		setTimer(BLINKING_LED_RED_TIMER, (Time_LedRed_Duration * TIME_SCALER)/2);
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <doState4+0x3c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80004e6:	fb02 f303 	mul.w	r3, r2, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	2002      	movs	r0, #2
 80004ee:	f000 ff27 	bl	8001340 <setTimer>
	}
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000040 	.word	0x20000040
 80004fc:	20000000 	.word	0x20000000

08000500 <doState5>:

void doState5(void){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	display7SEG_13(5);
 8000504:	2005      	movs	r0, #5
 8000506:	f000 f9d5 	bl	80008b4 <display7SEG_13>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}

0800050e <doState6>:

void doState6(void){
 800050e:	b580      	push	{r7, lr}
 8000510:	af00      	add	r7, sp, #0
	display7SEG_13(6);
 8000512:	2006      	movs	r0, #6
 8000514:	f000 f9ce 	bl	80008b4 <display7SEG_13>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <runFSM>:


void runFSM(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	switch(FSM_State){
 8000520:	4b53      	ldr	r3, [pc, #332]	@ (8000670 <runFSM+0x154>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b06      	cmp	r3, #6
 8000526:	f200 8091 	bhi.w	800064c <runFSM+0x130>
 800052a:	a201      	add	r2, pc, #4	@ (adr r2, 8000530 <runFSM+0x14>)
 800052c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000530:	0800054d 	.word	0x0800054d
 8000534:	0800057b 	.word	0x0800057b
 8000538:	080005a9 	.word	0x080005a9
 800053c:	080005d7 	.word	0x080005d7
 8000540:	08000605 	.word	0x08000605
 8000544:	0800061d 	.word	0x0800061d
 8000548:	08000635 	.word	0x08000635
	case RED_GREEN_STATE_MODE1:
		doState0();
 800054c:	f7ff ff10 	bl	8000370 <doState0>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000550:	2001      	movs	r0, #1
 8000552:	f000 fec5 	bl	80012e0 <getTimerFlags>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d004      	beq.n	8000566 <runFSM+0x4a>
			setEnviromentState1();
 800055c:	f7ff fecc 	bl	80002f8 <setEnviromentState1>
			FSM_State = RED_YELLOW_STATE_MODE1;
 8000560:	4b43      	ldr	r3, [pc, #268]	@ (8000670 <runFSM+0x154>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 8000566:	4b43      	ldr	r3, [pc, #268]	@ (8000674 <runFSM+0x158>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d170      	bne.n	8000650 <runFSM+0x134>
			setEnviromentState4();	/*Mode 2*/
 800056e:	f7ff fef3 	bl	8000358 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 8000572:	4b3f      	ldr	r3, [pc, #252]	@ (8000670 <runFSM+0x154>)
 8000574:	2204      	movs	r2, #4
 8000576:	601a      	str	r2, [r3, #0]
		}
		break;
 8000578:	e06a      	b.n	8000650 <runFSM+0x134>
	case RED_YELLOW_STATE_MODE1:
		doState1();
 800057a:	f7ff ff23 	bl	80003c4 <doState1>

		if(getTimerFlags(TRAFFIC_TIMER)){
 800057e:	2001      	movs	r0, #1
 8000580:	f000 feae 	bl	80012e0 <getTimerFlags>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d004      	beq.n	8000594 <runFSM+0x78>
			setEnviromentState2();
 800058a:	f7ff fec3 	bl	8000314 <setEnviromentState2>
			FSM_State = GREEN_RED_STATE_MODE1;
 800058e:	4b38      	ldr	r3, [pc, #224]	@ (8000670 <runFSM+0x154>)
 8000590:	2202      	movs	r2, #2
 8000592:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 8000594:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <runFSM+0x158>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d15b      	bne.n	8000654 <runFSM+0x138>
			setEnviromentState4();	/*Mode 2*/
 800059c:	f7ff fedc 	bl	8000358 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 80005a0:	4b33      	ldr	r3, [pc, #204]	@ (8000670 <runFSM+0x154>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	601a      	str	r2, [r3, #0]
		}
		break;
 80005a6:	e055      	b.n	8000654 <runFSM+0x138>
	case GREEN_RED_STATE_MODE1:
		doState2();
 80005a8:	f7ff ff36 	bl	8000418 <doState2>

		if(getTimerFlags(TRAFFIC_TIMER)){
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 fe97 	bl	80012e0 <getTimerFlags>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d004      	beq.n	80005c2 <runFSM+0xa6>
			setEnviromentState3();
 80005b8:	f7ff fec0 	bl	800033c <setEnviromentState3>
			FSM_State = YELLOW_RED_STATE_MODE1;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <runFSM+0x154>)
 80005be:	2203      	movs	r2, #3
 80005c0:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 80005c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000674 <runFSM+0x158>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d146      	bne.n	8000658 <runFSM+0x13c>
			setEnviromentState4();	/*Mode 2*/
 80005ca:	f7ff fec5 	bl	8000358 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 80005ce:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <runFSM+0x154>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	601a      	str	r2, [r3, #0]
		}
		break;
 80005d4:	e040      	b.n	8000658 <runFSM+0x13c>
	case YELLOW_RED_STATE_MODE1:
		doState3();
 80005d6:	f7ff ff49 	bl	800046c <doState3>

		if(getTimerFlags(TRAFFIC_TIMER)){
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fe80 	bl	80012e0 <getTimerFlags>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d004      	beq.n	80005f0 <runFSM+0xd4>
			setEnviromentState0();
 80005e6:	f7ff fe6f 	bl	80002c8 <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 80005ea:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <runFSM+0x154>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 80005f0:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <runFSM+0x158>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d131      	bne.n	800065c <runFSM+0x140>
			setEnviromentState4();	/*Mode 2*/
 80005f8:	f7ff feae 	bl	8000358 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <runFSM+0x154>)
 80005fe:	2204      	movs	r2, #4
 8000600:	601a      	str	r2, [r3, #0]
		}
		break;
 8000602:	e02b      	b.n	800065c <runFSM+0x140>
	case NORMAL_STATE_MODE_2:
		doState4();
 8000604:	f7ff ff5c 	bl	80004c0 <doState4>

		if(buttonState[0] == BUTTON_PRESSED){
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <runFSM+0x158>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d127      	bne.n	8000660 <runFSM+0x144>
			setEnviromentState5();	/*Mode 3*/
 8000610:	f7ff fea8 	bl	8000364 <setEnviromentState5>
			FSM_State = NORMAL_STATE_MODE_3;
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <runFSM+0x154>)
 8000616:	2205      	movs	r2, #5
 8000618:	601a      	str	r2, [r3, #0]
		}
		break;
 800061a:	e021      	b.n	8000660 <runFSM+0x144>
	case NORMAL_STATE_MODE_3:
		doState5();
 800061c:	f7ff ff70 	bl	8000500 <doState5>

		if(buttonState[0] == BUTTON_PRESSED){
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <runFSM+0x158>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d11d      	bne.n	8000664 <runFSM+0x148>
			setEnviromentState5();	/*Mode 4*/
 8000628:	f7ff fe9c 	bl	8000364 <setEnviromentState5>
			FSM_State = NORMAL_STATE_MODE_4;
 800062c:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <runFSM+0x154>)
 800062e:	2206      	movs	r2, #6
 8000630:	601a      	str	r2, [r3, #0]
		}
		break;
 8000632:	e017      	b.n	8000664 <runFSM+0x148>
	case NORMAL_STATE_MODE_4:
		doState6();
 8000634:	f7ff ff6b 	bl	800050e <doState6>

		if(buttonState[0] == BUTTON_PRESSED){
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <runFSM+0x158>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d113      	bne.n	8000668 <runFSM+0x14c>
			setEnviromentState0();	/*Mode 1*/
 8000640:	f7ff fe42 	bl	80002c8 <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <runFSM+0x154>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
		}
		break;
 800064a:	e00d      	b.n	8000668 <runFSM+0x14c>
	default:
		break;
 800064c:	bf00      	nop
 800064e:	e00c      	b.n	800066a <runFSM+0x14e>
		break;
 8000650:	bf00      	nop
 8000652:	e00a      	b.n	800066a <runFSM+0x14e>
		break;
 8000654:	bf00      	nop
 8000656:	e008      	b.n	800066a <runFSM+0x14e>
		break;
 8000658:	bf00      	nop
 800065a:	e006      	b.n	800066a <runFSM+0x14e>
		break;
 800065c:	bf00      	nop
 800065e:	e004      	b.n	800066a <runFSM+0x14e>
		break;
 8000660:	bf00      	nop
 8000662:	e002      	b.n	800066a <runFSM+0x14e>
		break;
 8000664:	bf00      	nop
 8000666:	e000      	b.n	800066a <runFSM+0x14e>
		break;
 8000668:	bf00      	nop
	}

	return;
 800066a:	bf00      	nop
}
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000003c 	.word	0x2000003c
 8000674:	20000040 	.word	0x20000040

08000678 <fsm_for_input_processing>:

#include "input_processing.h"

enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED,BUTTON_RELEASED,BUTTON_RELEASED};

void fsm_for_input_processing(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	for(int i=0;i<N0_OF_BUTTONS;i++){
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	e04c      	b.n	800071e <fsm_for_input_processing+0xa6>
		switch(buttonState[i]){
 8000684:	4a2a      	ldr	r2, [pc, #168]	@ (8000730 <fsm_for_input_processing+0xb8>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d030      	beq.n	80006f2 <fsm_for_input_processing+0x7a>
 8000690:	2b02      	cmp	r3, #2
 8000692:	dc41      	bgt.n	8000718 <fsm_for_input_processing+0xa0>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <fsm_for_input_processing+0x26>
 8000698:	2b01      	cmp	r3, #1
 800069a:	d00e      	beq.n	80006ba <fsm_for_input_processing+0x42>
 800069c:	e03c      	b.n	8000718 <fsm_for_input_processing+0xa0>
		case BUTTON_RELEASED:
			if(is_button_pressed(i)){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f846 	bl	8000734 <is_button_pressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d02f      	beq.n	800070e <fsm_for_input_processing+0x96>
				buttonState[i] = BUTTON_PRESSED;
 80006ae:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <fsm_for_input_processing+0xb8>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
				// Increase value PORTA by one
			}
			break;
 80006b8:	e029      	b.n	800070e <fsm_for_input_processing+0x96>
		case BUTTON_PRESSED:
			if(!is_button_pressed(i)){
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f838 	bl	8000734 <is_button_pressed>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d105      	bne.n	80006d6 <fsm_for_input_processing+0x5e>
				buttonState[i] = BUTTON_RELEASED;
 80006ca:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <fsm_for_input_processing+0xb8>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4413      	add	r3, r2
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
					// Set timer 500ms for auto increase
					//setTimer(AUTO_INCREASE, 500);
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 80006d4:	e01d      	b.n	8000712 <fsm_for_input_processing+0x9a>
				if(is_button_pressed_1s(i)){
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f844 	bl	8000768 <is_button_pressed_1s>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d015      	beq.n	8000712 <fsm_for_input_processing+0x9a>
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <fsm_for_input_processing+0xb8>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	2202      	movs	r2, #2
 80006ee:	701a      	strb	r2, [r3, #0]
			break;
 80006f0:	e00f      	b.n	8000712 <fsm_for_input_processing+0x9a>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed(i)){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f81c 	bl	8000734 <is_button_pressed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d109      	bne.n	8000716 <fsm_for_input_processing+0x9e>
				buttonState[i] = BUTTON_RELEASED;
 8000702:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <fsm_for_input_processing+0xb8>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				/*if(getTimerFlags(AUTO_INCREASE)){
					// Increase value PORTA by one
					//setTimer(AUTO_INCREASE, 500);
				}*/
			}
			break;
 800070c:	e003      	b.n	8000716 <fsm_for_input_processing+0x9e>
			break;
 800070e:	bf00      	nop
 8000710:	e002      	b.n	8000718 <fsm_for_input_processing+0xa0>
			break;
 8000712:	bf00      	nop
 8000714:	e000      	b.n	8000718 <fsm_for_input_processing+0xa0>
			break;
 8000716:	bf00      	nop
	for(int i=0;i<N0_OF_BUTTONS;i++){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3301      	adds	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b02      	cmp	r3, #2
 8000722:	ddaf      	ble.n	8000684 <fsm_for_input_processing+0xc>
		}
	}
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000040 	.word	0x20000040

08000734 <is_button_pressed>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

unsigned char is_button_pressed(uint8_t index){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d901      	bls.n	8000748 <is_button_pressed+0x14>
 8000744:	2300      	movs	r3, #0
 8000746:	e007      	b.n	8000758 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a06      	ldr	r2, [pc, #24]	@ (8000764 <is_button_pressed+0x30>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	2000000c 	.word	0x2000000c

08000768 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d901      	bls.n	800077c <is_button_pressed_1s+0x14>
 8000778:	23ff      	movs	r3, #255	@ 0xff
 800077a:	e007      	b.n	800078c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4a06      	ldr	r2, [pc, #24]	@ (8000798 <is_button_pressed_1s+0x30>)
 8000780:	5cd3      	ldrb	r3, [r2, r3]
 8000782:	2b01      	cmp	r3, #1
 8000784:	bf0c      	ite	eq
 8000786:	2301      	moveq	r3, #1
 8000788:	2300      	movne	r3, #0
 800078a:	b2db      	uxtb	r3, r3
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	2000004c 	.word	0x2000004c

0800079c <button_reading>:

void button_reading(void){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e071      	b.n	800088c <button_reading+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80007a8:	4a3c      	ldr	r2, [pc, #240]	@ (800089c <button_reading+0x100>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	7819      	ldrb	r1, [r3, #0]
 80007b0:	4a3b      	ldr	r2, [pc, #236]	@ (80008a0 <button_reading+0x104>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	460a      	mov	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
		// Chose button port
		if(i == 0){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10b      	bne.n	80007d8 <button_reading+0x3c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 80007c0:	2101      	movs	r1, #1
 80007c2:	4838      	ldr	r0, [pc, #224]	@ (80008a4 <button_reading+0x108>)
 80007c4:	f001 f988 	bl	8001ad8 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4619      	mov	r1, r3
 80007cc:	4a33      	ldr	r2, [pc, #204]	@ (800089c <button_reading+0x100>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	460a      	mov	r2, r1
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e01c      	b.n	8000812 <button_reading+0x76>
		}
		else if(i == 1){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10b      	bne.n	80007f6 <button_reading+0x5a>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80007de:	2102      	movs	r1, #2
 80007e0:	4830      	ldr	r0, [pc, #192]	@ (80008a4 <button_reading+0x108>)
 80007e2:	f001 f979 	bl	8001ad8 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4619      	mov	r1, r3
 80007ea:	4a2c      	ldr	r2, [pc, #176]	@ (800089c <button_reading+0x100>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	460a      	mov	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	e00d      	b.n	8000812 <button_reading+0x76>
		}
		else if( i == 2){
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d10a      	bne.n	8000812 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80007fc:	2104      	movs	r1, #4
 80007fe:	4829      	ldr	r0, [pc, #164]	@ (80008a4 <button_reading+0x108>)
 8000800:	f001 f96a 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	4619      	mov	r1, r3
 8000808:	4a24      	ldr	r2, [pc, #144]	@ (800089c <button_reading+0x100>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	460a      	mov	r2, r1
 8000810:	701a      	strb	r2, [r3, #0]
		}
		else{
			/*This is fault value of index button*/
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000812:	4a22      	ldr	r2, [pc, #136]	@ (800089c <button_reading+0x100>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4921      	ldr	r1, [pc, #132]	@ (80008a0 <button_reading+0x104>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	440b      	add	r3, r1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d12f      	bne.n	8000886 <button_reading+0xea>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000826:	4a1d      	ldr	r2, [pc, #116]	@ (800089c <button_reading+0x100>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	7819      	ldrb	r1, [r3, #0]
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <button_reading+0x10c>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	460a      	mov	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000838:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <button_reading+0x10c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d116      	bne.n	8000872 <button_reading+0xd6>
			// If a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000844:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <button_reading+0x110>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800084c:	2b63      	cmp	r3, #99	@ 0x63
 800084e:	d80a      	bhi.n	8000866 <button_reading+0xca>
					counterForButtonPress1s[i]++;
 8000850:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <button_reading+0x110>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000858:	3301      	adds	r3, #1
 800085a:	b299      	uxth	r1, r3
 800085c:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <button_reading+0x110>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000864:	e00f      	b.n	8000886 <button_reading+0xea>
				} else {
				// The flag is turned on when 1 second has passed
				// since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <button_reading+0x114>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e009      	b.n	8000886 <button_reading+0xea>
					// To do
				}
			}
			else {
				counterForButtonPress1s[i] = 0;
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <button_reading+0x110>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2100      	movs	r1, #0
 8000878:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 800087c:	4a0c      	ldr	r2, [pc, #48]	@ (80008b0 <button_reading+0x114>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b02      	cmp	r3, #2
 8000890:	dd8a      	ble.n	80007a8 <button_reading+0xc>
			}
		}
	}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000044 	.word	0x20000044
 80008a0:	20000048 	.word	0x20000048
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	2000000c 	.word	0x2000000c
 80008ac:	20000050 	.word	0x20000050
 80008b0:	2000004c 	.word	0x2000004c

080008b4 <display7SEG_13>:
#include "led_display.h"

int Led13_Count;
int Led24_Count;

void display7SEG_13(int number){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if(number == 0){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d123      	bne.n	800090a <display7SEG_13+0x56>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2101      	movs	r1, #1
 80008c6:	48c2      	ldr	r0, [pc, #776]	@ (8000bd0 <display7SEG_13+0x31c>)
 80008c8:	f001 f91d 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2102      	movs	r1, #2
 80008d0:	48bf      	ldr	r0, [pc, #764]	@ (8000bd0 <display7SEG_13+0x31c>)
 80008d2:	f001 f918 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2104      	movs	r1, #4
 80008da:	48bd      	ldr	r0, [pc, #756]	@ (8000bd0 <display7SEG_13+0x31c>)
 80008dc:	f001 f913 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2108      	movs	r1, #8
 80008e4:	48ba      	ldr	r0, [pc, #744]	@ (8000bd0 <display7SEG_13+0x31c>)
 80008e6:	f001 f90e 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2110      	movs	r1, #16
 80008ee:	48b8      	ldr	r0, [pc, #736]	@ (8000bd0 <display7SEG_13+0x31c>)
 80008f0:	f001 f909 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2120      	movs	r1, #32
 80008f8:	48b5      	ldr	r0, [pc, #724]	@ (8000bd0 <display7SEG_13+0x31c>)
 80008fa:	f001 f904 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	48b3      	ldr	r0, [pc, #716]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000904:	f001 f8ff 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000908:	e15d      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 1){
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d123      	bne.n	8000958 <display7SEG_13+0xa4>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	48ae      	ldr	r0, [pc, #696]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000916:	f001 f8f6 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2102      	movs	r1, #2
 800091e:	48ac      	ldr	r0, [pc, #688]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000920:	f001 f8f1 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2104      	movs	r1, #4
 8000928:	48a9      	ldr	r0, [pc, #676]	@ (8000bd0 <display7SEG_13+0x31c>)
 800092a:	f001 f8ec 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2108      	movs	r1, #8
 8000932:	48a7      	ldr	r0, [pc, #668]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000934:	f001 f8e7 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	48a4      	ldr	r0, [pc, #656]	@ (8000bd0 <display7SEG_13+0x31c>)
 800093e:	f001 f8e2 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2120      	movs	r1, #32
 8000946:	48a2      	ldr	r0, [pc, #648]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000948:	f001 f8dd 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2140      	movs	r1, #64	@ 0x40
 8000950:	489f      	ldr	r0, [pc, #636]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000952:	f001 f8d8 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000956:	e136      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 2){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d123      	bne.n	80009a6 <display7SEG_13+0xf2>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2101      	movs	r1, #1
 8000962:	489b      	ldr	r0, [pc, #620]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000964:	f001 f8cf 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	4898      	ldr	r0, [pc, #608]	@ (8000bd0 <display7SEG_13+0x31c>)
 800096e:	f001 f8ca 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2104      	movs	r1, #4
 8000976:	4896      	ldr	r0, [pc, #600]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000978:	f001 f8c5 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2108      	movs	r1, #8
 8000980:	4893      	ldr	r0, [pc, #588]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000982:	f001 f8c0 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2110      	movs	r1, #16
 800098a:	4891      	ldr	r0, [pc, #580]	@ (8000bd0 <display7SEG_13+0x31c>)
 800098c:	f001 f8bb 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2120      	movs	r1, #32
 8000994:	488e      	ldr	r0, [pc, #568]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000996:	f001 f8b6 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	@ 0x40
 800099e:	488c      	ldr	r0, [pc, #560]	@ (8000bd0 <display7SEG_13+0x31c>)
 80009a0:	f001 f8b1 	bl	8001b06 <HAL_GPIO_WritePin>
}
 80009a4:	e10f      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 3){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d123      	bne.n	80009f4 <display7SEG_13+0x140>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2101      	movs	r1, #1
 80009b0:	4887      	ldr	r0, [pc, #540]	@ (8000bd0 <display7SEG_13+0x31c>)
 80009b2:	f001 f8a8 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2102      	movs	r1, #2
 80009ba:	4885      	ldr	r0, [pc, #532]	@ (8000bd0 <display7SEG_13+0x31c>)
 80009bc:	f001 f8a3 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2104      	movs	r1, #4
 80009c4:	4882      	ldr	r0, [pc, #520]	@ (8000bd0 <display7SEG_13+0x31c>)
 80009c6:	f001 f89e 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4880      	ldr	r0, [pc, #512]	@ (8000bd0 <display7SEG_13+0x31c>)
 80009d0:	f001 f899 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	487d      	ldr	r0, [pc, #500]	@ (8000bd0 <display7SEG_13+0x31c>)
 80009da:	f001 f894 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2120      	movs	r1, #32
 80009e2:	487b      	ldr	r0, [pc, #492]	@ (8000bd0 <display7SEG_13+0x31c>)
 80009e4:	f001 f88f 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	@ 0x40
 80009ec:	4878      	ldr	r0, [pc, #480]	@ (8000bd0 <display7SEG_13+0x31c>)
 80009ee:	f001 f88a 	bl	8001b06 <HAL_GPIO_WritePin>
}
 80009f2:	e0e8      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 4){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d123      	bne.n	8000a42 <display7SEG_13+0x18e>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2101      	movs	r1, #1
 80009fe:	4874      	ldr	r0, [pc, #464]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a00:	f001 f881 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2102      	movs	r1, #2
 8000a08:	4871      	ldr	r0, [pc, #452]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a0a:	f001 f87c 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2104      	movs	r1, #4
 8000a12:	486f      	ldr	r0, [pc, #444]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a14:	f001 f877 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	486c      	ldr	r0, [pc, #432]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a1e:	f001 f872 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2110      	movs	r1, #16
 8000a26:	486a      	ldr	r0, [pc, #424]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a28:	f001 f86d 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2120      	movs	r1, #32
 8000a30:	4867      	ldr	r0, [pc, #412]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a32:	f001 f868 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2140      	movs	r1, #64	@ 0x40
 8000a3a:	4865      	ldr	r0, [pc, #404]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a3c:	f001 f863 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000a40:	e0c1      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 5){
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b05      	cmp	r3, #5
 8000a46:	d123      	bne.n	8000a90 <display7SEG_13+0x1dc>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4860      	ldr	r0, [pc, #384]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a4e:	f001 f85a 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2102      	movs	r1, #2
 8000a56:	485e      	ldr	r0, [pc, #376]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a58:	f001 f855 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2104      	movs	r1, #4
 8000a60:	485b      	ldr	r0, [pc, #364]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a62:	f001 f850 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4859      	ldr	r0, [pc, #356]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a6c:	f001 f84b 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2110      	movs	r1, #16
 8000a74:	4856      	ldr	r0, [pc, #344]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a76:	f001 f846 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4854      	ldr	r0, [pc, #336]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a80:	f001 f841 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2140      	movs	r1, #64	@ 0x40
 8000a88:	4851      	ldr	r0, [pc, #324]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a8a:	f001 f83c 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000a8e:	e09a      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 6){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d123      	bne.n	8000ade <display7SEG_13+0x22a>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	484d      	ldr	r0, [pc, #308]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000a9c:	f001 f833 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	484a      	ldr	r0, [pc, #296]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000aa6:	f001 f82e 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2104      	movs	r1, #4
 8000aae:	4848      	ldr	r0, [pc, #288]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000ab0:	f001 f829 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	4845      	ldr	r0, [pc, #276]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000aba:	f001 f824 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4843      	ldr	r0, [pc, #268]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000ac4:	f001 f81f 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2120      	movs	r1, #32
 8000acc:	4840      	ldr	r0, [pc, #256]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000ace:	f001 f81a 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2140      	movs	r1, #64	@ 0x40
 8000ad6:	483e      	ldr	r0, [pc, #248]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000ad8:	f001 f815 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000adc:	e073      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 7){
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b07      	cmp	r3, #7
 8000ae2:	d123      	bne.n	8000b2c <display7SEG_13+0x278>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4839      	ldr	r0, [pc, #228]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000aea:	f001 f80c 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2102      	movs	r1, #2
 8000af2:	4837      	ldr	r0, [pc, #220]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000af4:	f001 f807 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2104      	movs	r1, #4
 8000afc:	4834      	ldr	r0, [pc, #208]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000afe:	f001 f802 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2108      	movs	r1, #8
 8000b06:	4832      	ldr	r0, [pc, #200]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b08:	f000 fffd 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2110      	movs	r1, #16
 8000b10:	482f      	ldr	r0, [pc, #188]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b12:	f000 fff8 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2120      	movs	r1, #32
 8000b1a:	482d      	ldr	r0, [pc, #180]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b1c:	f000 fff3 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2140      	movs	r1, #64	@ 0x40
 8000b24:	482a      	ldr	r0, [pc, #168]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b26:	f000 ffee 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000b2a:	e04c      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 8){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d123      	bne.n	8000b7a <display7SEG_13+0x2c6>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2101      	movs	r1, #1
 8000b36:	4826      	ldr	r0, [pc, #152]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b38:	f000 ffe5 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b42:	f000 ffe0 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4821      	ldr	r0, [pc, #132]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b4c:	f000 ffdb 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2108      	movs	r1, #8
 8000b54:	481e      	ldr	r0, [pc, #120]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b56:	f000 ffd6 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	481c      	ldr	r0, [pc, #112]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b60:	f000 ffd1 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2120      	movs	r1, #32
 8000b68:	4819      	ldr	r0, [pc, #100]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b6a:	f000 ffcc 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2140      	movs	r1, #64	@ 0x40
 8000b72:	4817      	ldr	r0, [pc, #92]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b74:	f000 ffc7 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000b78:	e025      	b.n	8000bc6 <display7SEG_13+0x312>
	else if(number == 9){
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b09      	cmp	r3, #9
 8000b7e:	d122      	bne.n	8000bc6 <display7SEG_13+0x312>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	4812      	ldr	r0, [pc, #72]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b86:	f000 ffbe 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b90:	f000 ffb9 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2104      	movs	r1, #4
 8000b98:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000b9a:	f000 ffb4 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000ba4:	f000 ffaf 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2110      	movs	r1, #16
 8000bac:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000bae:	f000 ffaa 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000bb8:	f000 ffa5 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	@ 0x40
 8000bc0:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <display7SEG_13+0x31c>)
 8000bc2:	f000 ffa0 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40010800 	.word	0x40010800

08000bd4 <display7SEG_24>:

void display7SEG_24(int number){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d12a      	bne.n	8000c38 <display7SEG_24+0x64>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be8:	48cb      	ldr	r0, [pc, #812]	@ (8000f18 <display7SEG_24+0x344>)
 8000bea:	f000 ff8c 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf4:	48c8      	ldr	r0, [pc, #800]	@ (8000f18 <display7SEG_24+0x344>)
 8000bf6:	f000 ff86 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c00:	48c5      	ldr	r0, [pc, #788]	@ (8000f18 <display7SEG_24+0x344>)
 8000c02:	f000 ff80 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c0c:	48c2      	ldr	r0, [pc, #776]	@ (8000f18 <display7SEG_24+0x344>)
 8000c0e:	f000 ff7a 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c18:	48bf      	ldr	r0, [pc, #764]	@ (8000f18 <display7SEG_24+0x344>)
 8000c1a:	f000 ff74 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c24:	48bc      	ldr	r0, [pc, #752]	@ (8000f18 <display7SEG_24+0x344>)
 8000c26:	f000 ff6e 	bl	8001b06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c30:	48b9      	ldr	r0, [pc, #740]	@ (8000f18 <display7SEG_24+0x344>)
 8000c32:	f000 ff68 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000c36:	e19e      	b.n	8000f76 <display7SEG_24+0x3a2>
	else if(number == 1){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d12a      	bne.n	8000c94 <display7SEG_24+0xc0>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c44:	48b4      	ldr	r0, [pc, #720]	@ (8000f18 <display7SEG_24+0x344>)
 8000c46:	f000 ff5e 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c50:	48b1      	ldr	r0, [pc, #708]	@ (8000f18 <display7SEG_24+0x344>)
 8000c52:	f000 ff58 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c5c:	48ae      	ldr	r0, [pc, #696]	@ (8000f18 <display7SEG_24+0x344>)
 8000c5e:	f000 ff52 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c68:	48ab      	ldr	r0, [pc, #684]	@ (8000f18 <display7SEG_24+0x344>)
 8000c6a:	f000 ff4c 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c74:	48a8      	ldr	r0, [pc, #672]	@ (8000f18 <display7SEG_24+0x344>)
 8000c76:	f000 ff46 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c80:	48a5      	ldr	r0, [pc, #660]	@ (8000f18 <display7SEG_24+0x344>)
 8000c82:	f000 ff40 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c8c:	48a2      	ldr	r0, [pc, #648]	@ (8000f18 <display7SEG_24+0x344>)
 8000c8e:	f000 ff3a 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000c92:	e170      	b.n	8000f76 <display7SEG_24+0x3a2>
	else if(number == 2){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d12a      	bne.n	8000cf0 <display7SEG_24+0x11c>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca0:	489d      	ldr	r0, [pc, #628]	@ (8000f18 <display7SEG_24+0x344>)
 8000ca2:	f000 ff30 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cac:	489a      	ldr	r0, [pc, #616]	@ (8000f18 <display7SEG_24+0x344>)
 8000cae:	f000 ff2a 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cb8:	4897      	ldr	r0, [pc, #604]	@ (8000f18 <display7SEG_24+0x344>)
 8000cba:	f000 ff24 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cc4:	4894      	ldr	r0, [pc, #592]	@ (8000f18 <display7SEG_24+0x344>)
 8000cc6:	f000 ff1e 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cd0:	4891      	ldr	r0, [pc, #580]	@ (8000f18 <display7SEG_24+0x344>)
 8000cd2:	f000 ff18 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cdc:	488e      	ldr	r0, [pc, #568]	@ (8000f18 <display7SEG_24+0x344>)
 8000cde:	f000 ff12 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce8:	488b      	ldr	r0, [pc, #556]	@ (8000f18 <display7SEG_24+0x344>)
 8000cea:	f000 ff0c 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000cee:	e142      	b.n	8000f76 <display7SEG_24+0x3a2>
	else if(number == 3){
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d12a      	bne.n	8000d4c <display7SEG_24+0x178>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cfc:	4886      	ldr	r0, [pc, #536]	@ (8000f18 <display7SEG_24+0x344>)
 8000cfe:	f000 ff02 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d08:	4883      	ldr	r0, [pc, #524]	@ (8000f18 <display7SEG_24+0x344>)
 8000d0a:	f000 fefc 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d14:	4880      	ldr	r0, [pc, #512]	@ (8000f18 <display7SEG_24+0x344>)
 8000d16:	f000 fef6 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d20:	487d      	ldr	r0, [pc, #500]	@ (8000f18 <display7SEG_24+0x344>)
 8000d22:	f000 fef0 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d2c:	487a      	ldr	r0, [pc, #488]	@ (8000f18 <display7SEG_24+0x344>)
 8000d2e:	f000 feea 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d38:	4877      	ldr	r0, [pc, #476]	@ (8000f18 <display7SEG_24+0x344>)
 8000d3a:	f000 fee4 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d44:	4874      	ldr	r0, [pc, #464]	@ (8000f18 <display7SEG_24+0x344>)
 8000d46:	f000 fede 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000d4a:	e114      	b.n	8000f76 <display7SEG_24+0x3a2>
	else if(number == 4){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d12a      	bne.n	8000da8 <display7SEG_24+0x1d4>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d58:	486f      	ldr	r0, [pc, #444]	@ (8000f18 <display7SEG_24+0x344>)
 8000d5a:	f000 fed4 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d64:	486c      	ldr	r0, [pc, #432]	@ (8000f18 <display7SEG_24+0x344>)
 8000d66:	f000 fece 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d70:	4869      	ldr	r0, [pc, #420]	@ (8000f18 <display7SEG_24+0x344>)
 8000d72:	f000 fec8 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d7c:	4866      	ldr	r0, [pc, #408]	@ (8000f18 <display7SEG_24+0x344>)
 8000d7e:	f000 fec2 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d88:	4863      	ldr	r0, [pc, #396]	@ (8000f18 <display7SEG_24+0x344>)
 8000d8a:	f000 febc 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d94:	4860      	ldr	r0, [pc, #384]	@ (8000f18 <display7SEG_24+0x344>)
 8000d96:	f000 feb6 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da0:	485d      	ldr	r0, [pc, #372]	@ (8000f18 <display7SEG_24+0x344>)
 8000da2:	f000 feb0 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000da6:	e0e6      	b.n	8000f76 <display7SEG_24+0x3a2>
	else if(number == 5){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b05      	cmp	r3, #5
 8000dac:	d12a      	bne.n	8000e04 <display7SEG_24+0x230>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db4:	4858      	ldr	r0, [pc, #352]	@ (8000f18 <display7SEG_24+0x344>)
 8000db6:	f000 fea6 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc0:	4855      	ldr	r0, [pc, #340]	@ (8000f18 <display7SEG_24+0x344>)
 8000dc2:	f000 fea0 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dcc:	4852      	ldr	r0, [pc, #328]	@ (8000f18 <display7SEG_24+0x344>)
 8000dce:	f000 fe9a 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dd8:	484f      	ldr	r0, [pc, #316]	@ (8000f18 <display7SEG_24+0x344>)
 8000dda:	f000 fe94 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de4:	484c      	ldr	r0, [pc, #304]	@ (8000f18 <display7SEG_24+0x344>)
 8000de6:	f000 fe8e 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df0:	4849      	ldr	r0, [pc, #292]	@ (8000f18 <display7SEG_24+0x344>)
 8000df2:	f000 fe88 	bl	8001b06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfc:	4846      	ldr	r0, [pc, #280]	@ (8000f18 <display7SEG_24+0x344>)
 8000dfe:	f000 fe82 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000e02:	e0b8      	b.n	8000f76 <display7SEG_24+0x3a2>
	else if(number == 6){
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d12a      	bne.n	8000e60 <display7SEG_24+0x28c>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e10:	4841      	ldr	r0, [pc, #260]	@ (8000f18 <display7SEG_24+0x344>)
 8000e12:	f000 fe78 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e1c:	483e      	ldr	r0, [pc, #248]	@ (8000f18 <display7SEG_24+0x344>)
 8000e1e:	f000 fe72 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <display7SEG_24+0x344>)
 8000e2a:	f000 fe6c 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e34:	4838      	ldr	r0, [pc, #224]	@ (8000f18 <display7SEG_24+0x344>)
 8000e36:	f000 fe66 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e40:	4835      	ldr	r0, [pc, #212]	@ (8000f18 <display7SEG_24+0x344>)
 8000e42:	f000 fe60 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e4c:	4832      	ldr	r0, [pc, #200]	@ (8000f18 <display7SEG_24+0x344>)
 8000e4e:	f000 fe5a 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e58:	482f      	ldr	r0, [pc, #188]	@ (8000f18 <display7SEG_24+0x344>)
 8000e5a:	f000 fe54 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000e5e:	e08a      	b.n	8000f76 <display7SEG_24+0x3a2>
	else if(number == 7){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	d12a      	bne.n	8000ebc <display7SEG_24+0x2e8>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6c:	482a      	ldr	r0, [pc, #168]	@ (8000f18 <display7SEG_24+0x344>)
 8000e6e:	f000 fe4a 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e78:	4827      	ldr	r0, [pc, #156]	@ (8000f18 <display7SEG_24+0x344>)
 8000e7a:	f000 fe44 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e84:	4824      	ldr	r0, [pc, #144]	@ (8000f18 <display7SEG_24+0x344>)
 8000e86:	f000 fe3e 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e90:	4821      	ldr	r0, [pc, #132]	@ (8000f18 <display7SEG_24+0x344>)
 8000e92:	f000 fe38 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e9c:	481e      	ldr	r0, [pc, #120]	@ (8000f18 <display7SEG_24+0x344>)
 8000e9e:	f000 fe32 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea8:	481b      	ldr	r0, [pc, #108]	@ (8000f18 <display7SEG_24+0x344>)
 8000eaa:	f000 fe2c 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eb4:	4818      	ldr	r0, [pc, #96]	@ (8000f18 <display7SEG_24+0x344>)
 8000eb6:	f000 fe26 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000eba:	e05c      	b.n	8000f76 <display7SEG_24+0x3a2>
	else if(number == 8){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d12c      	bne.n	8000f1c <display7SEG_24+0x348>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec8:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <display7SEG_24+0x344>)
 8000eca:	f000 fe1c 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed4:	4810      	ldr	r0, [pc, #64]	@ (8000f18 <display7SEG_24+0x344>)
 8000ed6:	f000 fe16 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <display7SEG_24+0x344>)
 8000ee2:	f000 fe10 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eec:	480a      	ldr	r0, [pc, #40]	@ (8000f18 <display7SEG_24+0x344>)
 8000eee:	f000 fe0a 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef8:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <display7SEG_24+0x344>)
 8000efa:	f000 fe04 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <display7SEG_24+0x344>)
 8000f06:	f000 fdfe 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f10:	4801      	ldr	r0, [pc, #4]	@ (8000f18 <display7SEG_24+0x344>)
 8000f12:	f000 fdf8 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000f16:	e02e      	b.n	8000f76 <display7SEG_24+0x3a2>
 8000f18:	40010800 	.word	0x40010800
	else if(number == 9){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b09      	cmp	r3, #9
 8000f20:	d129      	bne.n	8000f76 <display7SEG_24+0x3a2>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f28:	4815      	ldr	r0, [pc, #84]	@ (8000f80 <display7SEG_24+0x3ac>)
 8000f2a:	f000 fdec 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f34:	4812      	ldr	r0, [pc, #72]	@ (8000f80 <display7SEG_24+0x3ac>)
 8000f36:	f000 fde6 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <display7SEG_24+0x3ac>)
 8000f42:	f000 fde0 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <display7SEG_24+0x3ac>)
 8000f4e:	f000 fdda 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f58:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <display7SEG_24+0x3ac>)
 8000f5a:	f000 fdd4 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f64:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <display7SEG_24+0x3ac>)
 8000f66:	f000 fdce 	bl	8001b06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <display7SEG_24+0x3ac>)
 8000f72:	f000 fdc8 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40010800 	.word	0x40010800

08000f84 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f94:	d103      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000f96:	f7ff fc01 	bl	800079c <button_reading>
		runTimer();
 8000f9a:	f000 f9ef 	bl	800137c <runTimer>
		/*Just for debug
		HAL_GPIO_TogglePin(CHECK_GPIO_Port, CHECK_Pin);*/
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 faa8 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f814 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f89a 	bl	80010ec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fb8:	f000 f84c 	bl	8001054 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setEnviromentStateInit();
 8000fbc:	f7ff f940 	bl	8000240 <setEnviromentStateInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <main+0x30>)
 8000fc2:	f001 f9ff 	bl	80023c4 <HAL_TIM_Base_Start_IT>
  {
	/*Just for debug*/
	//display7SEG_13(FSM_State);
	//display7SEG_24(buttonState[0]);

	fsm_for_input_processing();
 8000fc6:	f7ff fb57 	bl	8000678 <fsm_for_input_processing>
	runFSM();
 8000fca:	f7ff faa7 	bl	800051c <runFSM>
	runBlinkingLed();
 8000fce:	f7ff f8bd 	bl	800014c <runBlinkingLed>
	fsm_for_input_processing();
 8000fd2:	bf00      	nop
 8000fd4:	e7f7      	b.n	8000fc6 <main+0x1e>
 8000fd6:	bf00      	nop
 8000fd8:	20000060 	.word	0x20000060

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b090      	sub	sp, #64	@ 0x40
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2228      	movs	r2, #40	@ 0x28
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fd76 	bl	8002adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001006:	2310      	movs	r3, #16
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fda8 	bl	8001b68 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800101e:	f000 f8c7 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f001 f816 	bl	800206c <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001046:	f000 f8b3 	bl	80011b0 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3740      	adds	r7, #64	@ 0x40
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_TIM2_Init+0x94>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_TIM2_Init+0x94>)
 800107a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800107e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <MX_TIM2_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_TIM2_Init+0x94>)
 8001088:	2209      	movs	r2, #9
 800108a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <MX_TIM2_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001098:	4813      	ldr	r0, [pc, #76]	@ (80010e8 <MX_TIM2_Init+0x94>)
 800109a:	f001 f943 	bl	8002324 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010a4:	f000 f884 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <MX_TIM2_Init+0x94>)
 80010b6:	f001 fac1 	bl	800263c <HAL_TIM_ConfigClockSource>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010c0:	f000 f876 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_TIM2_Init+0x94>)
 80010d2:	f001 fc99 	bl	8002a08 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010dc:	f000 f868 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000060 	.word	0x20000060

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <MX_GPIO_Init+0xb8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <MX_GPIO_Init+0xb8>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <MX_GPIO_Init+0xb8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <MX_GPIO_Init+0xb8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a21      	ldr	r2, [pc, #132]	@ (80011a4 <MX_GPIO_Init+0xb8>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <MX_GPIO_Init+0xb8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8001130:	2200      	movs	r2, #0
 8001132:	f64f 717f 	movw	r1, #65407	@ 0xff7f
 8001136:	481c      	ldr	r0, [pc, #112]	@ (80011a8 <MX_GPIO_Init+0xbc>)
 8001138:	f000 fce5 	bl	8001b06 <HAL_GPIO_WritePin>
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|SEG24_A_Pin
                          |SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin|SEG24_E_Pin
                          |SEG24_F_Pin|SEG24_G_Pin|SEG_TIME_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_TIME_B_Pin|SEG_TIME_C_Pin|SEG_TIME_D_Pin|SEG_TIME_E_Pin
 800113c:	2200      	movs	r2, #0
 800113e:	f64f 71f8 	movw	r1, #65528	@ 0xfff8
 8001142:	481a      	ldr	r0, [pc, #104]	@ (80011ac <MX_GPIO_Init+0xc0>)
 8001144:	f000 fcdf 	bl	8001b06 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG13_A_Pin SEG13_B_Pin SEG13_C_Pin SEG13_D_Pin
                           SEG13_E_Pin SEG13_F_Pin SEG13_G_Pin SEG24_A_Pin
                           SEG24_B_Pin SEG24_C_Pin SEG24_D_Pin SEG24_E_Pin
                           SEG24_F_Pin SEG24_G_Pin SEG_TIME_H_Pin */
  GPIO_InitStruct.Pin = SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8001148:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800114c:	60bb      	str	r3, [r7, #8]
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|SEG24_A_Pin
                          |SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin|SEG24_E_Pin
                          |SEG24_F_Pin|SEG24_G_Pin|SEG_TIME_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <MX_GPIO_Init+0xbc>)
 8001162:	f000 fb3d 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8001166:	2307      	movs	r3, #7
 8001168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <MX_GPIO_Init+0xc0>)
 800117a:	f000 fb31 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_TIME_B_Pin SEG_TIME_C_Pin SEG_TIME_D_Pin SEG_TIME_E_Pin
                           SEG_TIME_F_Pin SEG_TIME_G_Pin LED13_RED_Pin LED13_YELLOW_Pin
                           LED13_GREEN_Pin LED24_RED_Pin LED24_YELLOW_Pin LED24_GREEN_Pin
                           SEG_TIME_A_Pin */
  GPIO_InitStruct.Pin = SEG_TIME_B_Pin|SEG_TIME_C_Pin|SEG_TIME_D_Pin|SEG_TIME_E_Pin
 800117e:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8001182:	60bb      	str	r3, [r7, #8]
                          |SEG_TIME_F_Pin|SEG_TIME_G_Pin|LED13_RED_Pin|LED13_YELLOW_Pin
                          |LED13_GREEN_Pin|LED24_RED_Pin|LED24_YELLOW_Pin|LED24_GREEN_Pin
                          |SEG_TIME_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2302      	movs	r3, #2
 800118e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_GPIO_Init+0xc0>)
 8001198:	f000 fb22 	bl	80017e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40010c00 	.word	0x40010c00

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <Error_Handler+0x8>

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <HAL_MspInit+0x5c>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6193      	str	r3, [r2, #24]
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_MspInit+0x5c>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <HAL_MspInit+0x5c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_MspInit+0x5c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_MspInit+0x60>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_MspInit+0x60>)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000

08001220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001230:	d113      	bne.n	800125a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	201c      	movs	r0, #28
 8001250:	f000 fa8f 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001254:	201c      	movs	r0, #28
 8001256:	f000 faa8 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f968 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <TIM2_IRQHandler+0x10>)
 80012c6:	f001 f8c9 	bl	800245c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000060 	.word	0x20000060

080012d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <getTimerFlags>:
	//__HAL_TIM_SET_PRESCALER(&htim2,PRESCALER);
	__HAL_TIM_SET_COUNTER(&htim2,COUNTER);
	TIMER_CYCLE = cycle;
}*/

int getTimerFlags(int index){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	return Timer_Flag[index];
 80012e8:	4a04      	ldr	r2, [pc, #16]	@ (80012fc <getTimerFlags+0x1c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200000bc 	.word	0x200000bc

08001300 <ignoreTimer>:

void ignoreTimer(int index){
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	Timer_Ignore[index] = 1;
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <ignoreTimer+0x1c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2101      	movs	r1, #1
 800130e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	200000a8 	.word	0x200000a8

08001320 <activeTimer>:

void activeTimer(int index){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	Timer_Ignore[index] = 0;
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <activeTimer+0x1c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2100      	movs	r1, #0
 800132e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	200000a8 	.word	0x200000a8

08001340 <setTimer>:

void setTimer(int index, int duration){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	Timer_Counter[index] = duration/TIMER_CYCLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <setTimer+0x30>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	fb92 f2f3 	sdiv	r2, r2, r3
 8001354:	4907      	ldr	r1, [pc, #28]	@ (8001374 <setTimer+0x34>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Timer_Flag[index] = 0;
 800135c:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <setTimer+0x38>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2100      	movs	r1, #0
 8001362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000014 	.word	0x20000014
 8001374:	200000d0 	.word	0x200000d0
 8001378:	200000bc 	.word	0x200000bc

0800137c <runTimer>:

void runTimer(void){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_TIMER;i++){
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e01e      	b.n	80013c6 <runTimer+0x4a>
		if(Timer_Ignore[i]){
 8001388:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <runTimer+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d114      	bne.n	80013be <runTimer+0x42>
			continue;
		}

		Timer_Counter[i]--;
 8001394:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <runTimer+0x60>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	490f      	ldr	r1, [pc, #60]	@ (80013dc <runTimer+0x60>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(Timer_Counter[i] <= 0){
 80013a6:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <runTimer+0x60>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dc06      	bgt.n	80013c0 <runTimer+0x44>
			Timer_Flag[i] = 1;
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <runTimer+0x64>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2101      	movs	r1, #1
 80013b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80013bc:	e000      	b.n	80013c0 <runTimer+0x44>
			continue;
 80013be:	bf00      	nop
	for(int i=0;i<MAX_TIMER;i++){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	dddd      	ble.n	8001388 <runTimer+0xc>
		}
	}
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	200000a8 	.word	0x200000a8
 80013dc:	200000d0 	.word	0x200000d0
 80013e0:	200000bc 	.word	0x200000bc

080013e4 <doRedGreen_Traffic>:
 *      Author: ADMINS
 */

#include "Traffic.h"

void doRedGreen_Traffic(void){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2108      	movs	r1, #8
 80013ec:	480f      	ldr	r0, [pc, #60]	@ (800142c <doRedGreen_Traffic+0x48>)
 80013ee:	f000 fb8a 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <doRedGreen_Traffic+0x48>)
 80013fa:	f000 fb84 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2120      	movs	r1, #32
 8001402:	480a      	ldr	r0, [pc, #40]	@ (800142c <doRedGreen_Traffic+0x48>)
 8001404:	f000 fb7f 	bl	8001b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2110      	movs	r1, #16
 800140c:	4807      	ldr	r0, [pc, #28]	@ (800142c <doRedGreen_Traffic+0x48>)
 800140e:	f000 fb7a 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	@ 0x40
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <doRedGreen_Traffic+0x48>)
 8001418:	f000 fb75 	bl	8001b06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2180      	movs	r1, #128	@ 0x80
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <doRedGreen_Traffic+0x48>)
 8001422:	f000 fb70 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40010c00 	.word	0x40010c00

08001430 <doRedYellow_Traffic>:

void doRedYellow_Traffic(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <doRedYellow_Traffic+0x20>)
 800143c:	f000 fb63 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2180      	movs	r1, #128	@ 0x80
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <doRedYellow_Traffic+0x20>)
 8001446:	f000 fb5e 	bl	8001b06 <HAL_GPIO_WritePin>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40010c00 	.word	0x40010c00

08001454 <doGreenRed_Traffic>:

void doGreenRed_Traffic(void){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2108      	movs	r1, #8
 800145c:	4809      	ldr	r0, [pc, #36]	@ (8001484 <doGreenRed_Traffic+0x30>)
 800145e:	f000 fb52 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2180      	movs	r1, #128	@ 0x80
 8001466:	4807      	ldr	r0, [pc, #28]	@ (8001484 <doGreenRed_Traffic+0x30>)
 8001468:	f000 fb4d 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2140      	movs	r1, #64	@ 0x40
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <doGreenRed_Traffic+0x30>)
 8001472:	f000 fb48 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2120      	movs	r1, #32
 800147a:	4802      	ldr	r0, [pc, #8]	@ (8001484 <doGreenRed_Traffic+0x30>)
 800147c:	f000 fb43 	bl	8001b06 <HAL_GPIO_WritePin>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010c00 	.word	0x40010c00

08001488 <doYellowRed_Traffic>:

void doYellowRed_Traffic(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2120      	movs	r1, #32
 8001490:	4807      	ldr	r0, [pc, #28]	@ (80014b0 <doYellowRed_Traffic+0x28>)
 8001492:	f000 fb38 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	2110      	movs	r1, #16
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <doYellowRed_Traffic+0x28>)
 800149c:	f000 fb33 	bl	8001b06 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2140      	movs	r1, #64	@ 0x40
 80014a4:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <doYellowRed_Traffic+0x28>)
 80014a6:	f000 fb2e 	bl	8001b06 <HAL_GPIO_WritePin>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b4:	f7ff ff0e 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ba:	490c      	ldr	r1, [pc, #48]	@ (80014ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014d0:	4c09      	ldr	r4, [pc, #36]	@ (80014f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014de:	f001 fb05 	bl	8002aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014e2:	f7ff fd61 	bl	8000fa8 <main>
  bx lr
 80014e6:	4770      	bx	lr
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80014f0:	08002b78 	.word	0x08002b78
  ldr r2, =_sbss
 80014f4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80014f8:	200000e8 	.word	0x200000e8

080014fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_2_IRQHandler>
	...

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_Init+0x28>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_Init+0x28>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f923 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	200f      	movs	r0, #15
 8001518:	f000 f808 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fe4e 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f93b 	bl	80017c6 <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 f903 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000010 	.word	0x20000010
 8001584:	2000001c 	.word	0x2000001c
 8001588:	20000018 	.word	0x20000018

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <HAL_IncTick+0x1c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_IncTick+0x20>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a03      	ldr	r2, [pc, #12]	@ (80015ac <HAL_IncTick+0x20>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	2000001c 	.word	0x2000001c
 80015ac:	200000e4 	.word	0x200000e4

080015b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b02      	ldr	r3, [pc, #8]	@ (80015c0 <HAL_GetTick+0x10>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	200000e4 	.word	0x200000e4

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4906      	ldr	r1, [pc, #24]	@ (800165c <__NVIC_EnableIRQ+0x34>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	@ (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	@ (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	@ 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	@ 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff ff90 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff2d 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff42 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff90 	bl	80016b4 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5f 	bl	8001660 <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff35 	bl	8001628 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa2 	bl	8001718 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b08b      	sub	sp, #44	@ 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e161      	b.n	8001ab8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f4:	2201      	movs	r2, #1
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8150 	bne.w	8001ab2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a97      	ldr	r2, [pc, #604]	@ (8001a74 <HAL_GPIO_Init+0x294>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d05e      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 800181c:	4a95      	ldr	r2, [pc, #596]	@ (8001a74 <HAL_GPIO_Init+0x294>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d875      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001822:	4a95      	ldr	r2, [pc, #596]	@ (8001a78 <HAL_GPIO_Init+0x298>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d058      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001828:	4a93      	ldr	r2, [pc, #588]	@ (8001a78 <HAL_GPIO_Init+0x298>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d86f      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800182e:	4a93      	ldr	r2, [pc, #588]	@ (8001a7c <HAL_GPIO_Init+0x29c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d052      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001834:	4a91      	ldr	r2, [pc, #580]	@ (8001a7c <HAL_GPIO_Init+0x29c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d869      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800183a:	4a91      	ldr	r2, [pc, #580]	@ (8001a80 <HAL_GPIO_Init+0x2a0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d04c      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001840:	4a8f      	ldr	r2, [pc, #572]	@ (8001a80 <HAL_GPIO_Init+0x2a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d863      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001846:	4a8f      	ldr	r2, [pc, #572]	@ (8001a84 <HAL_GPIO_Init+0x2a4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d046      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 800184c:	4a8d      	ldr	r2, [pc, #564]	@ (8001a84 <HAL_GPIO_Init+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d85d      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001852:	2b12      	cmp	r3, #18
 8001854:	d82a      	bhi.n	80018ac <HAL_GPIO_Init+0xcc>
 8001856:	2b12      	cmp	r3, #18
 8001858:	d859      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800185a:	a201      	add	r2, pc, #4	@ (adr r2, 8001860 <HAL_GPIO_Init+0x80>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	080018db 	.word	0x080018db
 8001864:	080018b5 	.word	0x080018b5
 8001868:	080018c7 	.word	0x080018c7
 800186c:	08001909 	.word	0x08001909
 8001870:	0800190f 	.word	0x0800190f
 8001874:	0800190f 	.word	0x0800190f
 8001878:	0800190f 	.word	0x0800190f
 800187c:	0800190f 	.word	0x0800190f
 8001880:	0800190f 	.word	0x0800190f
 8001884:	0800190f 	.word	0x0800190f
 8001888:	0800190f 	.word	0x0800190f
 800188c:	0800190f 	.word	0x0800190f
 8001890:	0800190f 	.word	0x0800190f
 8001894:	0800190f 	.word	0x0800190f
 8001898:	0800190f 	.word	0x0800190f
 800189c:	0800190f 	.word	0x0800190f
 80018a0:	0800190f 	.word	0x0800190f
 80018a4:	080018bd 	.word	0x080018bd
 80018a8:	080018d1 	.word	0x080018d1
 80018ac:	4a76      	ldr	r2, [pc, #472]	@ (8001a88 <HAL_GPIO_Init+0x2a8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b2:	e02c      	b.n	800190e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e029      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	3304      	adds	r3, #4
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e024      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	3308      	adds	r3, #8
 80018cc:	623b      	str	r3, [r7, #32]
          break;
 80018ce:	e01f      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	330c      	adds	r3, #12
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e01a      	b.n	8001910 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e2:	2304      	movs	r3, #4
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e013      	b.n	8001910 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f0:	2308      	movs	r3, #8
 80018f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	611a      	str	r2, [r3, #16]
          break;
 80018fa:	e009      	b.n	8001910 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018fc:	2308      	movs	r3, #8
 80018fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	615a      	str	r2, [r3, #20]
          break;
 8001906:	e003      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e000      	b.n	8001910 <HAL_GPIO_Init+0x130>
          break;
 800190e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2bff      	cmp	r3, #255	@ 0xff
 8001914:	d801      	bhi.n	800191a <HAL_GPIO_Init+0x13a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	e001      	b.n	800191e <HAL_GPIO_Init+0x13e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3304      	adds	r3, #4
 800191e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2bff      	cmp	r3, #255	@ 0xff
 8001924:	d802      	bhi.n	800192c <HAL_GPIO_Init+0x14c>
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	e002      	b.n	8001932 <HAL_GPIO_Init+0x152>
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	3b08      	subs	r3, #8
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	210f      	movs	r1, #15
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	401a      	ands	r2, r3
 8001944:	6a39      	ldr	r1, [r7, #32]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	431a      	orrs	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80a9 	beq.w	8001ab2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001960:	4b4a      	ldr	r3, [pc, #296]	@ (8001a8c <HAL_GPIO_Init+0x2ac>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a49      	ldr	r2, [pc, #292]	@ (8001a8c <HAL_GPIO_Init+0x2ac>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b47      	ldr	r3, [pc, #284]	@ (8001a8c <HAL_GPIO_Init+0x2ac>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001978:	4a45      	ldr	r2, [pc, #276]	@ (8001a90 <HAL_GPIO_Init+0x2b0>)
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001984:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a94 <HAL_GPIO_Init+0x2b4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1e0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3c      	ldr	r2, [pc, #240]	@ (8001a98 <HAL_GPIO_Init+0x2b8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1dc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a3b      	ldr	r2, [pc, #236]	@ (8001a9c <HAL_GPIO_Init+0x2bc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1d8>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e004      	b.n	80019c2 <HAL_GPIO_Init+0x1e2>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e002      	b.n	80019c2 <HAL_GPIO_Init+0x1e2>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_GPIO_Init+0x1e2>
 80019c0:	2300      	movs	r3, #0
 80019c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c4:	f002 0203 	and.w	r2, r2, #3
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	4093      	lsls	r3, r2
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019d2:	492f      	ldr	r1, [pc, #188]	@ (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ec:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	492b      	ldr	r1, [pc, #172]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019fa:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4927      	ldr	r1, [pc, #156]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a14:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	4921      	ldr	r1, [pc, #132]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a22:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	491d      	ldr	r1, [pc, #116]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4917      	ldr	r1, [pc, #92]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4913      	ldr	r1, [pc, #76]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01f      	beq.n	8001aa4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a64:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	490d      	ldr	r1, [pc, #52]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e01f      	b.n	8001ab2 <HAL_GPIO_Init+0x2d2>
 8001a72:	bf00      	nop
 8001a74:	10320000 	.word	0x10320000
 8001a78:	10310000 	.word	0x10310000
 8001a7c:	10220000 	.word	0x10220000
 8001a80:	10210000 	.word	0x10210000
 8001a84:	10120000 	.word	0x10120000
 8001a88:	10110000 	.word	0x10110000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_GPIO_Init+0x2f4>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4909      	ldr	r1, [pc, #36]	@ (8001ad4 <HAL_GPIO_Init+0x2f4>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f47f ae96 	bne.w	80017f4 <HAL_GPIO_Init+0x14>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	372c      	adds	r7, #44	@ 0x2c
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	807b      	strh	r3, [r7, #2]
 8001b12:	4613      	mov	r3, r2
 8001b14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b16:	787b      	ldrb	r3, [r7, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1c:	887a      	ldrh	r2, [r7, #2]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b22:	e003      	b.n	8001b2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	041a      	lsls	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b48:	887a      	ldrh	r2, [r7, #2]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	041a      	lsls	r2, r3, #16
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	400b      	ands	r3, r1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	611a      	str	r2, [r3, #16]
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e272      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8087 	beq.w	8001c96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b88:	4b92      	ldr	r3, [pc, #584]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d00c      	beq.n	8001bae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b94:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d112      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x5e>
 8001ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bac:	d10b      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bae:	4b89      	ldr	r3, [pc, #548]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d06c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x12c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d168      	bne.n	8001c94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e24c      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x76>
 8001bd0:	4b80      	ldr	r3, [pc, #512]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a7f      	ldr	r2, [pc, #508]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	e02e      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x98>
 8001be6:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a7a      	ldr	r2, [pc, #488]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b78      	ldr	r3, [pc, #480]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a77      	ldr	r2, [pc, #476]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e01d      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0xbc>
 8001c0a:	4b72      	ldr	r3, [pc, #456]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a71      	ldr	r2, [pc, #452]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001c24:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b68      	ldr	r3, [pc, #416]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a67      	ldr	r2, [pc, #412]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fcb4 	bl	80015b0 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fcb0 	bl	80015b0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e200      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0xe4>
 8001c6a:	e014      	b.n	8001c96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fca0 	bl	80015b0 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fc9c 	bl	80015b0 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	@ 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1ec      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x10c>
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cae:	4b49      	ldr	r3, [pc, #292]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x18c>
 8001cba:	4b46      	ldr	r3, [pc, #280]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d116      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x176>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e1c0      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cde:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4939      	ldr	r1, [pc, #228]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	e03a      	b.n	8001d6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfc:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fc55 	bl	80015b0 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fc51 	bl	80015b0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1a1      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4927      	ldr	r1, [pc, #156]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	e015      	b.n	8001d6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc34 	bl	80015b0 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fc30 	bl	80015b0 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e180      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d03a      	beq.n	8001dec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d019      	beq.n	8001db2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <HAL_RCC_OscConfig+0x274>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7ff fc14 	bl	80015b0 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fc10 	bl	80015b0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e160      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001daa:	2001      	movs	r0, #1
 8001dac:	f000 fa9c 	bl	80022e8 <RCC_Delay>
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_RCC_OscConfig+0x274>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fbfa 	bl	80015b0 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbe:	e00f      	b.n	8001de0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fbf6 	bl	80015b0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d908      	bls.n	8001de0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e146      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	42420000 	.word	0x42420000
 8001ddc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de0:	4b92      	ldr	r3, [pc, #584]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e9      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a6 	beq.w	8001f46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b8b      	ldr	r3, [pc, #556]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10d      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b88      	ldr	r3, [pc, #544]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a87      	ldr	r2, [pc, #540]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	61d3      	str	r3, [r2, #28]
 8001e16:	4b85      	ldr	r3, [pc, #532]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b82      	ldr	r3, [pc, #520]	@ (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b7f      	ldr	r3, [pc, #508]	@ (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7e      	ldr	r2, [pc, #504]	@ (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fbb7 	bl	80015b0 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7ff fbb3 	bl	80015b0 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	@ 0x64
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e103      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b75      	ldr	r3, [pc, #468]	@ (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x312>
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a6e      	ldr	r2, [pc, #440]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e02d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x334>
 8001e82:	4b6a      	ldr	r3, [pc, #424]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a69      	ldr	r2, [pc, #420]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	4b67      	ldr	r3, [pc, #412]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a66      	ldr	r2, [pc, #408]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	e01c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d10c      	bne.n	8001ebe <HAL_RCC_OscConfig+0x356>
 8001ea4:	4b61      	ldr	r3, [pc, #388]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a60      	ldr	r2, [pc, #384]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a5d      	ldr	r2, [pc, #372]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	e00b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a5a      	ldr	r2, [pc, #360]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	4b58      	ldr	r3, [pc, #352]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a57      	ldr	r2, [pc, #348]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d015      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb67 	bl	80015b0 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff fb63 	bl	80015b0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0b1      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	4b4b      	ldr	r3, [pc, #300]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ee      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x37e>
 8001f08:	e014      	b.n	8001f34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fb51 	bl	80015b0 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7ff fb4d 	bl	80015b0 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e09b      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	4b40      	ldr	r3, [pc, #256]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1ee      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a3b      	ldr	r2, [pc, #236]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8087 	beq.w	800205e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f50:	4b36      	ldr	r3, [pc, #216]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d061      	beq.n	8002020 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d146      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f64:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fb21 	bl	80015b0 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff fb1d 	bl	80015b0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e06d      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	4b29      	ldr	r3, [pc, #164]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f0      	bne.n	8001f72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f98:	d108      	bne.n	8001fac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4921      	ldr	r1, [pc, #132]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fac:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a19      	ldr	r1, [r3, #32]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	491b      	ldr	r1, [pc, #108]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff faf1 	bl	80015b0 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff faed 	bl	80015b0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e03d      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x46a>
 8001ff0:	e035      	b.n	800205e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fada 	bl	80015b0 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff fad6 	bl	80015b0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e026      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x498>
 800201e:	e01e      	b.n	800205e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e019      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_OscConfig+0x500>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0d0      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b6a      	ldr	r3, [pc, #424]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d910      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b67      	ldr	r3, [pc, #412]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	4965      	ldr	r1, [pc, #404]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b63      	ldr	r3, [pc, #396]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b8      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	4b59      	ldr	r3, [pc, #356]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a58      	ldr	r2, [pc, #352]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e0:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	494d      	ldr	r1, [pc, #308]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d040      	beq.n	800218c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e073      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	4b3d      	ldr	r3, [pc, #244]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06b      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	4b39      	ldr	r3, [pc, #228]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4936      	ldr	r1, [pc, #216]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7ff fa28 	bl	80015b0 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7ff fa24 	bl	80015b0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e053      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 020c 	and.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	429a      	cmp	r2, r3
 800218a:	d1eb      	bne.n	8002164 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b27      	ldr	r3, [pc, #156]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d210      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4922      	ldr	r1, [pc, #136]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e032      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4916      	ldr	r1, [pc, #88]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e6:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	490e      	ldr	r1, [pc, #56]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fa:	f000 f821 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	490a      	ldr	r1, [pc, #40]	@ (8002234 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <HAL_RCC_ClockConfig+0x1cc>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_ClockConfig+0x1d0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff f986 	bl	800152c <HAL_InitTick>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40022000 	.word	0x40022000
 8002230:	40021000 	.word	0x40021000
 8002234:	08002b4c 	.word	0x08002b4c
 8002238:	20000010 	.word	0x20000010
 800223c:	20000018 	.word	0x20000018

08002240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b04      	cmp	r3, #4
 8002268:	d002      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x30>
 800226a:	2b08      	cmp	r3, #8
 800226c:	d003      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x36>
 800226e:	e027      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002272:	613b      	str	r3, [r7, #16]
      break;
 8002274:	e027      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	0c9b      	lsrs	r3, r3, #18
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	4a17      	ldr	r2, [pc, #92]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0c5b      	lsrs	r3, r3, #17
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a0d      	ldr	r2, [pc, #52]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022a2:	fb03 f202 	mul.w	r2, r3, r2
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e004      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	613b      	str	r3, [r7, #16]
      break;
 80022be:	e002      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022c2:	613b      	str	r3, [r7, #16]
      break;
 80022c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c6:	693b      	ldr	r3, [r7, #16]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	007a1200 	.word	0x007a1200
 80022dc:	08002b5c 	.word	0x08002b5c
 80022e0:	08002b6c 	.word	0x08002b6c
 80022e4:	003d0900 	.word	0x003d0900

080022e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f0:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <RCC_Delay+0x34>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <RCC_Delay+0x38>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a5b      	lsrs	r3, r3, #9
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002304:	bf00      	nop
  }
  while (Delay --);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f9      	bne.n	8002304 <RCC_Delay+0x1c>
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000010 	.word	0x20000010
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e041      	b.n	80023ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe ff68 	bl	8001220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f000 fa56 	bl	8002814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d001      	beq.n	80023dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e035      	b.n	8002448 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <HAL_TIM_Base_Start_IT+0x90>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_TIM_Base_Start_IT+0x4e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002406:	d004      	beq.n	8002412 <HAL_TIM_Base_Start_IT+0x4e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <HAL_TIM_Base_Start_IT+0x94>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d111      	bne.n	8002436 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b06      	cmp	r3, #6
 8002422:	d010      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002434:	e007      	b.n	8002446 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40000400 	.word	0x40000400

0800245c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d020      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01b      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0202 	mvn.w	r2, #2
 8002490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f998 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f98b 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f99a 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d020      	beq.n	800250c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0204 	mvn.w	r2, #4
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f972 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f965 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f974 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d020      	beq.n	8002558 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0208 	mvn.w	r2, #8
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f94c 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f93f 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f94e 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d020      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0210 	mvn.w	r2, #16
 8002574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2208      	movs	r2, #8
 800257a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f926 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f919 	bl	80027ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f928 	bl	80027ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0201 	mvn.w	r2, #1
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fcde 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00c      	beq.n	80025ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fa6f 	bl	8002aca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8f8 	bl	8002800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0220 	mvn.w	r2, #32
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa42 	bl	8002ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_TIM_ConfigClockSource+0x1c>
 8002654:	2302      	movs	r3, #2
 8002656:	e0b4      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x186>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800267e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002690:	d03e      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0xd4>
 8002692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002696:	f200 8087 	bhi.w	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800269e:	f000 8086 	beq.w	80027ae <HAL_TIM_ConfigClockSource+0x172>
 80026a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a6:	d87f      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b70      	cmp	r3, #112	@ 0x70
 80026aa:	d01a      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0xa6>
 80026ac:	2b70      	cmp	r3, #112	@ 0x70
 80026ae:	d87b      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b60      	cmp	r3, #96	@ 0x60
 80026b2:	d050      	beq.n	8002756 <HAL_TIM_ConfigClockSource+0x11a>
 80026b4:	2b60      	cmp	r3, #96	@ 0x60
 80026b6:	d877      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b50      	cmp	r3, #80	@ 0x50
 80026ba:	d03c      	beq.n	8002736 <HAL_TIM_ConfigClockSource+0xfa>
 80026bc:	2b50      	cmp	r3, #80	@ 0x50
 80026be:	d873      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b40      	cmp	r3, #64	@ 0x40
 80026c2:	d058      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x13a>
 80026c4:	2b40      	cmp	r3, #64	@ 0x40
 80026c6:	d86f      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b30      	cmp	r3, #48	@ 0x30
 80026ca:	d064      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x15a>
 80026cc:	2b30      	cmp	r3, #48	@ 0x30
 80026ce:	d86b      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d060      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x15a>
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d867      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05c      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x15a>
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d05a      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x15a>
 80026e0:	e062      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026f2:	f000 f96a 	bl	80029ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	609a      	str	r2, [r3, #8]
      break;
 800270e:	e04f      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002720:	f000 f953 	bl	80029ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002732:	609a      	str	r2, [r3, #8]
      break;
 8002734:	e03c      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	461a      	mov	r2, r3
 8002744:	f000 f8ca 	bl	80028dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2150      	movs	r1, #80	@ 0x50
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f921 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 8002754:	e02c      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002762:	461a      	mov	r2, r3
 8002764:	f000 f8e8 	bl	8002938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2160      	movs	r1, #96	@ 0x60
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f911 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 8002774:	e01c      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002782:	461a      	mov	r2, r3
 8002784:	f000 f8aa 	bl	80028dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2140      	movs	r1, #64	@ 0x40
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f901 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 8002794:	e00c      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f000 f8f8 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 80027a6:	e003      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e000      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
	...

08002814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a2b      	ldr	r2, [pc, #172]	@ (80028d4 <TIM_Base_SetConfig+0xc0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0x28>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0x28>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <TIM_Base_SetConfig+0xc4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a20      	ldr	r2, [pc, #128]	@ (80028d4 <TIM_Base_SetConfig+0xc0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_Base_SetConfig+0x52>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285c:	d003      	beq.n	8002866 <TIM_Base_SetConfig+0x52>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <TIM_Base_SetConfig+0xc4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d108      	bne.n	8002878 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800286c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <TIM_Base_SetConfig+0xc0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f023 0201 	bic.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]
  }
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400

080028dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0201 	bic.w	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f023 030a 	bic.w	r3, r3, #10
 8002918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f023 0210 	bic.w	r2, r3, #16
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	031b      	lsls	r3, r3, #12
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002974:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f043 0307 	orr.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	021a      	lsls	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	609a      	str	r2, [r3, #8]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e041      	b.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a14      	ldr	r2, [pc, #80]	@ (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d009      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a10      	ldr	r2, [pc, #64]	@ (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10c      	bne.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40000400 	.word	0x40000400

08002ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <memset>:
 8002adc:	4603      	mov	r3, r0
 8002ade:	4402      	add	r2, r0
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d100      	bne.n	8002ae6 <memset+0xa>
 8002ae4:	4770      	bx	lr
 8002ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aea:	e7f9      	b.n	8002ae0 <memset+0x4>

08002aec <__libc_init_array>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	2600      	movs	r6, #0
 8002af0:	4d0c      	ldr	r5, [pc, #48]	@ (8002b24 <__libc_init_array+0x38>)
 8002af2:	4c0d      	ldr	r4, [pc, #52]	@ (8002b28 <__libc_init_array+0x3c>)
 8002af4:	1b64      	subs	r4, r4, r5
 8002af6:	10a4      	asrs	r4, r4, #2
 8002af8:	42a6      	cmp	r6, r4
 8002afa:	d109      	bne.n	8002b10 <__libc_init_array+0x24>
 8002afc:	f000 f81a 	bl	8002b34 <_init>
 8002b00:	2600      	movs	r6, #0
 8002b02:	4d0a      	ldr	r5, [pc, #40]	@ (8002b2c <__libc_init_array+0x40>)
 8002b04:	4c0a      	ldr	r4, [pc, #40]	@ (8002b30 <__libc_init_array+0x44>)
 8002b06:	1b64      	subs	r4, r4, r5
 8002b08:	10a4      	asrs	r4, r4, #2
 8002b0a:	42a6      	cmp	r6, r4
 8002b0c:	d105      	bne.n	8002b1a <__libc_init_array+0x2e>
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b14:	4798      	blx	r3
 8002b16:	3601      	adds	r6, #1
 8002b18:	e7ee      	b.n	8002af8 <__libc_init_array+0xc>
 8002b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1e:	4798      	blx	r3
 8002b20:	3601      	adds	r6, #1
 8002b22:	e7f2      	b.n	8002b0a <__libc_init_array+0x1e>
 8002b24:	08002b70 	.word	0x08002b70
 8002b28:	08002b70 	.word	0x08002b70
 8002b2c:	08002b70 	.word	0x08002b70
 8002b30:	08002b74 	.word	0x08002b74

08002b34 <_init>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr

08002b40 <_fini>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	bf00      	nop
 8002b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b46:	bc08      	pop	{r3}
 8002b48:	469e      	mov	lr, r3
 8002b4a:	4770      	bx	lr
