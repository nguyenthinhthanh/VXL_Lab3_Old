
Lab3_Old.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800296c  0800296c  0000396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002990  08002990  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002990  08002990  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002990  08002990  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002990  08002990  00003990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002994  08002994  00003994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002998  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000014  080029ac  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080029ac  000040b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008530  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdd  00000000  00000000  0000c56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0000e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000817  00000000  00000000  0000ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ee1  00000000  00000000  0000f40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c82d  00000000  00000000  000262f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008275f  00000000  00000000  00032b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b527c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c0  00000000  00000000  000b52c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b7c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002954 	.word	0x08002954

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002954 	.word	0x08002954

0800014c <setEnviromentStateInit>:

/*Default Mode*/
int FSM_State;
int first = 1;

void setEnviromentStateInit(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 8000150:	4b0d      	ldr	r3, [pc, #52]	@ (8000188 <setEnviromentStateInit+0x3c>)
 8000152:	2205      	movs	r2, #5
 8000154:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 8000156:	4b0d      	ldr	r3, [pc, #52]	@ (800018c <setEnviromentStateInit+0x40>)
 8000158:	2203      	movs	r2, #3
 800015a:	601a      	str	r2, [r3, #0]
	/*7Seg display immediate*/
	display7SEG_13(Led13_Count);
 800015c:	4b0a      	ldr	r3, [pc, #40]	@ (8000188 <setEnviromentStateInit+0x3c>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4618      	mov	r0, r3
 8000162:	f000 fafb 	bl	800075c <display7SEG_13>
	display7SEG_24(Led24_Count);
 8000166:	4b09      	ldr	r3, [pc, #36]	@ (800018c <setEnviromentStateInit+0x40>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	4618      	mov	r0, r3
 800016c:	f000 fc86 	bl	8000a7c <display7SEG_24>

	/*Run immediate so delay when first time is 0*/
	setTimer(DELAY_TIMER, 0);
 8000170:	2100      	movs	r1, #0
 8000172:	2000      	movs	r0, #0
 8000174:	f001 f816 	bl	80011a4 <setTimer>
	setEnviromentState0();
 8000178:	f000 f80c 	bl	8000194 <setEnviromentState0>
	FSM_State = RED_GREEN_STATE_MODE1;
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <setEnviromentStateInit+0x44>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	2000004c 	.word	0x2000004c
 800018c:	20000050 	.word	0x20000050
 8000190:	20000030 	.word	0x20000030

08000194 <setEnviromentState0>:

void setEnviromentState0(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 8000198:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <setEnviromentState0+0x20>)
 800019a:	2205      	movs	r2, #5
 800019c:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 800019e:	4b06      	ldr	r3, [pc, #24]	@ (80001b8 <setEnviromentState0+0x24>)
 80001a0:	2203      	movs	r2, #3
 80001a2:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 3000);
 80001a4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80001a8:	2001      	movs	r0, #1
 80001aa:	f000 fffb 	bl	80011a4 <setTimer>
}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	2000004c 	.word	0x2000004c
 80001b8:	20000050 	.word	0x20000050

080001bc <setEnviromentState1>:

void setEnviromentState1(void){
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
	Led24_Count = 2;
 80001c0:	4b04      	ldr	r3, [pc, #16]	@ (80001d4 <setEnviromentState1+0x18>)
 80001c2:	2202      	movs	r2, #2
 80001c4:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 80001c6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80001ca:	2001      	movs	r0, #1
 80001cc:	f000 ffea 	bl	80011a4 <setTimer>
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000050 	.word	0x20000050

080001d8 <setEnviromentState2>:
void setEnviromentState2(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	Led13_Count = 3;
 80001dc:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <setEnviromentState2+0x20>)
 80001de:	2203      	movs	r2, #3
 80001e0:	601a      	str	r2, [r3, #0]
	Led24_Count = 5;
 80001e2:	4b06      	ldr	r3, [pc, #24]	@ (80001fc <setEnviromentState2+0x24>)
 80001e4:	2205      	movs	r2, #5
 80001e6:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 3000);
 80001e8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 ffd9 	bl	80011a4 <setTimer>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000004c 	.word	0x2000004c
 80001fc:	20000050 	.word	0x20000050

08000200 <setEnviromentState3>:

void setEnviromentState3(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	Led13_Count = 2;
 8000204:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <setEnviromentState3+0x18>)
 8000206:	2202      	movs	r2, #2
 8000208:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 800020a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800020e:	2001      	movs	r0, #1
 8000210:	f000 ffc8 	bl	80011a4 <setTimer>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	2000004c 	.word	0x2000004c

0800021c <setEnviromentState4>:

void setEnviromentState4(void){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <setEnviromentState5>:

void setEnviromentState5(void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <doState0>:

void setEnviromentState6(void){

}

void doState0(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	doRedGreen_Traffic();
 8000238:	f000 fffc 	bl	8001234 <doRedGreen_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 800023c:	2000      	movs	r0, #0
 800023e:	f000 ffa1 	bl	8001184 <getTimerFlags>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d018      	beq.n	800027a <doState0+0x46>

		/*Just for debug
		HAL_GPIO_WritePin(CHECK_GPIO_Port, CHECK_Pin, GPIO_PIN_RESET);*/
		display7SEG_13(Led13_Count);
 8000248:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <doState0+0x4c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fa85 	bl	800075c <display7SEG_13>
		display7SEG_24(Led24_Count);
 8000252:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <doState0+0x50>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fc10 	bl	8000a7c <display7SEG_24>

		Led13_Count--;
 800025c:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <doState0+0x4c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3b01      	subs	r3, #1
 8000262:	4a07      	ldr	r2, [pc, #28]	@ (8000280 <doState0+0x4c>)
 8000264:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <doState0+0x50>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a05      	ldr	r2, [pc, #20]	@ (8000284 <doState0+0x50>)
 800026e:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 8000270:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000274:	2000      	movs	r0, #0
 8000276:	f000 ff95 	bl	80011a4 <setTimer>
	}
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000004c 	.word	0x2000004c
 8000284:	20000050 	.word	0x20000050

08000288 <doState1>:

void doState1(void){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	doRedYellow_Traffic();
 800028c:	f000 fff8 	bl	8001280 <doRedYellow_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000290:	2000      	movs	r0, #0
 8000292:	f000 ff77 	bl	8001184 <getTimerFlags>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d018      	beq.n	80002ce <doState1+0x46>
		display7SEG_13(Led13_Count);
 800029c:	4b0d      	ldr	r3, [pc, #52]	@ (80002d4 <doState1+0x4c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fa5b 	bl	800075c <display7SEG_13>
		display7SEG_24(Led24_Count);
 80002a6:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <doState1+0x50>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fbe6 	bl	8000a7c <display7SEG_24>

		Led13_Count--;
 80002b0:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <doState1+0x4c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	4a07      	ldr	r2, [pc, #28]	@ (80002d4 <doState1+0x4c>)
 80002b8:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 80002ba:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <doState1+0x50>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3b01      	subs	r3, #1
 80002c0:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <doState1+0x50>)
 80002c2:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 80002c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002c8:	2000      	movs	r0, #0
 80002ca:	f000 ff6b 	bl	80011a4 <setTimer>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000004c 	.word	0x2000004c
 80002d8:	20000050 	.word	0x20000050

080002dc <doState2>:

void doState2(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	doGreenRed_Traffic();
 80002e0:	f000 ffe0 	bl	80012a4 <doGreenRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 ff4d 	bl	8001184 <getTimerFlags>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d018      	beq.n	8000322 <doState2+0x46>
		display7SEG_13(Led13_Count);
 80002f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <doState2+0x4c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fa31 	bl	800075c <display7SEG_13>
		display7SEG_24(Led24_Count);
 80002fa:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <doState2+0x50>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fbbc 	bl	8000a7c <display7SEG_24>

		Led13_Count--;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <doState2+0x4c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <doState2+0x4c>)
 800030c:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 800030e:	4b07      	ldr	r3, [pc, #28]	@ (800032c <doState2+0x50>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	4a05      	ldr	r2, [pc, #20]	@ (800032c <doState2+0x50>)
 8000316:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 8000318:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800031c:	2000      	movs	r0, #0
 800031e:	f000 ff41 	bl	80011a4 <setTimer>
	}
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000004c 	.word	0x2000004c
 800032c:	20000050 	.word	0x20000050

08000330 <doState3>:

void doState3(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	doYellowRed_Traffic();
 8000334:	f000 ffd0 	bl	80012d8 <doYellowRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000338:	2000      	movs	r0, #0
 800033a:	f000 ff23 	bl	8001184 <getTimerFlags>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d018      	beq.n	8000376 <doState3+0x46>
		display7SEG_13(Led13_Count);
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <doState3+0x4c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fa07 	bl	800075c <display7SEG_13>
		display7SEG_24(Led24_Count);
 800034e:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <doState3+0x50>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fb92 	bl	8000a7c <display7SEG_24>

		Led13_Count--;
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <doState3+0x4c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	3b01      	subs	r3, #1
 800035e:	4a07      	ldr	r2, [pc, #28]	@ (800037c <doState3+0x4c>)
 8000360:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 8000362:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <doState3+0x50>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	3b01      	subs	r3, #1
 8000368:	4a05      	ldr	r2, [pc, #20]	@ (8000380 <doState3+0x50>)
 800036a:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 800036c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000370:	2000      	movs	r0, #0
 8000372:	f000 ff17 	bl	80011a4 <setTimer>
	}
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000004c 	.word	0x2000004c
 8000380:	20000050 	.word	0x20000050

08000384 <doState4>:

void doState4(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	display7SEG_13(4);
 8000388:	2004      	movs	r0, #4
 800038a:	f000 f9e7 	bl	800075c <display7SEG_13>
	if(buttonState[1] == BUTTON_PRESSED){
 800038e:	4b04      	ldr	r3, [pc, #16]	@ (80003a0 <doState4+0x1c>)
 8000390:	785b      	ldrb	r3, [r3, #1]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d102      	bne.n	800039c <doState4+0x18>
		/*Increase time duration by one*/
		FSM_State = NORMAL_STATE_MODE_2;
 8000396:	4b03      	ldr	r3, [pc, #12]	@ (80003a4 <doState4+0x20>)
 8000398:	2204      	movs	r2, #4
 800039a:	601a      	str	r2, [r3, #0]
	}

	if(buttonState[2] == BUTTON_PRESSED){
		/*Update blinking time duration*/
	}
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000034 	.word	0x20000034
 80003a4:	20000030 	.word	0x20000030

080003a8 <doState5>:

void doState5(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	display7SEG_13(5);
 80003ac:	2005      	movs	r0, #5
 80003ae:	f000 f9d5 	bl	800075c <display7SEG_13>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <doState6>:

void doState6(void){
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0
	display7SEG_13(6);
 80003ba:	2006      	movs	r0, #6
 80003bc:	f000 f9ce 	bl	800075c <display7SEG_13>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <runFSM>:


void runFSM(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	switch(FSM_State){
 80003c8:	4b53      	ldr	r3, [pc, #332]	@ (8000518 <runFSM+0x154>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b06      	cmp	r3, #6
 80003ce:	f200 8091 	bhi.w	80004f4 <runFSM+0x130>
 80003d2:	a201      	add	r2, pc, #4	@ (adr r2, 80003d8 <runFSM+0x14>)
 80003d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d8:	080003f5 	.word	0x080003f5
 80003dc:	08000423 	.word	0x08000423
 80003e0:	08000451 	.word	0x08000451
 80003e4:	0800047f 	.word	0x0800047f
 80003e8:	080004ad 	.word	0x080004ad
 80003ec:	080004c5 	.word	0x080004c5
 80003f0:	080004dd 	.word	0x080004dd
	case RED_GREEN_STATE_MODE1:
		doState0();
 80003f4:	f7ff ff1e 	bl	8000234 <doState0>

		if(getTimerFlags(TRAFFIC_TIMER)){
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 fec3 	bl	8001184 <getTimerFlags>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d004      	beq.n	800040e <runFSM+0x4a>
			setEnviromentState1();
 8000404:	f7ff feda 	bl	80001bc <setEnviromentState1>
			FSM_State = RED_YELLOW_STATE_MODE1;
 8000408:	4b43      	ldr	r3, [pc, #268]	@ (8000518 <runFSM+0x154>)
 800040a:	2201      	movs	r2, #1
 800040c:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 800040e:	4b43      	ldr	r3, [pc, #268]	@ (800051c <runFSM+0x158>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d170      	bne.n	80004f8 <runFSM+0x134>
			setEnviromentState4();	/*Mode 2*/
 8000416:	f7ff ff01 	bl	800021c <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 800041a:	4b3f      	ldr	r3, [pc, #252]	@ (8000518 <runFSM+0x154>)
 800041c:	2204      	movs	r2, #4
 800041e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000420:	e06a      	b.n	80004f8 <runFSM+0x134>
	case RED_YELLOW_STATE_MODE1:
		doState1();
 8000422:	f7ff ff31 	bl	8000288 <doState1>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000426:	2001      	movs	r0, #1
 8000428:	f000 feac 	bl	8001184 <getTimerFlags>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d004      	beq.n	800043c <runFSM+0x78>
			setEnviromentState2();
 8000432:	f7ff fed1 	bl	80001d8 <setEnviromentState2>
			FSM_State = GREEN_RED_STATE_MODE1;
 8000436:	4b38      	ldr	r3, [pc, #224]	@ (8000518 <runFSM+0x154>)
 8000438:	2202      	movs	r2, #2
 800043a:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 800043c:	4b37      	ldr	r3, [pc, #220]	@ (800051c <runFSM+0x158>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d15b      	bne.n	80004fc <runFSM+0x138>
			setEnviromentState4();	/*Mode 2*/
 8000444:	f7ff feea 	bl	800021c <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 8000448:	4b33      	ldr	r3, [pc, #204]	@ (8000518 <runFSM+0x154>)
 800044a:	2204      	movs	r2, #4
 800044c:	601a      	str	r2, [r3, #0]
		}
		break;
 800044e:	e055      	b.n	80004fc <runFSM+0x138>
	case GREEN_RED_STATE_MODE1:
		doState2();
 8000450:	f7ff ff44 	bl	80002dc <doState2>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000454:	2001      	movs	r0, #1
 8000456:	f000 fe95 	bl	8001184 <getTimerFlags>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d004      	beq.n	800046a <runFSM+0xa6>
			setEnviromentState3();
 8000460:	f7ff fece 	bl	8000200 <setEnviromentState3>
			FSM_State = YELLOW_RED_STATE_MODE1;
 8000464:	4b2c      	ldr	r3, [pc, #176]	@ (8000518 <runFSM+0x154>)
 8000466:	2203      	movs	r2, #3
 8000468:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 800046a:	4b2c      	ldr	r3, [pc, #176]	@ (800051c <runFSM+0x158>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d146      	bne.n	8000500 <runFSM+0x13c>
			setEnviromentState4();	/*Mode 2*/
 8000472:	f7ff fed3 	bl	800021c <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 8000476:	4b28      	ldr	r3, [pc, #160]	@ (8000518 <runFSM+0x154>)
 8000478:	2204      	movs	r2, #4
 800047a:	601a      	str	r2, [r3, #0]
		}
		break;
 800047c:	e040      	b.n	8000500 <runFSM+0x13c>
	case YELLOW_RED_STATE_MODE1:
		doState3();
 800047e:	f7ff ff57 	bl	8000330 <doState3>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000482:	2001      	movs	r0, #1
 8000484:	f000 fe7e 	bl	8001184 <getTimerFlags>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d004      	beq.n	8000498 <runFSM+0xd4>
			setEnviromentState0();
 800048e:	f7ff fe81 	bl	8000194 <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 8000492:	4b21      	ldr	r3, [pc, #132]	@ (8000518 <runFSM+0x154>)
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 8000498:	4b20      	ldr	r3, [pc, #128]	@ (800051c <runFSM+0x158>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d131      	bne.n	8000504 <runFSM+0x140>
			setEnviromentState4();	/*Mode 2*/
 80004a0:	f7ff febc 	bl	800021c <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 80004a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000518 <runFSM+0x154>)
 80004a6:	2204      	movs	r2, #4
 80004a8:	601a      	str	r2, [r3, #0]
		}
		break;
 80004aa:	e02b      	b.n	8000504 <runFSM+0x140>
	case NORMAL_STATE_MODE_2:
		doState4();
 80004ac:	f7ff ff6a 	bl	8000384 <doState4>

		if(buttonState[0] == BUTTON_PRESSED){
 80004b0:	4b1a      	ldr	r3, [pc, #104]	@ (800051c <runFSM+0x158>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d127      	bne.n	8000508 <runFSM+0x144>
			setEnviromentState5();	/*Mode 3*/
 80004b8:	f7ff feb6 	bl	8000228 <setEnviromentState5>
			FSM_State = NORMAL_STATE_MODE_3;
 80004bc:	4b16      	ldr	r3, [pc, #88]	@ (8000518 <runFSM+0x154>)
 80004be:	2205      	movs	r2, #5
 80004c0:	601a      	str	r2, [r3, #0]
		}
		break;
 80004c2:	e021      	b.n	8000508 <runFSM+0x144>
	case NORMAL_STATE_MODE_3:
		doState5();
 80004c4:	f7ff ff70 	bl	80003a8 <doState5>

		if(buttonState[0] == BUTTON_PRESSED){
 80004c8:	4b14      	ldr	r3, [pc, #80]	@ (800051c <runFSM+0x158>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d11d      	bne.n	800050c <runFSM+0x148>
			setEnviromentState5();	/*Mode 4*/
 80004d0:	f7ff feaa 	bl	8000228 <setEnviromentState5>
			FSM_State = NORMAL_STATE_MODE_4;
 80004d4:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <runFSM+0x154>)
 80004d6:	2206      	movs	r2, #6
 80004d8:	601a      	str	r2, [r3, #0]
		}
		break;
 80004da:	e017      	b.n	800050c <runFSM+0x148>
	case NORMAL_STATE_MODE_4:
		doState6();
 80004dc:	f7ff ff6b 	bl	80003b6 <doState6>

		if(buttonState[0] == BUTTON_PRESSED){
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <runFSM+0x158>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d113      	bne.n	8000510 <runFSM+0x14c>
			setEnviromentState0();	/*Mode 1*/
 80004e8:	f7ff fe54 	bl	8000194 <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 80004ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <runFSM+0x154>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
		}
		break;
 80004f2:	e00d      	b.n	8000510 <runFSM+0x14c>
	default:
		break;
 80004f4:	bf00      	nop
 80004f6:	e00c      	b.n	8000512 <runFSM+0x14e>
		break;
 80004f8:	bf00      	nop
 80004fa:	e00a      	b.n	8000512 <runFSM+0x14e>
		break;
 80004fc:	bf00      	nop
 80004fe:	e008      	b.n	8000512 <runFSM+0x14e>
		break;
 8000500:	bf00      	nop
 8000502:	e006      	b.n	8000512 <runFSM+0x14e>
		break;
 8000504:	bf00      	nop
 8000506:	e004      	b.n	8000512 <runFSM+0x14e>
		break;
 8000508:	bf00      	nop
 800050a:	e002      	b.n	8000512 <runFSM+0x14e>
		break;
 800050c:	bf00      	nop
 800050e:	e000      	b.n	8000512 <runFSM+0x14e>
		break;
 8000510:	bf00      	nop
	}

	return;
 8000512:	bf00      	nop
}
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000030 	.word	0x20000030
 800051c:	20000034 	.word	0x20000034

08000520 <fsm_for_input_processing>:

#include "input_processing.h"

enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED,BUTTON_RELEASED,BUTTON_RELEASED};

void fsm_for_input_processing(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	for(int i=0;i<N0_OF_BUTTONS;i++){
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	e04c      	b.n	80005c6 <fsm_for_input_processing+0xa6>
		switch(buttonState[i]){
 800052c:	4a2a      	ldr	r2, [pc, #168]	@ (80005d8 <fsm_for_input_processing+0xb8>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b02      	cmp	r3, #2
 8000536:	d030      	beq.n	800059a <fsm_for_input_processing+0x7a>
 8000538:	2b02      	cmp	r3, #2
 800053a:	dc41      	bgt.n	80005c0 <fsm_for_input_processing+0xa0>
 800053c:	2b00      	cmp	r3, #0
 800053e:	d002      	beq.n	8000546 <fsm_for_input_processing+0x26>
 8000540:	2b01      	cmp	r3, #1
 8000542:	d00e      	beq.n	8000562 <fsm_for_input_processing+0x42>
 8000544:	e03c      	b.n	80005c0 <fsm_for_input_processing+0xa0>
		case BUTTON_RELEASED:
			if(is_button_pressed(i)){
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f846 	bl	80005dc <is_button_pressed>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d02f      	beq.n	80005b6 <fsm_for_input_processing+0x96>
				buttonState[i] = BUTTON_PRESSED;
 8000556:	4a20      	ldr	r2, [pc, #128]	@ (80005d8 <fsm_for_input_processing+0xb8>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
				// Increase value PORTA by one
			}
			break;
 8000560:	e029      	b.n	80005b6 <fsm_for_input_processing+0x96>
		case BUTTON_PRESSED:
			if(!is_button_pressed(i)){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f838 	bl	80005dc <is_button_pressed>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d105      	bne.n	800057e <fsm_for_input_processing+0x5e>
				buttonState[i] = BUTTON_RELEASED;
 8000572:	4a19      	ldr	r2, [pc, #100]	@ (80005d8 <fsm_for_input_processing+0xb8>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
					// Set timer 500ms for auto increase
					//setTimer(AUTO_INCREASE, 500);
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 800057c:	e01d      	b.n	80005ba <fsm_for_input_processing+0x9a>
				if(is_button_pressed_1s(i)){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f844 	bl	8000610 <is_button_pressed_1s>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d015      	beq.n	80005ba <fsm_for_input_processing+0x9a>
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800058e:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <fsm_for_input_processing+0xb8>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	2202      	movs	r2, #2
 8000596:	701a      	strb	r2, [r3, #0]
			break;
 8000598:	e00f      	b.n	80005ba <fsm_for_input_processing+0x9a>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed(i)){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f81c 	bl	80005dc <is_button_pressed>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <fsm_for_input_processing+0x9e>
				buttonState[i] = BUTTON_RELEASED;
 80005aa:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <fsm_for_input_processing+0xb8>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
				/*if(getTimerFlags(AUTO_INCREASE)){
					// Increase value PORTA by one
					//setTimer(AUTO_INCREASE, 500);
				}*/
			}
			break;
 80005b4:	e003      	b.n	80005be <fsm_for_input_processing+0x9e>
			break;
 80005b6:	bf00      	nop
 80005b8:	e002      	b.n	80005c0 <fsm_for_input_processing+0xa0>
			break;
 80005ba:	bf00      	nop
 80005bc:	e000      	b.n	80005c0 <fsm_for_input_processing+0xa0>
			break;
 80005be:	bf00      	nop
	for(int i=0;i<N0_OF_BUTTONS;i++){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	ddaf      	ble.n	800052c <fsm_for_input_processing+0xc>
		}
	}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000034 	.word	0x20000034

080005dc <is_button_pressed>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

unsigned char is_button_pressed(uint8_t index){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d901      	bls.n	80005f0 <is_button_pressed+0x14>
 80005ec:	2300      	movs	r3, #0
 80005ee:	e007      	b.n	8000600 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4a06      	ldr	r2, [pc, #24]	@ (800060c <is_button_pressed+0x30>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf0c      	ite	eq
 80005fa:	2301      	moveq	r3, #1
 80005fc:	2300      	movne	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000

08000610 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d901      	bls.n	8000624 <is_button_pressed_1s+0x14>
 8000620:	23ff      	movs	r3, #255	@ 0xff
 8000622:	e007      	b.n	8000634 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <is_button_pressed_1s+0x30>)
 8000628:	5cd3      	ldrb	r3, [r2, r3]
 800062a:	2b01      	cmp	r3, #1
 800062c:	bf0c      	ite	eq
 800062e:	2301      	moveq	r3, #1
 8000630:	2300      	movne	r3, #0
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000040 	.word	0x20000040

08000644 <button_reading>:

void button_reading(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e071      	b.n	8000734 <button_reading+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000650:	4a3c      	ldr	r2, [pc, #240]	@ (8000744 <button_reading+0x100>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	4a3b      	ldr	r2, [pc, #236]	@ (8000748 <button_reading+0x104>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
		// Chose button port
		if(i == 0){
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d10b      	bne.n	8000680 <button_reading+0x3c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000668:	2101      	movs	r1, #1
 800066a:	4838      	ldr	r0, [pc, #224]	@ (800074c <button_reading+0x108>)
 800066c:	f001 f95c 	bl	8001928 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	4619      	mov	r1, r3
 8000674:	4a33      	ldr	r2, [pc, #204]	@ (8000744 <button_reading+0x100>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	460a      	mov	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e01c      	b.n	80006ba <button_reading+0x76>
		}
		else if(i == 1){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d10b      	bne.n	800069e <button_reading+0x5a>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000686:	2102      	movs	r1, #2
 8000688:	4830      	ldr	r0, [pc, #192]	@ (800074c <button_reading+0x108>)
 800068a:	f001 f94d 	bl	8001928 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	4619      	mov	r1, r3
 8000692:	4a2c      	ldr	r2, [pc, #176]	@ (8000744 <button_reading+0x100>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	460a      	mov	r2, r1
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	e00d      	b.n	80006ba <button_reading+0x76>
		}
		else if( i == 2){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d10a      	bne.n	80006ba <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80006a4:	2104      	movs	r1, #4
 80006a6:	4829      	ldr	r0, [pc, #164]	@ (800074c <button_reading+0x108>)
 80006a8:	f001 f93e 	bl	8001928 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4619      	mov	r1, r3
 80006b0:	4a24      	ldr	r2, [pc, #144]	@ (8000744 <button_reading+0x100>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	460a      	mov	r2, r1
 80006b8:	701a      	strb	r2, [r3, #0]
		}
		else{
			/*This is fault value of index button*/
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 80006ba:	4a22      	ldr	r2, [pc, #136]	@ (8000744 <button_reading+0x100>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4921      	ldr	r1, [pc, #132]	@ (8000748 <button_reading+0x104>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	440b      	add	r3, r1
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d12f      	bne.n	800072e <button_reading+0xea>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80006ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000744 <button_reading+0x100>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	7819      	ldrb	r1, [r3, #0]
 80006d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <button_reading+0x10c>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	460a      	mov	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80006e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <button_reading+0x10c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d116      	bne.n	800071a <button_reading+0xd6>
			// If a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 80006ec:	4a19      	ldr	r2, [pc, #100]	@ (8000754 <button_reading+0x110>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f4:	2b63      	cmp	r3, #99	@ 0x63
 80006f6:	d80a      	bhi.n	800070e <button_reading+0xca>
					counterForButtonPress1s[i]++;
 80006f8:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <button_reading+0x110>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000700:	3301      	adds	r3, #1
 8000702:	b299      	uxth	r1, r3
 8000704:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <button_reading+0x110>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800070c:	e00f      	b.n	800072e <button_reading+0xea>
				} else {
				// The flag is turned on when 1 second has passed
				// since the button is pressed.
					flagForButtonPress1s[i] = 1;
 800070e:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <button_reading+0x114>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e009      	b.n	800072e <button_reading+0xea>
					// To do
				}
			}
			else {
				counterForButtonPress1s[i] = 0;
 800071a:	4a0e      	ldr	r2, [pc, #56]	@ (8000754 <button_reading+0x110>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2100      	movs	r1, #0
 8000720:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000724:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <button_reading+0x114>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3301      	adds	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b02      	cmp	r3, #2
 8000738:	dd8a      	ble.n	8000650 <button_reading+0xc>
			}
		}
	}
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000038 	.word	0x20000038
 8000748:	2000003c 	.word	0x2000003c
 800074c:	40010c00 	.word	0x40010c00
 8000750:	20000000 	.word	0x20000000
 8000754:	20000044 	.word	0x20000044
 8000758:	20000040 	.word	0x20000040

0800075c <display7SEG_13>:
#include "led_display.h"

int Led13_Count;
int Led24_Count;

void  display7SEG_13(int number){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d123      	bne.n	80007b2 <display7SEG_13+0x56>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2101      	movs	r1, #1
 800076e:	48c2      	ldr	r0, [pc, #776]	@ (8000a78 <display7SEG_13+0x31c>)
 8000770:	f001 f8f1 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2102      	movs	r1, #2
 8000778:	48bf      	ldr	r0, [pc, #764]	@ (8000a78 <display7SEG_13+0x31c>)
 800077a:	f001 f8ec 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	48bd      	ldr	r0, [pc, #756]	@ (8000a78 <display7SEG_13+0x31c>)
 8000784:	f001 f8e7 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	48ba      	ldr	r0, [pc, #744]	@ (8000a78 <display7SEG_13+0x31c>)
 800078e:	f001 f8e2 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2110      	movs	r1, #16
 8000796:	48b8      	ldr	r0, [pc, #736]	@ (8000a78 <display7SEG_13+0x31c>)
 8000798:	f001 f8dd 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	48b5      	ldr	r0, [pc, #724]	@ (8000a78 <display7SEG_13+0x31c>)
 80007a2:	f001 f8d8 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2140      	movs	r1, #64	@ 0x40
 80007aa:	48b3      	ldr	r0, [pc, #716]	@ (8000a78 <display7SEG_13+0x31c>)
 80007ac:	f001 f8d3 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 80007b0:	e15d      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 1){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d123      	bne.n	8000800 <display7SEG_13+0xa4>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	48ae      	ldr	r0, [pc, #696]	@ (8000a78 <display7SEG_13+0x31c>)
 80007be:	f001 f8ca 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	48ac      	ldr	r0, [pc, #688]	@ (8000a78 <display7SEG_13+0x31c>)
 80007c8:	f001 f8c5 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2104      	movs	r1, #4
 80007d0:	48a9      	ldr	r0, [pc, #676]	@ (8000a78 <display7SEG_13+0x31c>)
 80007d2:	f001 f8c0 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2108      	movs	r1, #8
 80007da:	48a7      	ldr	r0, [pc, #668]	@ (8000a78 <display7SEG_13+0x31c>)
 80007dc:	f001 f8bb 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2110      	movs	r1, #16
 80007e4:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <display7SEG_13+0x31c>)
 80007e6:	f001 f8b6 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2120      	movs	r1, #32
 80007ee:	48a2      	ldr	r0, [pc, #648]	@ (8000a78 <display7SEG_13+0x31c>)
 80007f0:	f001 f8b1 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2140      	movs	r1, #64	@ 0x40
 80007f8:	489f      	ldr	r0, [pc, #636]	@ (8000a78 <display7SEG_13+0x31c>)
 80007fa:	f001 f8ac 	bl	8001956 <HAL_GPIO_WritePin>
}
 80007fe:	e136      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 2){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d123      	bne.n	800084e <display7SEG_13+0xf2>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	489b      	ldr	r0, [pc, #620]	@ (8000a78 <display7SEG_13+0x31c>)
 800080c:	f001 f8a3 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2102      	movs	r1, #2
 8000814:	4898      	ldr	r0, [pc, #608]	@ (8000a78 <display7SEG_13+0x31c>)
 8000816:	f001 f89e 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2104      	movs	r1, #4
 800081e:	4896      	ldr	r0, [pc, #600]	@ (8000a78 <display7SEG_13+0x31c>)
 8000820:	f001 f899 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2108      	movs	r1, #8
 8000828:	4893      	ldr	r0, [pc, #588]	@ (8000a78 <display7SEG_13+0x31c>)
 800082a:	f001 f894 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2110      	movs	r1, #16
 8000832:	4891      	ldr	r0, [pc, #580]	@ (8000a78 <display7SEG_13+0x31c>)
 8000834:	f001 f88f 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2120      	movs	r1, #32
 800083c:	488e      	ldr	r0, [pc, #568]	@ (8000a78 <display7SEG_13+0x31c>)
 800083e:	f001 f88a 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	488c      	ldr	r0, [pc, #560]	@ (8000a78 <display7SEG_13+0x31c>)
 8000848:	f001 f885 	bl	8001956 <HAL_GPIO_WritePin>
}
 800084c:	e10f      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 3){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d123      	bne.n	800089c <display7SEG_13+0x140>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	4887      	ldr	r0, [pc, #540]	@ (8000a78 <display7SEG_13+0x31c>)
 800085a:	f001 f87c 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2102      	movs	r1, #2
 8000862:	4885      	ldr	r0, [pc, #532]	@ (8000a78 <display7SEG_13+0x31c>)
 8000864:	f001 f877 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	4882      	ldr	r0, [pc, #520]	@ (8000a78 <display7SEG_13+0x31c>)
 800086e:	f001 f872 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	4880      	ldr	r0, [pc, #512]	@ (8000a78 <display7SEG_13+0x31c>)
 8000878:	f001 f86d 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2110      	movs	r1, #16
 8000880:	487d      	ldr	r0, [pc, #500]	@ (8000a78 <display7SEG_13+0x31c>)
 8000882:	f001 f868 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2120      	movs	r1, #32
 800088a:	487b      	ldr	r0, [pc, #492]	@ (8000a78 <display7SEG_13+0x31c>)
 800088c:	f001 f863 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2140      	movs	r1, #64	@ 0x40
 8000894:	4878      	ldr	r0, [pc, #480]	@ (8000a78 <display7SEG_13+0x31c>)
 8000896:	f001 f85e 	bl	8001956 <HAL_GPIO_WritePin>
}
 800089a:	e0e8      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 4){
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d123      	bne.n	80008ea <display7SEG_13+0x18e>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	4874      	ldr	r0, [pc, #464]	@ (8000a78 <display7SEG_13+0x31c>)
 80008a8:	f001 f855 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2102      	movs	r1, #2
 80008b0:	4871      	ldr	r0, [pc, #452]	@ (8000a78 <display7SEG_13+0x31c>)
 80008b2:	f001 f850 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2104      	movs	r1, #4
 80008ba:	486f      	ldr	r0, [pc, #444]	@ (8000a78 <display7SEG_13+0x31c>)
 80008bc:	f001 f84b 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2108      	movs	r1, #8
 80008c4:	486c      	ldr	r0, [pc, #432]	@ (8000a78 <display7SEG_13+0x31c>)
 80008c6:	f001 f846 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2110      	movs	r1, #16
 80008ce:	486a      	ldr	r0, [pc, #424]	@ (8000a78 <display7SEG_13+0x31c>)
 80008d0:	f001 f841 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2120      	movs	r1, #32
 80008d8:	4867      	ldr	r0, [pc, #412]	@ (8000a78 <display7SEG_13+0x31c>)
 80008da:	f001 f83c 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	4865      	ldr	r0, [pc, #404]	@ (8000a78 <display7SEG_13+0x31c>)
 80008e4:	f001 f837 	bl	8001956 <HAL_GPIO_WritePin>
}
 80008e8:	e0c1      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 5){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b05      	cmp	r3, #5
 80008ee:	d123      	bne.n	8000938 <display7SEG_13+0x1dc>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2101      	movs	r1, #1
 80008f4:	4860      	ldr	r0, [pc, #384]	@ (8000a78 <display7SEG_13+0x31c>)
 80008f6:	f001 f82e 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2102      	movs	r1, #2
 80008fe:	485e      	ldr	r0, [pc, #376]	@ (8000a78 <display7SEG_13+0x31c>)
 8000900:	f001 f829 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2104      	movs	r1, #4
 8000908:	485b      	ldr	r0, [pc, #364]	@ (8000a78 <display7SEG_13+0x31c>)
 800090a:	f001 f824 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	4859      	ldr	r0, [pc, #356]	@ (8000a78 <display7SEG_13+0x31c>)
 8000914:	f001 f81f 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2110      	movs	r1, #16
 800091c:	4856      	ldr	r0, [pc, #344]	@ (8000a78 <display7SEG_13+0x31c>)
 800091e:	f001 f81a 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	4854      	ldr	r0, [pc, #336]	@ (8000a78 <display7SEG_13+0x31c>)
 8000928:	f001 f815 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2140      	movs	r1, #64	@ 0x40
 8000930:	4851      	ldr	r0, [pc, #324]	@ (8000a78 <display7SEG_13+0x31c>)
 8000932:	f001 f810 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000936:	e09a      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 6){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b06      	cmp	r3, #6
 800093c:	d123      	bne.n	8000986 <display7SEG_13+0x22a>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2101      	movs	r1, #1
 8000942:	484d      	ldr	r0, [pc, #308]	@ (8000a78 <display7SEG_13+0x31c>)
 8000944:	f001 f807 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	484a      	ldr	r0, [pc, #296]	@ (8000a78 <display7SEG_13+0x31c>)
 800094e:	f001 f802 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	4848      	ldr	r0, [pc, #288]	@ (8000a78 <display7SEG_13+0x31c>)
 8000958:	f000 fffd 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2108      	movs	r1, #8
 8000960:	4845      	ldr	r0, [pc, #276]	@ (8000a78 <display7SEG_13+0x31c>)
 8000962:	f000 fff8 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	4843      	ldr	r0, [pc, #268]	@ (8000a78 <display7SEG_13+0x31c>)
 800096c:	f000 fff3 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2120      	movs	r1, #32
 8000974:	4840      	ldr	r0, [pc, #256]	@ (8000a78 <display7SEG_13+0x31c>)
 8000976:	f000 ffee 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2140      	movs	r1, #64	@ 0x40
 800097e:	483e      	ldr	r0, [pc, #248]	@ (8000a78 <display7SEG_13+0x31c>)
 8000980:	f000 ffe9 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000984:	e073      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 7){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d123      	bne.n	80009d4 <display7SEG_13+0x278>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2101      	movs	r1, #1
 8000990:	4839      	ldr	r0, [pc, #228]	@ (8000a78 <display7SEG_13+0x31c>)
 8000992:	f000 ffe0 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	4837      	ldr	r0, [pc, #220]	@ (8000a78 <display7SEG_13+0x31c>)
 800099c:	f000 ffdb 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4834      	ldr	r0, [pc, #208]	@ (8000a78 <display7SEG_13+0x31c>)
 80009a6:	f000 ffd6 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2108      	movs	r1, #8
 80009ae:	4832      	ldr	r0, [pc, #200]	@ (8000a78 <display7SEG_13+0x31c>)
 80009b0:	f000 ffd1 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2110      	movs	r1, #16
 80009b8:	482f      	ldr	r0, [pc, #188]	@ (8000a78 <display7SEG_13+0x31c>)
 80009ba:	f000 ffcc 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2120      	movs	r1, #32
 80009c2:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <display7SEG_13+0x31c>)
 80009c4:	f000 ffc7 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2140      	movs	r1, #64	@ 0x40
 80009cc:	482a      	ldr	r0, [pc, #168]	@ (8000a78 <display7SEG_13+0x31c>)
 80009ce:	f000 ffc2 	bl	8001956 <HAL_GPIO_WritePin>
}
 80009d2:	e04c      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 8){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b08      	cmp	r3, #8
 80009d8:	d123      	bne.n	8000a22 <display7SEG_13+0x2c6>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2101      	movs	r1, #1
 80009de:	4826      	ldr	r0, [pc, #152]	@ (8000a78 <display7SEG_13+0x31c>)
 80009e0:	f000 ffb9 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2102      	movs	r1, #2
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <display7SEG_13+0x31c>)
 80009ea:	f000 ffb4 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2104      	movs	r1, #4
 80009f2:	4821      	ldr	r0, [pc, #132]	@ (8000a78 <display7SEG_13+0x31c>)
 80009f4:	f000 ffaf 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2108      	movs	r1, #8
 80009fc:	481e      	ldr	r0, [pc, #120]	@ (8000a78 <display7SEG_13+0x31c>)
 80009fe:	f000 ffaa 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2110      	movs	r1, #16
 8000a06:	481c      	ldr	r0, [pc, #112]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a08:	f000 ffa5 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2120      	movs	r1, #32
 8000a10:	4819      	ldr	r0, [pc, #100]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a12:	f000 ffa0 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2140      	movs	r1, #64	@ 0x40
 8000a1a:	4817      	ldr	r0, [pc, #92]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a1c:	f000 ff9b 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000a20:	e025      	b.n	8000a6e <display7SEG_13+0x312>
	else if(number == 9){
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b09      	cmp	r3, #9
 8000a26:	d122      	bne.n	8000a6e <display7SEG_13+0x312>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a2e:	f000 ff92 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2102      	movs	r1, #2
 8000a36:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a38:	f000 ff8d 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2104      	movs	r1, #4
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a42:	f000 ff88 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2108      	movs	r1, #8
 8000a4a:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a4c:	f000 ff83 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2110      	movs	r1, #16
 8000a54:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a56:	f000 ff7e 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a60:	f000 ff79 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2140      	movs	r1, #64	@ 0x40
 8000a68:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <display7SEG_13+0x31c>)
 8000a6a:	f000 ff74 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010800 	.word	0x40010800

08000a7c <display7SEG_24>:

void  display7SEG_24(int number){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d12a      	bne.n	8000ae0 <display7SEG_24+0x64>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a90:	48cb      	ldr	r0, [pc, #812]	@ (8000dc0 <display7SEG_24+0x344>)
 8000a92:	f000 ff60 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9c:	48c8      	ldr	r0, [pc, #800]	@ (8000dc0 <display7SEG_24+0x344>)
 8000a9e:	f000 ff5a 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aa8:	48c5      	ldr	r0, [pc, #788]	@ (8000dc0 <display7SEG_24+0x344>)
 8000aaa:	f000 ff54 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ab4:	48c2      	ldr	r0, [pc, #776]	@ (8000dc0 <display7SEG_24+0x344>)
 8000ab6:	f000 ff4e 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac0:	48bf      	ldr	r0, [pc, #764]	@ (8000dc0 <display7SEG_24+0x344>)
 8000ac2:	f000 ff48 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000acc:	48bc      	ldr	r0, [pc, #752]	@ (8000dc0 <display7SEG_24+0x344>)
 8000ace:	f000 ff42 	bl	8001956 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ad8:	48b9      	ldr	r0, [pc, #740]	@ (8000dc0 <display7SEG_24+0x344>)
 8000ada:	f000 ff3c 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000ade:	e19e      	b.n	8000e1e <display7SEG_24+0x3a2>
	else if(number == 1){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d12a      	bne.n	8000b3c <display7SEG_24+0xc0>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aec:	48b4      	ldr	r0, [pc, #720]	@ (8000dc0 <display7SEG_24+0x344>)
 8000aee:	f000 ff32 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af8:	48b1      	ldr	r0, [pc, #708]	@ (8000dc0 <display7SEG_24+0x344>)
 8000afa:	f000 ff2c 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b04:	48ae      	ldr	r0, [pc, #696]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b06:	f000 ff26 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b10:	48ab      	ldr	r0, [pc, #684]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b12:	f000 ff20 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b1c:	48a8      	ldr	r0, [pc, #672]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b1e:	f000 ff1a 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b28:	48a5      	ldr	r0, [pc, #660]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b2a:	f000 ff14 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b34:	48a2      	ldr	r0, [pc, #648]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b36:	f000 ff0e 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000b3a:	e170      	b.n	8000e1e <display7SEG_24+0x3a2>
	else if(number == 2){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d12a      	bne.n	8000b98 <display7SEG_24+0x11c>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b48:	489d      	ldr	r0, [pc, #628]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b4a:	f000 ff04 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	489a      	ldr	r0, [pc, #616]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b56:	f000 fefe 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b60:	4897      	ldr	r0, [pc, #604]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b62:	f000 fef8 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b6c:	4894      	ldr	r0, [pc, #592]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b6e:	f000 fef2 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b78:	4891      	ldr	r0, [pc, #580]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b7a:	f000 feec 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b84:	488e      	ldr	r0, [pc, #568]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b86:	f000 fee6 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b90:	488b      	ldr	r0, [pc, #556]	@ (8000dc0 <display7SEG_24+0x344>)
 8000b92:	f000 fee0 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000b96:	e142      	b.n	8000e1e <display7SEG_24+0x3a2>
	else if(number == 3){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d12a      	bne.n	8000bf4 <display7SEG_24+0x178>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ba4:	4886      	ldr	r0, [pc, #536]	@ (8000dc0 <display7SEG_24+0x344>)
 8000ba6:	f000 fed6 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb0:	4883      	ldr	r0, [pc, #524]	@ (8000dc0 <display7SEG_24+0x344>)
 8000bb2:	f000 fed0 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bbc:	4880      	ldr	r0, [pc, #512]	@ (8000dc0 <display7SEG_24+0x344>)
 8000bbe:	f000 feca 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bc8:	487d      	ldr	r0, [pc, #500]	@ (8000dc0 <display7SEG_24+0x344>)
 8000bca:	f000 fec4 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bd4:	487a      	ldr	r0, [pc, #488]	@ (8000dc0 <display7SEG_24+0x344>)
 8000bd6:	f000 febe 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000be0:	4877      	ldr	r0, [pc, #476]	@ (8000dc0 <display7SEG_24+0x344>)
 8000be2:	f000 feb8 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bec:	4874      	ldr	r0, [pc, #464]	@ (8000dc0 <display7SEG_24+0x344>)
 8000bee:	f000 feb2 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000bf2:	e114      	b.n	8000e1e <display7SEG_24+0x3a2>
	else if(number == 4){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d12a      	bne.n	8000c50 <display7SEG_24+0x1d4>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c00:	486f      	ldr	r0, [pc, #444]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c02:	f000 fea8 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	486c      	ldr	r0, [pc, #432]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c0e:	f000 fea2 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c18:	4869      	ldr	r0, [pc, #420]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c1a:	f000 fe9c 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c24:	4866      	ldr	r0, [pc, #408]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c26:	f000 fe96 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c30:	4863      	ldr	r0, [pc, #396]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c32:	f000 fe90 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c3c:	4860      	ldr	r0, [pc, #384]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c3e:	f000 fe8a 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c48:	485d      	ldr	r0, [pc, #372]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c4a:	f000 fe84 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000c4e:	e0e6      	b.n	8000e1e <display7SEG_24+0x3a2>
	else if(number == 5){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b05      	cmp	r3, #5
 8000c54:	d12a      	bne.n	8000cac <display7SEG_24+0x230>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5c:	4858      	ldr	r0, [pc, #352]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c5e:	f000 fe7a 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c68:	4855      	ldr	r0, [pc, #340]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c6a:	f000 fe74 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c74:	4852      	ldr	r0, [pc, #328]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c76:	f000 fe6e 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c80:	484f      	ldr	r0, [pc, #316]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c82:	f000 fe68 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c8c:	484c      	ldr	r0, [pc, #304]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c8e:	f000 fe62 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c98:	4849      	ldr	r0, [pc, #292]	@ (8000dc0 <display7SEG_24+0x344>)
 8000c9a:	f000 fe5c 	bl	8001956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ca4:	4846      	ldr	r0, [pc, #280]	@ (8000dc0 <display7SEG_24+0x344>)
 8000ca6:	f000 fe56 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000caa:	e0b8      	b.n	8000e1e <display7SEG_24+0x3a2>
	else if(number == 6){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d12a      	bne.n	8000d08 <display7SEG_24+0x28c>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb8:	4841      	ldr	r0, [pc, #260]	@ (8000dc0 <display7SEG_24+0x344>)
 8000cba:	f000 fe4c 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cc4:	483e      	ldr	r0, [pc, #248]	@ (8000dc0 <display7SEG_24+0x344>)
 8000cc6:	f000 fe46 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd0:	483b      	ldr	r0, [pc, #236]	@ (8000dc0 <display7SEG_24+0x344>)
 8000cd2:	f000 fe40 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cdc:	4838      	ldr	r0, [pc, #224]	@ (8000dc0 <display7SEG_24+0x344>)
 8000cde:	f000 fe3a 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ce8:	4835      	ldr	r0, [pc, #212]	@ (8000dc0 <display7SEG_24+0x344>)
 8000cea:	f000 fe34 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf4:	4832      	ldr	r0, [pc, #200]	@ (8000dc0 <display7SEG_24+0x344>)
 8000cf6:	f000 fe2e 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d00:	482f      	ldr	r0, [pc, #188]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d02:	f000 fe28 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000d06:	e08a      	b.n	8000e1e <display7SEG_24+0x3a2>
	else if(number == 7){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d12a      	bne.n	8000d64 <display7SEG_24+0x2e8>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d14:	482a      	ldr	r0, [pc, #168]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d16:	f000 fe1e 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d20:	4827      	ldr	r0, [pc, #156]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d22:	f000 fe18 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d2c:	4824      	ldr	r0, [pc, #144]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d2e:	f000 fe12 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d38:	4821      	ldr	r0, [pc, #132]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d3a:	f000 fe0c 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d44:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d46:	f000 fe06 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d50:	481b      	ldr	r0, [pc, #108]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d52:	f000 fe00 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d5c:	4818      	ldr	r0, [pc, #96]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d5e:	f000 fdfa 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000d62:	e05c      	b.n	8000e1e <display7SEG_24+0x3a2>
	else if(number == 8){
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d12c      	bne.n	8000dc4 <display7SEG_24+0x348>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d70:	4813      	ldr	r0, [pc, #76]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d72:	f000 fdf0 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d7c:	4810      	ldr	r0, [pc, #64]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d7e:	f000 fdea 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d8a:	f000 fde4 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d94:	480a      	ldr	r0, [pc, #40]	@ (8000dc0 <display7SEG_24+0x344>)
 8000d96:	f000 fdde 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da0:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <display7SEG_24+0x344>)
 8000da2:	f000 fdd8 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <display7SEG_24+0x344>)
 8000dae:	f000 fdd2 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db8:	4801      	ldr	r0, [pc, #4]	@ (8000dc0 <display7SEG_24+0x344>)
 8000dba:	f000 fdcc 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000dbe:	e02e      	b.n	8000e1e <display7SEG_24+0x3a2>
 8000dc0:	40010800 	.word	0x40010800
	else if(number == 9){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b09      	cmp	r3, #9
 8000dc8:	d129      	bne.n	8000e1e <display7SEG_24+0x3a2>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd0:	4815      	ldr	r0, [pc, #84]	@ (8000e28 <display7SEG_24+0x3ac>)
 8000dd2:	f000 fdc0 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ddc:	4812      	ldr	r0, [pc, #72]	@ (8000e28 <display7SEG_24+0x3ac>)
 8000dde:	f000 fdba 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de8:	480f      	ldr	r0, [pc, #60]	@ (8000e28 <display7SEG_24+0x3ac>)
 8000dea:	f000 fdb4 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <display7SEG_24+0x3ac>)
 8000df6:	f000 fdae 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e00:	4809      	ldr	r0, [pc, #36]	@ (8000e28 <display7SEG_24+0x3ac>)
 8000e02:	f000 fda8 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0c:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <display7SEG_24+0x3ac>)
 8000e0e:	f000 fda2 	bl	8001956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e18:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <display7SEG_24+0x3ac>)
 8000e1a:	f000 fd9c 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800

08000e2c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e3c:	d103      	bne.n	8000e46 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000e3e:	f7ff fc01 	bl	8000644 <button_reading>
		runTimer();
 8000e42:	f000 f9cd 	bl	80011e0 <runTimer>
		/*Just for debug
		HAL_GPIO_TogglePin(CHECK_GPIO_Port, CHECK_Pin);*/
	}
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f000 fa7c 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f812 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5c:	f000 f898 	bl	8000f90 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e60:	f000 f84a 	bl	8000ef8 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setEnviromentStateInit();
 8000e64:	f7ff f972 	bl	800014c <setEnviromentStateInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <main+0x2c>)
 8000e6a:	f001 f9bb 	bl	80021e4 <HAL_TIM_Base_Start_IT>
  {
	/*Just for debug*/
	//display7SEG_13(FSM_State);
	//display7SEG_24(buttonState[0]);

	fsm_for_input_processing();
 8000e6e:	f7ff fb57 	bl	8000520 <fsm_for_input_processing>
	runFSM();
 8000e72:	f7ff faa7 	bl	80003c4 <runFSM>
	fsm_for_input_processing();
 8000e76:	bf00      	nop
 8000e78:	e7f9      	b.n	8000e6e <main+0x1e>
 8000e7a:	bf00      	nop
 8000e7c:	20000054 	.word	0x20000054

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b090      	sub	sp, #64	@ 0x40
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	2228      	movs	r2, #40	@ 0x28
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fd34 	bl	80028fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fd66 	bl	8001988 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ec2:	f000 f8c7 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 ffd4 	bl	8001e8c <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000eea:	f000 f8b3 	bl	8001054 <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	@ 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f1e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f2c:	2209      	movs	r2, #9
 8000f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f3c:	4813      	ldr	r0, [pc, #76]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f3e:	f001 f901 	bl	8002144 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f48:	f000 f884 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4619      	mov	r1, r3
 8000f58:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f5a:	f001 fa7f 	bl	800245c <HAL_TIM_ConfigClockSource>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f64:	f000 f876 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_TIM2_Init+0x94>)
 8000f76:	f001 fc57 	bl	8002828 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f80:	f000 f868 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000054 	.word	0x20000054

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <MX_GPIO_Init+0xb8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a27      	ldr	r2, [pc, #156]	@ (8001048 <MX_GPIO_Init+0xb8>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <MX_GPIO_Init+0xb8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <MX_GPIO_Init+0xb8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <MX_GPIO_Init+0xb8>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <MX_GPIO_Init+0xb8>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f647 717f 	movw	r1, #32639	@ 0x7f7f
 8000fda:	481c      	ldr	r0, [pc, #112]	@ (800104c <MX_GPIO_Init+0xbc>)
 8000fdc:	f000 fcbb 	bl	8001956 <HAL_GPIO_WritePin>
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|SEG24_A_Pin
                          |SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin|SEG24_E_Pin
                          |SEG24_F_Pin|SEG24_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED13_RED_Pin|LED13_YELLOW_Pin|LED13_GREEN_Pin|LED24_RED_Pin
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8000fe6:	481a      	ldr	r0, [pc, #104]	@ (8001050 <MX_GPIO_Init+0xc0>)
 8000fe8:	f000 fcb5 	bl	8001956 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG13_A_Pin SEG13_B_Pin SEG13_C_Pin SEG13_D_Pin
                           SEG13_E_Pin SEG13_F_Pin SEG13_G_Pin SEG24_A_Pin
                           SEG24_B_Pin SEG24_C_Pin SEG24_D_Pin SEG24_E_Pin
                           SEG24_F_Pin SEG24_G_Pin */
  GPIO_InitStruct.Pin = SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8000fec:	f647 737f 	movw	r3, #32639	@ 0x7f7f
 8000ff0:	60bb      	str	r3, [r7, #8]
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|SEG24_A_Pin
                          |SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin|SEG24_E_Pin
                          |SEG24_F_Pin|SEG24_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4619      	mov	r1, r3
 8001004:	4811      	ldr	r0, [pc, #68]	@ (800104c <MX_GPIO_Init+0xbc>)
 8001006:	f000 fb13 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 800100a:	2307      	movs	r3, #7
 800100c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4619      	mov	r1, r3
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <MX_GPIO_Init+0xc0>)
 800101e:	f000 fb07 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_RED_Pin LED13_YELLOW_Pin LED13_GREEN_Pin LED24_RED_Pin
                           LED24_YELLOW_Pin LED24_GREEN_Pin */
  GPIO_InitStruct.Pin = LED13_RED_Pin|LED13_YELLOW_Pin|LED13_GREEN_Pin|LED24_RED_Pin
 8001022:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8001026:	60bb      	str	r3, [r7, #8]
                          |LED24_YELLOW_Pin|LED24_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2302      	movs	r3, #2
 8001032:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_GPIO_Init+0xc0>)
 800103c:	f000 faf8 	bl	8001630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	40010800 	.word	0x40010800
 8001050:	40010c00 	.word	0x40010c00

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_MspInit+0x5c>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <HAL_MspInit+0x5c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_MspInit+0x5c>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <HAL_MspInit+0x5c>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <HAL_MspInit+0x5c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <HAL_MspInit+0x5c>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_MspInit+0x60>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_MspInit+0x60>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d4:	d113      	bne.n	80010fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	201c      	movs	r0, #28
 80010f4:	f000 fa65 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f8:	201c      	movs	r0, #28
 80010fa:	f000 fa7e 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <NMI_Handler+0x4>

08001114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <UsageFault_Handler+0x4>

08001134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f93e 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <TIM2_IRQHandler+0x10>)
 800116a:	f001 f887 	bl	800227c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000054 	.word	0x20000054

08001178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <getTimerFlags>:
	//__HAL_TIM_SET_PRESCALER(&htim2,PRESCALER);
	__HAL_TIM_SET_COUNTER(&htim2,COUNTER);
	TIMER_CYCLE = cycle;
}*/

int getTimerFlags(int index){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	return Timer_Flag[index];
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <getTimerFlags+0x1c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200000a4 	.word	0x200000a4

080011a4 <setTimer>:

void setTimer(int index, int duration){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	Timer_Counter[index] = duration/TIMER_CYCLE;
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <setTimer+0x30>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80011b8:	4907      	ldr	r1, [pc, #28]	@ (80011d8 <setTimer+0x34>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Timer_Flag[index] = 0;
 80011c0:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <setTimer+0x38>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2100      	movs	r1, #0
 80011c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000008 	.word	0x20000008
 80011d8:	2000009c 	.word	0x2000009c
 80011dc:	200000a4 	.word	0x200000a4

080011e0 <runTimer>:

void runTimer(void){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_TIMER;i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	e016      	b.n	800121a <runTimer+0x3a>
		Timer_Counter[i]--;
 80011ec:	4a0f      	ldr	r2, [pc, #60]	@ (800122c <runTimer+0x4c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <runTimer+0x4c>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(Timer_Counter[i] <= 0){
 80011fe:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <runTimer+0x4c>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	2b00      	cmp	r3, #0
 8001208:	dc04      	bgt.n	8001214 <runTimer+0x34>
			Timer_Flag[i] = 1;
 800120a:	4a09      	ldr	r2, [pc, #36]	@ (8001230 <runTimer+0x50>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2101      	movs	r1, #1
 8001210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_TIMER;i++){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3301      	adds	r3, #1
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b01      	cmp	r3, #1
 800121e:	dde5      	ble.n	80011ec <runTimer+0xc>
		}
	}
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	2000009c 	.word	0x2000009c
 8001230:	200000a4 	.word	0x200000a4

08001234 <doRedGreen_Traffic>:
 *      Author: ADMINS
 */

#include "Traffic.h"

void doRedGreen_Traffic(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2108      	movs	r1, #8
 800123c:	480f      	ldr	r0, [pc, #60]	@ (800127c <doRedGreen_Traffic+0x48>)
 800123e:	f000 fb8a 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <doRedGreen_Traffic+0x48>)
 800124a:	f000 fb84 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2120      	movs	r1, #32
 8001252:	480a      	ldr	r0, [pc, #40]	@ (800127c <doRedGreen_Traffic+0x48>)
 8001254:	f000 fb7f 	bl	8001956 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2110      	movs	r1, #16
 800125c:	4807      	ldr	r0, [pc, #28]	@ (800127c <doRedGreen_Traffic+0x48>)
 800125e:	f000 fb7a 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2140      	movs	r1, #64	@ 0x40
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <doRedGreen_Traffic+0x48>)
 8001268:	f000 fb75 	bl	8001956 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2180      	movs	r1, #128	@ 0x80
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <doRedGreen_Traffic+0x48>)
 8001272:	f000 fb70 	bl	8001956 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010c00 	.word	0x40010c00

08001280 <doRedYellow_Traffic>:

void doRedYellow_Traffic(void){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <doRedYellow_Traffic+0x20>)
 800128c:	f000 fb63 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2180      	movs	r1, #128	@ 0x80
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <doRedYellow_Traffic+0x20>)
 8001296:	f000 fb5e 	bl	8001956 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <doGreenRed_Traffic>:

void doGreenRed_Traffic(void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2108      	movs	r1, #8
 80012ac:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <doGreenRed_Traffic+0x30>)
 80012ae:	f000 fb52 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2180      	movs	r1, #128	@ 0x80
 80012b6:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <doGreenRed_Traffic+0x30>)
 80012b8:	f000 fb4d 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2140      	movs	r1, #64	@ 0x40
 80012c0:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <doGreenRed_Traffic+0x30>)
 80012c2:	f000 fb48 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2120      	movs	r1, #32
 80012ca:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <doGreenRed_Traffic+0x30>)
 80012cc:	f000 fb43 	bl	8001956 <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40010c00 	.word	0x40010c00

080012d8 <doYellowRed_Traffic>:

void doYellowRed_Traffic(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2120      	movs	r1, #32
 80012e0:	4807      	ldr	r0, [pc, #28]	@ (8001300 <doYellowRed_Traffic+0x28>)
 80012e2:	f000 fb38 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2110      	movs	r1, #16
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <doYellowRed_Traffic+0x28>)
 80012ec:	f000 fb33 	bl	8001956 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2140      	movs	r1, #64	@ 0x40
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <doYellowRed_Traffic+0x28>)
 80012f6:	f000 fb2e 	bl	8001956 <HAL_GPIO_WritePin>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40010c00 	.word	0x40010c00

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff ff38 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480b      	ldr	r0, [pc, #44]	@ (8001338 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800130a:	490c      	ldr	r1, [pc, #48]	@ (800133c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800130c:	4a0c      	ldr	r2, [pc, #48]	@ (8001340 <LoopFillZerobss+0x16>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a09      	ldr	r2, [pc, #36]	@ (8001344 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001320:	4c09      	ldr	r4, [pc, #36]	@ (8001348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f001 faed 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fd8d 	bl	8000e50 <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001340:	08002998 	.word	0x08002998
  ldr r2, =_sbss
 8001344:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001348:	200000b0 	.word	0x200000b0

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	@ (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f923 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fe78 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f93b 	bl	8001616 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 f903 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	@ (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000004 	.word	0x20000004
 80013d4:	20000010 	.word	0x20000010
 80013d8:	2000000c 	.word	0x2000000c

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <HAL_IncTick+0x1c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_IncTick+0x20>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a03      	ldr	r2, [pc, #12]	@ (80013fc <HAL_IncTick+0x20>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000010 	.word	0x20000010
 80013fc:	200000ac 	.word	0x200000ac

08001400 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b02      	ldr	r3, [pc, #8]	@ (8001410 <HAL_GetTick+0x10>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200000ac 	.word	0x200000ac

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4906      	ldr	r1, [pc, #24]	@ (80014ac <__NVIC_EnableIRQ+0x34>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	@ (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	@ (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	@ 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	@ 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2d 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff42 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b08b      	sub	sp, #44	@ 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	e161      	b.n	8001908 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001644:	2201      	movs	r2, #1
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8150 	bne.w	8001902 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a97      	ldr	r2, [pc, #604]	@ (80018c4 <HAL_GPIO_Init+0x294>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d05e      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800166c:	4a95      	ldr	r2, [pc, #596]	@ (80018c4 <HAL_GPIO_Init+0x294>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d875      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001672:	4a95      	ldr	r2, [pc, #596]	@ (80018c8 <HAL_GPIO_Init+0x298>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d058      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001678:	4a93      	ldr	r2, [pc, #588]	@ (80018c8 <HAL_GPIO_Init+0x298>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d86f      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800167e:	4a93      	ldr	r2, [pc, #588]	@ (80018cc <HAL_GPIO_Init+0x29c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d052      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001684:	4a91      	ldr	r2, [pc, #580]	@ (80018cc <HAL_GPIO_Init+0x29c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d869      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800168a:	4a91      	ldr	r2, [pc, #580]	@ (80018d0 <HAL_GPIO_Init+0x2a0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d04c      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001690:	4a8f      	ldr	r2, [pc, #572]	@ (80018d0 <HAL_GPIO_Init+0x2a0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d863      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001696:	4a8f      	ldr	r2, [pc, #572]	@ (80018d4 <HAL_GPIO_Init+0x2a4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d046      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800169c:	4a8d      	ldr	r2, [pc, #564]	@ (80018d4 <HAL_GPIO_Init+0x2a4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d85d      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d82a      	bhi.n	80016fc <HAL_GPIO_Init+0xcc>
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d859      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016aa:	a201      	add	r2, pc, #4	@ (adr r2, 80016b0 <HAL_GPIO_Init+0x80>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	0800172b 	.word	0x0800172b
 80016b4:	08001705 	.word	0x08001705
 80016b8:	08001717 	.word	0x08001717
 80016bc:	08001759 	.word	0x08001759
 80016c0:	0800175f 	.word	0x0800175f
 80016c4:	0800175f 	.word	0x0800175f
 80016c8:	0800175f 	.word	0x0800175f
 80016cc:	0800175f 	.word	0x0800175f
 80016d0:	0800175f 	.word	0x0800175f
 80016d4:	0800175f 	.word	0x0800175f
 80016d8:	0800175f 	.word	0x0800175f
 80016dc:	0800175f 	.word	0x0800175f
 80016e0:	0800175f 	.word	0x0800175f
 80016e4:	0800175f 	.word	0x0800175f
 80016e8:	0800175f 	.word	0x0800175f
 80016ec:	0800175f 	.word	0x0800175f
 80016f0:	0800175f 	.word	0x0800175f
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	08001721 	.word	0x08001721
 80016fc:	4a76      	ldr	r2, [pc, #472]	@ (80018d8 <HAL_GPIO_Init+0x2a8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001702:	e02c      	b.n	800175e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e029      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e024      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	3308      	adds	r3, #8
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e01f      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	330c      	adds	r3, #12
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	e01a      	b.n	8001760 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001732:	2304      	movs	r3, #4
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e013      	b.n	8001760 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001740:	2308      	movs	r3, #8
 8001742:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	611a      	str	r2, [r3, #16]
          break;
 800174a:	e009      	b.n	8001760 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	615a      	str	r2, [r3, #20]
          break;
 8001756:	e003      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x130>
          break;
 800175e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2bff      	cmp	r3, #255	@ 0xff
 8001764:	d801      	bhi.n	800176a <HAL_GPIO_Init+0x13a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	e001      	b.n	800176e <HAL_GPIO_Init+0x13e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	@ 0xff
 8001774:	d802      	bhi.n	800177c <HAL_GPIO_Init+0x14c>
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0x152>
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	3b08      	subs	r3, #8
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	210f      	movs	r1, #15
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	401a      	ands	r2, r3
 8001794:	6a39      	ldr	r1, [r7, #32]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	431a      	orrs	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80a9 	beq.w	8001902 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017b0:	4b4a      	ldr	r3, [pc, #296]	@ (80018dc <HAL_GPIO_Init+0x2ac>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a49      	ldr	r2, [pc, #292]	@ (80018dc <HAL_GPIO_Init+0x2ac>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b47      	ldr	r3, [pc, #284]	@ (80018dc <HAL_GPIO_Init+0x2ac>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c8:	4a45      	ldr	r2, [pc, #276]	@ (80018e0 <HAL_GPIO_Init+0x2b0>)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3d      	ldr	r2, [pc, #244]	@ (80018e4 <HAL_GPIO_Init+0x2b4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00d      	beq.n	8001810 <HAL_GPIO_Init+0x1e0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3c      	ldr	r2, [pc, #240]	@ (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d007      	beq.n	800180c <HAL_GPIO_Init+0x1dc>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3b      	ldr	r2, [pc, #236]	@ (80018ec <HAL_GPIO_Init+0x2bc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_GPIO_Init+0x1d8>
 8001804:	2302      	movs	r3, #2
 8001806:	e004      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001808:	2303      	movs	r3, #3
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001810:	2300      	movs	r3, #0
 8001812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4093      	lsls	r3, r2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001822:	492f      	ldr	r1, [pc, #188]	@ (80018e0 <HAL_GPIO_Init+0x2b0>)
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	492b      	ldr	r1, [pc, #172]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800184a:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	43db      	mvns	r3, r3
 8001852:	4927      	ldr	r1, [pc, #156]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 8001854:	4013      	ands	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	4921      	ldr	r1, [pc, #132]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	60cb      	str	r3, [r1, #12]
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001872:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	43db      	mvns	r3, r3
 800187a:	491d      	ldr	r1, [pc, #116]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 800187c:	4013      	ands	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4917      	ldr	r1, [pc, #92]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4913      	ldr	r1, [pc, #76]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01f      	beq.n	80018f4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b4:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	490d      	ldr	r1, [pc, #52]	@ (80018f0 <HAL_GPIO_Init+0x2c0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e01f      	b.n	8001902 <HAL_GPIO_Init+0x2d2>
 80018c2:	bf00      	nop
 80018c4:	10320000 	.word	0x10320000
 80018c8:	10310000 	.word	0x10310000
 80018cc:	10220000 	.word	0x10220000
 80018d0:	10210000 	.word	0x10210000
 80018d4:	10120000 	.word	0x10120000
 80018d8:	10110000 	.word	0x10110000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000
 80018e4:	40010800 	.word	0x40010800
 80018e8:	40010c00 	.word	0x40010c00
 80018ec:	40011000 	.word	0x40011000
 80018f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_GPIO_Init+0x2f4>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4909      	ldr	r1, [pc, #36]	@ (8001924 <HAL_GPIO_Init+0x2f4>)
 80018fe:	4013      	ands	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	3301      	adds	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	f47f ae96 	bne.w	8001644 <HAL_GPIO_Init+0x14>
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	372c      	adds	r7, #44	@ 0x2c
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e001      	b.n	800194a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	807b      	strh	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001966:	787b      	ldrb	r3, [r7, #1]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001972:	e003      	b.n	800197c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	041a      	lsls	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	611a      	str	r2, [r3, #16]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
	...

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e272      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b92      	ldr	r3, [pc, #584]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
 80019c0:	4b8c      	ldr	r3, [pc, #560]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e24c      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x76>
 80019f0:	4b80      	ldr	r3, [pc, #512]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7f      	ldr	r2, [pc, #508]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b7b      	ldr	r3, [pc, #492]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b78      	ldr	r3, [pc, #480]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a44:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b68      	ldr	r3, [pc, #416]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a67      	ldr	r2, [pc, #412]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fccc 	bl	8001400 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fcc8 	bl	8001400 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e200      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe4>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fcb8 	bl	8001400 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fcb4 	bl	8001400 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	@ 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1ec      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ace:	4b49      	ldr	r3, [pc, #292]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b46      	ldr	r3, [pc, #280]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1c0      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4939      	ldr	r1, [pc, #228]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fc6d 	bl	8001400 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fc69 	bl	8001400 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1a1      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4927      	ldr	r1, [pc, #156]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b26      	ldr	r3, [pc, #152]	@ (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc4c 	bl	8001400 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc48 	bl	8001400 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e180      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fc2c 	bl	8001400 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc28 	bl	8001400 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e160      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fa9c 	bl	8002108 <RCC_Delay>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fc12 	bl	8001400 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc0e 	bl	8001400 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e146      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42420000 	.word	0x42420000
 8001bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b92      	ldr	r3, [pc, #584]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b88      	ldr	r3, [pc, #544]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a87      	ldr	r2, [pc, #540]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b85      	ldr	r3, [pc, #532]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b82      	ldr	r3, [pc, #520]	@ (8001e50 <HAL_RCC_OscConfig+0x4c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b7f      	ldr	r3, [pc, #508]	@ (8001e50 <HAL_RCC_OscConfig+0x4c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7e      	ldr	r2, [pc, #504]	@ (8001e50 <HAL_RCC_OscConfig+0x4c8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fbcf 	bl	8001400 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff fbcb 	bl	8001400 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	@ 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e103      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b75      	ldr	r3, [pc, #468]	@ (8001e50 <HAL_RCC_OscConfig+0x4c8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a6e      	ldr	r2, [pc, #440]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a69      	ldr	r2, [pc, #420]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b67      	ldr	r3, [pc, #412]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a66      	ldr	r2, [pc, #408]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x356>
 8001cc4:	4b61      	ldr	r3, [pc, #388]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a60      	ldr	r2, [pc, #384]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cde:	4b5b      	ldr	r3, [pc, #364]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b58      	ldr	r3, [pc, #352]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a57      	ldr	r2, [pc, #348]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fb7f 	bl	8001400 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff fb7b 	bl	8001400 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0b1      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fb69 	bl	8001400 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fb65 	bl	8001400 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e09b      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	4b40      	ldr	r3, [pc, #256]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8087 	beq.w	8001e7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d061      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d146      	bne.n	8001e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fb39 	bl	8001400 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7ff fb35 	bl	8001400 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e06d      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4921      	ldr	r1, [pc, #132]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	491b      	ldr	r1, [pc, #108]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <HAL_RCC_OscConfig+0x4cc>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fb09 	bl	8001400 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff fb05 	bl	8001400 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e03d      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
 8001e10:	e035      	b.n	8001e7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_RCC_OscConfig+0x4cc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff faf2 	bl	8001400 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff faee 	bl	8001400 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e026      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x498>
 8001e3e:	e01e      	b.n	8001e7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e019      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
 8001e54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_OscConfig+0x500>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000

08001e8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0d0      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b67      	ldr	r3, [pc, #412]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4965      	ldr	r1, [pc, #404]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee8:	4b59      	ldr	r3, [pc, #356]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ef2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f00:	4b53      	ldr	r3, [pc, #332]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a52      	ldr	r2, [pc, #328]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b50      	ldr	r3, [pc, #320]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	494d      	ldr	r1, [pc, #308]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d040      	beq.n	8001fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4a:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e073      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6a:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4936      	ldr	r1, [pc, #216]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f7c:	f7ff fa40 	bl	8001400 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7ff fa3c 	bl	8001400 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e053      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 020c 	and.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1eb      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d210      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b24      	ldr	r3, [pc, #144]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4922      	ldr	r1, [pc, #136]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	@ (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e032      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4916      	ldr	r1, [pc, #88]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490e      	ldr	r1, [pc, #56]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800201a:	f000 f821 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	490a      	ldr	r1, [pc, #40]	@ (8002054 <HAL_RCC_ClockConfig+0x1c8>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <HAL_RCC_ClockConfig+0x1cc>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_RCC_ClockConfig+0x1d0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f99e 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	0800296c 	.word	0x0800296c
 8002058:	20000004 	.word	0x20000004
 800205c:	2000000c 	.word	0x2000000c

08002060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x30>
 800208a:	2b08      	cmp	r3, #8
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x36>
 800208e:	e027      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002090:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002092:	613b      	str	r3, [r7, #16]
      break;
 8002094:	e027      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	0c9b      	lsrs	r3, r3, #18
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4a17      	ldr	r2, [pc, #92]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0c5b      	lsrs	r3, r3, #17
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	4a11      	ldr	r2, [pc, #68]	@ (8002100 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
 80020bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020c2:	fb03 f202 	mul.w	r2, r3, r2
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e004      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002104 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	613b      	str	r3, [r7, #16]
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020e2:	613b      	str	r3, [r7, #16]
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	693b      	ldr	r3, [r7, #16]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	007a1200 	.word	0x007a1200
 80020fc:	0800297c 	.word	0x0800297c
 8002100:	0800298c 	.word	0x0800298c
 8002104:	003d0900 	.word	0x003d0900

08002108 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002110:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <RCC_Delay+0x34>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <RCC_Delay+0x38>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002124:	bf00      	nop
  }
  while (Delay --);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1e5a      	subs	r2, r3, #1
 800212a:	60fa      	str	r2, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <RCC_Delay+0x1c>
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	20000004 	.word	0x20000004
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e041      	b.n	80021da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe ffaa 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f000 fa56 	bl	8002634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d001      	beq.n	80021fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e035      	b.n	8002268 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_TIM_Base_Start_IT+0x90>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_TIM_Base_Start_IT+0x4e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002226:	d004      	beq.n	8002232 <HAL_TIM_Base_Start_IT+0x4e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a12      	ldr	r2, [pc, #72]	@ (8002278 <HAL_TIM_Base_Start_IT+0x94>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d111      	bne.n	8002256 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b06      	cmp	r3, #6
 8002242:	d010      	beq.n	8002266 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	e007      	b.n	8002266 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40000400 	.word	0x40000400

0800227c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d020      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01b      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0202 	mvn.w	r2, #2
 80022b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f998 	bl	80025fc <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f98b 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f99a 	bl	800260e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d020      	beq.n	800232c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01b      	beq.n	800232c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0204 	mvn.w	r2, #4
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f972 	bl	80025fc <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f965 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f974 	bl	800260e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d020      	beq.n	8002378 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0208 	mvn.w	r2, #8
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2204      	movs	r2, #4
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f94c 	bl	80025fc <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f93f 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f94e 	bl	800260e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d020      	beq.n	80023c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01b      	beq.n	80023c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0210 	mvn.w	r2, #16
 8002394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2208      	movs	r2, #8
 800239a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f926 	bl	80025fc <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f919 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f928 	bl	800260e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00c      	beq.n	80023e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0201 	mvn.w	r2, #1
 80023e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe fd22 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00c      	beq.n	800240c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa6f 	bl	80028ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00c      	beq.n	8002430 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8f8 	bl	8002620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00c      	beq.n	8002454 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0220 	mvn.w	r2, #32
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa42 	bl	80028d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_TIM_ConfigClockSource+0x1c>
 8002474:	2302      	movs	r3, #2
 8002476:	e0b4      	b.n	80025e2 <HAL_TIM_ConfigClockSource+0x186>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800249e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024b0:	d03e      	beq.n	8002530 <HAL_TIM_ConfigClockSource+0xd4>
 80024b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024b6:	f200 8087 	bhi.w	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024be:	f000 8086 	beq.w	80025ce <HAL_TIM_ConfigClockSource+0x172>
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c6:	d87f      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b70      	cmp	r3, #112	@ 0x70
 80024ca:	d01a      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0xa6>
 80024cc:	2b70      	cmp	r3, #112	@ 0x70
 80024ce:	d87b      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b60      	cmp	r3, #96	@ 0x60
 80024d2:	d050      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x11a>
 80024d4:	2b60      	cmp	r3, #96	@ 0x60
 80024d6:	d877      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b50      	cmp	r3, #80	@ 0x50
 80024da:	d03c      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xfa>
 80024dc:	2b50      	cmp	r3, #80	@ 0x50
 80024de:	d873      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b40      	cmp	r3, #64	@ 0x40
 80024e2:	d058      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x13a>
 80024e4:	2b40      	cmp	r3, #64	@ 0x40
 80024e6:	d86f      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b30      	cmp	r3, #48	@ 0x30
 80024ea:	d064      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x15a>
 80024ec:	2b30      	cmp	r3, #48	@ 0x30
 80024ee:	d86b      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d060      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x15a>
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d867      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05c      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x15a>
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d05a      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002500:	e062      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002512:	f000 f96a 	bl	80027ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	609a      	str	r2, [r3, #8]
      break;
 800252e:	e04f      	b.n	80025d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002540:	f000 f953 	bl	80027ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002552:	609a      	str	r2, [r3, #8]
      break;
 8002554:	e03c      	b.n	80025d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	461a      	mov	r2, r3
 8002564:	f000 f8ca 	bl	80026fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2150      	movs	r1, #80	@ 0x50
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f921 	bl	80027b6 <TIM_ITRx_SetConfig>
      break;
 8002574:	e02c      	b.n	80025d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002582:	461a      	mov	r2, r3
 8002584:	f000 f8e8 	bl	8002758 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2160      	movs	r1, #96	@ 0x60
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f911 	bl	80027b6 <TIM_ITRx_SetConfig>
      break;
 8002594:	e01c      	b.n	80025d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a2:	461a      	mov	r2, r3
 80025a4:	f000 f8aa 	bl	80026fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2140      	movs	r1, #64	@ 0x40
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f901 	bl	80027b6 <TIM_ITRx_SetConfig>
      break;
 80025b4:	e00c      	b.n	80025d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f000 f8f8 	bl	80027b6 <TIM_ITRx_SetConfig>
      break;
 80025c6:	e003      	b.n	80025d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e000      	b.n	80025d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
	...

08002634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a2b      	ldr	r2, [pc, #172]	@ (80026f4 <TIM_Base_SetConfig+0xc0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d007      	beq.n	800265c <TIM_Base_SetConfig+0x28>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002652:	d003      	beq.n	800265c <TIM_Base_SetConfig+0x28>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a28      	ldr	r2, [pc, #160]	@ (80026f8 <TIM_Base_SetConfig+0xc4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d108      	bne.n	800266e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a20      	ldr	r2, [pc, #128]	@ (80026f4 <TIM_Base_SetConfig+0xc0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <TIM_Base_SetConfig+0x52>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800267c:	d003      	beq.n	8002686 <TIM_Base_SetConfig+0x52>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <TIM_Base_SetConfig+0xc4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d108      	bne.n	8002698 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800268c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <TIM_Base_SetConfig+0xc0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d103      	bne.n	80026cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f023 0201 	bic.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
  }
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40000400 	.word	0x40000400

080026fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f023 0201 	bic.w	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 030a 	bic.w	r3, r3, #10
 8002738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f023 0210 	bic.w	r2, r3, #16
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	031b      	lsls	r3, r3, #12
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002794:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	621a      	str	r2, [r3, #32]
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f043 0307 	orr.w	r3, r3, #7
 80027d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b087      	sub	sp, #28
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002804:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	021a      	lsls	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4313      	orrs	r3, r2
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	609a      	str	r2, [r3, #8]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800283c:	2302      	movs	r3, #2
 800283e:	e041      	b.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800288c:	d004      	beq.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a10      	ldr	r2, [pc, #64]	@ (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10c      	bne.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800289e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400

080028d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <memset>:
 80028fc:	4603      	mov	r3, r0
 80028fe:	4402      	add	r2, r0
 8002900:	4293      	cmp	r3, r2
 8002902:	d100      	bne.n	8002906 <memset+0xa>
 8002904:	4770      	bx	lr
 8002906:	f803 1b01 	strb.w	r1, [r3], #1
 800290a:	e7f9      	b.n	8002900 <memset+0x4>

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2600      	movs	r6, #0
 8002910:	4d0c      	ldr	r5, [pc, #48]	@ (8002944 <__libc_init_array+0x38>)
 8002912:	4c0d      	ldr	r4, [pc, #52]	@ (8002948 <__libc_init_array+0x3c>)
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	f000 f81a 	bl	8002954 <_init>
 8002920:	2600      	movs	r6, #0
 8002922:	4d0a      	ldr	r5, [pc, #40]	@ (800294c <__libc_init_array+0x40>)
 8002924:	4c0a      	ldr	r4, [pc, #40]	@ (8002950 <__libc_init_array+0x44>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	f855 3b04 	ldr.w	r3, [r5], #4
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	f855 3b04 	ldr.w	r3, [r5], #4
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	08002990 	.word	0x08002990
 8002948:	08002990 	.word	0x08002990
 800294c:	08002990 	.word	0x08002990
 8002950:	08002994 	.word	0x08002994

08002954 <_init>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr

08002960 <_fini>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	bf00      	nop
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr
