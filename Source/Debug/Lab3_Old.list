
Lab3_Old.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d98  08002d98  00003d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dbc  08002dbc  00004038  2**0
                  CONTENTS
  4 .ARM          00000000  08002dbc  08002dbc  00004038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dbc  08002dbc  00004038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dbc  08002dbc  00003dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08002dc4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000038  08002dfc  00004038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002dfc  00004108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089a6  00000000  00000000  00004061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d37  00000000  00000000  0000ca07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0000e740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085b  00000000  00000000  0000f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171b0  00000000  00000000  0000fa9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1d5  00000000  00000000  00026c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a74  00000000  00000000  00033e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae0  00000000  00000000  000b68d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b93b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d80 	.word	0x08002d80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002d80 	.word	0x08002d80

0800014c <runBlinkingLed>:
/*Temp of time duration when not set yet*/
int Time_LedRed_Duration_Temp = 1;
int Time_LedYellow_Duration_Temp = 1;
int Time_LedGreen_Duration_Temp = 1;

void runBlinkingLed(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	/*If mode is 2,3,4*/
	if(FSM_State >= NORMAL_STATE_MODE_2 && FSM_State <= NORMAL_STATE_MODE_4){
 8000152:	4b46      	ldr	r3, [pc, #280]	@ (800026c <runBlinkingLed+0x120>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	2b03      	cmp	r3, #3
 8000158:	dd79      	ble.n	800024e <runBlinkingLed+0x102>
 800015a:	4b44      	ldr	r3, [pc, #272]	@ (800026c <runBlinkingLed+0x120>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b06      	cmp	r3, #6
 8000160:	dc75      	bgt.n	800024e <runBlinkingLed+0x102>
		if(FSM_State == NORMAL_STATE_MODE_2){
 8000162:	4b42      	ldr	r3, [pc, #264]	@ (800026c <runBlinkingLed+0x120>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2b04      	cmp	r3, #4
 8000168:	d109      	bne.n	800017e <runBlinkingLed+0x32>
			activeTimer(BLINKING_LED_RED_TIMER);
 800016a:	2003      	movs	r0, #3
 800016c:	f001 f9d8 	bl	8001520 <activeTimer>
			ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 8000170:	2004      	movs	r0, #4
 8000172:	f001 f9c5 	bl	8001500 <ignoreTimer>
			ignoreTimer(BLINKING_LED_GREEN_TIMER);
 8000176:	2005      	movs	r0, #5
 8000178:	f001 f9c2 	bl	8001500 <ignoreTimer>
 800017c:	e01a      	b.n	80001b4 <runBlinkingLed+0x68>
		}
		else if(FSM_State == NORMAL_STATE_MODE_3){
 800017e:	4b3b      	ldr	r3, [pc, #236]	@ (800026c <runBlinkingLed+0x120>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b05      	cmp	r3, #5
 8000184:	d109      	bne.n	800019a <runBlinkingLed+0x4e>
			activeTimer(BLINKING_LED_YELLOW_TIMER);
 8000186:	2004      	movs	r0, #4
 8000188:	f001 f9ca 	bl	8001520 <activeTimer>
			ignoreTimer(BLINKING_LED_RED_TIMER);
 800018c:	2003      	movs	r0, #3
 800018e:	f001 f9b7 	bl	8001500 <ignoreTimer>
			ignoreTimer(BLINKING_LED_GREEN_TIMER);
 8000192:	2005      	movs	r0, #5
 8000194:	f001 f9b4 	bl	8001500 <ignoreTimer>
 8000198:	e00c      	b.n	80001b4 <runBlinkingLed+0x68>
		}
		else if(FSM_State == NORMAL_STATE_MODE_4){
 800019a:	4b34      	ldr	r3, [pc, #208]	@ (800026c <runBlinkingLed+0x120>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b06      	cmp	r3, #6
 80001a0:	d108      	bne.n	80001b4 <runBlinkingLed+0x68>
			activeTimer(BLINKING_LED_GREEN_TIMER);
 80001a2:	2005      	movs	r0, #5
 80001a4:	f001 f9bc 	bl	8001520 <activeTimer>
			ignoreTimer(BLINKING_LED_RED_TIMER);
 80001a8:	2003      	movs	r0, #3
 80001aa:	f001 f9a9 	bl	8001500 <ignoreTimer>
			ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 80001ae:	2004      	movs	r0, #4
 80001b0:	f001 f9a6 	bl	8001500 <ignoreTimer>
		else{
			/*This is fault mode*/
		}


		if(getTimerFlags(BLINKING_LED_RED_TIMER)){
 80001b4:	2003      	movs	r0, #3
 80001b6:	f001 f993 	bl	80014e0 <getTimerFlags>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d012      	beq.n	80001e6 <runBlinkingLed+0x9a>
			HAL_GPIO_TogglePin(LED13_RED_GPIO_Port, LED13_RED_Pin);
 80001c0:	2108      	movs	r1, #8
 80001c2:	482b      	ldr	r0, [pc, #172]	@ (8000270 <runBlinkingLed+0x124>)
 80001c4:	f001 fddd 	bl	8001d82 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_RED_GPIO_Port, LED24_RED_Pin);
 80001c8:	2140      	movs	r1, #64	@ 0x40
 80001ca:	4829      	ldr	r0, [pc, #164]	@ (8000270 <runBlinkingLed+0x124>)
 80001cc:	f001 fdd9 	bl	8001d82 <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedRed_Duration * TIME_SCALER) / 2;
 80001d0:	4b28      	ldr	r3, [pc, #160]	@ (8000274 <runBlinkingLed+0x128>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80001d8:	fb02 f303 	mul.w	r3, r2, r3
 80001dc:	60fb      	str	r3, [r7, #12]

			setTimer(BLINKING_LED_RED_TIMER, Time_Blinking);
 80001de:	68f9      	ldr	r1, [r7, #12]
 80001e0:	2003      	movs	r0, #3
 80001e2:	f001 f9ad 	bl	8001540 <setTimer>
		}

		if(getTimerFlags(BLINKING_LED_YELLOW_TIMER)){
 80001e6:	2004      	movs	r0, #4
 80001e8:	f001 f97a 	bl	80014e0 <getTimerFlags>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d012      	beq.n	8000218 <runBlinkingLed+0xcc>
			HAL_GPIO_TogglePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin);
 80001f2:	2110      	movs	r1, #16
 80001f4:	481e      	ldr	r0, [pc, #120]	@ (8000270 <runBlinkingLed+0x124>)
 80001f6:	f001 fdc4 	bl	8001d82 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin);
 80001fa:	2180      	movs	r1, #128	@ 0x80
 80001fc:	481c      	ldr	r0, [pc, #112]	@ (8000270 <runBlinkingLed+0x124>)
 80001fe:	f001 fdc0 	bl	8001d82 <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedYellow_Duration * TIME_SCALER) / 2;
 8000202:	4b1d      	ldr	r3, [pc, #116]	@ (8000278 <runBlinkingLed+0x12c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800020a:	fb02 f303 	mul.w	r3, r2, r3
 800020e:	60bb      	str	r3, [r7, #8]

			setTimer(BLINKING_LED_YELLOW_TIMER, Time_Blinking);
 8000210:	68b9      	ldr	r1, [r7, #8]
 8000212:	2004      	movs	r0, #4
 8000214:	f001 f994 	bl	8001540 <setTimer>
		}

		if(getTimerFlags(BLINKING_LED_GREEN_TIMER)){
 8000218:	2005      	movs	r0, #5
 800021a:	f001 f961 	bl	80014e0 <getTimerFlags>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d01e      	beq.n	8000262 <runBlinkingLed+0x116>
			HAL_GPIO_TogglePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin);
 8000224:	2120      	movs	r1, #32
 8000226:	4812      	ldr	r0, [pc, #72]	@ (8000270 <runBlinkingLed+0x124>)
 8000228:	f001 fdab 	bl	8001d82 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin);
 800022c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000230:	480f      	ldr	r0, [pc, #60]	@ (8000270 <runBlinkingLed+0x124>)
 8000232:	f001 fda6 	bl	8001d82 <HAL_GPIO_TogglePin>

			int Time_Blinking = (Time_LedGreen_Duration * TIME_SCALER) / 2;
 8000236:	4b11      	ldr	r3, [pc, #68]	@ (800027c <runBlinkingLed+0x130>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800023e:	fb02 f303 	mul.w	r3, r2, r3
 8000242:	607b      	str	r3, [r7, #4]

			setTimer(BLINKING_LED_GREEN_TIMER, Time_Blinking);
 8000244:	6879      	ldr	r1, [r7, #4]
 8000246:	2005      	movs	r0, #5
 8000248:	f001 f97a 	bl	8001540 <setTimer>
		if(getTimerFlags(BLINKING_LED_GREEN_TIMER)){
 800024c:	e009      	b.n	8000262 <runBlinkingLed+0x116>
		}
	}
	else{
		ignoreTimer(BLINKING_LED_RED_TIMER);
 800024e:	2003      	movs	r0, #3
 8000250:	f001 f956 	bl	8001500 <ignoreTimer>
		ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 8000254:	2004      	movs	r0, #4
 8000256:	f001 f953 	bl	8001500 <ignoreTimer>
		ignoreTimer(BLINKING_LED_GREEN_TIMER);
 800025a:	2005      	movs	r0, #5
 800025c:	f001 f950 	bl	8001500 <ignoreTimer>
	}
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000054 	.word	0x20000054
 8000270:	40010c00 	.word	0x40010c00
 8000274:	20000000 	.word	0x20000000
 8000278:	20000004 	.word	0x20000004
 800027c:	20000008 	.word	0x20000008

08000280 <setEnviromentStateInit>:
#include "fsm.h"

/*Default Mode*/
int FSM_State;

void setEnviromentStateInit(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 8000284:	4b1a      	ldr	r3, [pc, #104]	@ (80002f0 <setEnviromentStateInit+0x70>)
 8000286:	2205      	movs	r2, #5
 8000288:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 800028a:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <setEnviromentStateInit+0x74>)
 800028c:	2203      	movs	r2, #3
 800028e:	601a      	str	r2, [r3, #0]
	/*7Seg display immediate*/
	display7SEG_13(Led13_Count);
 8000290:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <setEnviromentStateInit+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fc0d 	bl	8000ab4 <display7SEG_13>
	display7SEG_24(Led24_Count);
 800029a:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <setEnviromentStateInit+0x74>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fd98 	bl	8000dd4 <display7SEG_24>

	/*Run immediate so delay when first time is 0*/
	setTimer(BLINKING_LED_RED_TIMER, (Time_LedRed_Duration * TIME_SCALER)/2);
 80002a4:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <setEnviromentStateInit+0x78>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	4619      	mov	r1, r3
 80002b2:	2003      	movs	r0, #3
 80002b4:	f001 f944 	bl	8001540 <setTimer>
	setTimer(BLINKING_LED_YELLOW_TIMER, (Time_LedYellow_Duration * TIME_SCALER)/2);
 80002b8:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <setEnviromentStateInit+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002c0:	fb02 f303 	mul.w	r3, r2, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	2004      	movs	r0, #4
 80002c8:	f001 f93a 	bl	8001540 <setTimer>
	setTimer(BLINKING_LED_GREEN_TIMER, (Time_LedGreen_Duration * TIME_SCALER)/2);
 80002cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <setEnviromentStateInit+0x80>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002d4:	fb02 f303 	mul.w	r3, r2, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	2005      	movs	r0, #5
 80002dc:	f001 f930 	bl	8001540 <setTimer>

	setEnviromentState0();
 80002e0:	f000 f812 	bl	8000308 <setEnviromentState0>
	FSM_State = RED_GREEN_STATE_MODE1;
 80002e4:	4b07      	ldr	r3, [pc, #28]	@ (8000304 <setEnviromentStateInit+0x84>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000006c 	.word	0x2000006c
 80002f4:	20000070 	.word	0x20000070
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000008 	.word	0x20000008
 8000304:	20000054 	.word	0x20000054

08000308 <setEnviromentState0>:

void setEnviromentState0(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	Led13_Count = 5;
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <setEnviromentState0+0x44>)
 800030e:	2205      	movs	r2, #5
 8000310:	601a      	str	r2, [r3, #0]
	Led24_Count = 3;
 8000312:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <setEnviromentState0+0x48>)
 8000314:	2203      	movs	r2, #3
 8000316:	601a      	str	r2, [r3, #0]
	/*Active timer*/
	activeTimer(DELAY_TIMER);
 8000318:	2000      	movs	r0, #0
 800031a:	f001 f901 	bl	8001520 <activeTimer>
	activeTimer(TRAFFIC_TIMER);
 800031e:	2001      	movs	r0, #1
 8000320:	f001 f8fe 	bl	8001520 <activeTimer>
	ignoreTimer(BLINKING_LED_RED_TIMER);
 8000324:	2003      	movs	r0, #3
 8000326:	f001 f8eb 	bl	8001500 <ignoreTimer>
	ignoreTimer(BLINKING_LED_YELLOW_TIMER);
 800032a:	2004      	movs	r0, #4
 800032c:	f001 f8e8 	bl	8001500 <ignoreTimer>
	ignoreTimer(BLINKING_LED_GREEN_TIMER);
 8000330:	2005      	movs	r0, #5
 8000332:	f001 f8e5 	bl	8001500 <ignoreTimer>
	/*Disable 7Seg not use*/

	setTimer(DELAY_TIMER, 0);
 8000336:	2100      	movs	r1, #0
 8000338:	2000      	movs	r0, #0
 800033a:	f001 f901 	bl	8001540 <setTimer>
	setTimer(TRAFFIC_TIMER, 3000);
 800033e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000342:	2001      	movs	r0, #1
 8000344:	f001 f8fc 	bl	8001540 <setTimer>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	2000006c 	.word	0x2000006c
 8000350:	20000070 	.word	0x20000070

08000354 <setEnviromentState1>:

void setEnviromentState1(void){
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	Led24_Count = 2;
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <setEnviromentState1+0x18>)
 800035a:	2202      	movs	r2, #2
 800035c:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 800035e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000362:	2001      	movs	r0, #1
 8000364:	f001 f8ec 	bl	8001540 <setTimer>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000070 	.word	0x20000070

08000370 <setEnviromentState2>:
void setEnviromentState2(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	Led13_Count = 3;
 8000374:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <setEnviromentState2+0x20>)
 8000376:	2203      	movs	r2, #3
 8000378:	601a      	str	r2, [r3, #0]
	Led24_Count = 5;
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <setEnviromentState2+0x24>)
 800037c:	2205      	movs	r2, #5
 800037e:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 3000);
 8000380:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000384:	2001      	movs	r0, #1
 8000386:	f001 f8db 	bl	8001540 <setTimer>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	2000006c 	.word	0x2000006c
 8000394:	20000070 	.word	0x20000070

08000398 <setEnviromentState3>:

void setEnviromentState3(void){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	Led13_Count = 2;
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <setEnviromentState3+0x18>)
 800039e:	2202      	movs	r2, #2
 80003a0:	601a      	str	r2, [r3, #0]
	setTimer(TRAFFIC_TIMER, 2000);
 80003a2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80003a6:	2001      	movs	r0, #1
 80003a8:	f001 f8ca 	bl	8001540 <setTimer>
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000006c 	.word	0x2000006c

080003b4 <setEnviromentState4>:

void setEnviromentState4(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	/*Clear all traffic led in mode 1*/
	clearAllTraffic();
 80003b8:	f001 f914 	bl	80015e4 <clearAllTraffic>
	/*Ignore timer delay and timer traffic*/
	ignoreTimer(DELAY_TIMER);
 80003bc:	2000      	movs	r0, #0
 80003be:	f001 f89f 	bl	8001500 <ignoreTimer>
	ignoreTimer(TRAFFIC_TIMER);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f001 f89c 	bl	8001500 <ignoreTimer>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <setEnviromentState5>:

void setEnviromentState5(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	/*Clear all traffic led in mode 1*/
	clearAllTraffic();
 80003d0:	f001 f908 	bl	80015e4 <clearAllTraffic>
	/*Ignore timer delay and timer traffic*/
	ignoreTimer(DELAY_TIMER);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f001 f893 	bl	8001500 <ignoreTimer>
	ignoreTimer(TRAFFIC_TIMER);
 80003da:	2001      	movs	r0, #1
 80003dc:	f001 f890 	bl	8001500 <ignoreTimer>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <setEnviromentState6>:

void setEnviromentState6(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	/*Clear all traffic led in mode 1*/
	clearAllTraffic();
 80003e8:	f001 f8fc 	bl	80015e4 <clearAllTraffic>
	/*Ignore timer delay and timer traffic*/
	ignoreTimer(DELAY_TIMER);
 80003ec:	2000      	movs	r0, #0
 80003ee:	f001 f887 	bl	8001500 <ignoreTimer>
	ignoreTimer(TRAFFIC_TIMER);
 80003f2:	2001      	movs	r0, #1
 80003f4:	f001 f884 	bl	8001500 <ignoreTimer>
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}

080003fc <doState0>:

void doState0(void){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	doRedGreen_Traffic();
 8000400:	f001 f916 	bl	8001630 <doRedGreen_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000404:	2000      	movs	r0, #0
 8000406:	f001 f86b 	bl	80014e0 <getTimerFlags>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d018      	beq.n	8000442 <doState0+0x46>

		/*Just for debug
		HAL_GPIO_WritePin(CHECK_GPIO_Port, CHECK_Pin, GPIO_PIN_RESET);*/
		display7SEG_13(Led13_Count);
 8000410:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <doState0+0x4c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fb4d 	bl	8000ab4 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <doState0+0x50>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fcd8 	bl	8000dd4 <display7SEG_24>

		Led13_Count--;
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <doState0+0x4c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a07      	ldr	r2, [pc, #28]	@ (8000448 <doState0+0x4c>)
 800042c:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 800042e:	4b07      	ldr	r3, [pc, #28]	@ (800044c <doState0+0x50>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	3b01      	subs	r3, #1
 8000434:	4a05      	ldr	r2, [pc, #20]	@ (800044c <doState0+0x50>)
 8000436:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 8000438:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800043c:	2000      	movs	r0, #0
 800043e:	f001 f87f 	bl	8001540 <setTimer>
	}
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	2000006c 	.word	0x2000006c
 800044c:	20000070 	.word	0x20000070

08000450 <doState1>:

void doState1(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	doRedYellow_Traffic();
 8000454:	f001 f912 	bl	800167c <doRedYellow_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000458:	2000      	movs	r0, #0
 800045a:	f001 f841 	bl	80014e0 <getTimerFlags>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d018      	beq.n	8000496 <doState1+0x46>
		display7SEG_13(Led13_Count);
 8000464:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <doState1+0x4c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f000 fb23 	bl	8000ab4 <display7SEG_13>
		display7SEG_24(Led24_Count);
 800046e:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <doState1+0x50>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fcae 	bl	8000dd4 <display7SEG_24>

		Led13_Count--;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <doState1+0x4c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	3b01      	subs	r3, #1
 800047e:	4a07      	ldr	r2, [pc, #28]	@ (800049c <doState1+0x4c>)
 8000480:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 8000482:	4b07      	ldr	r3, [pc, #28]	@ (80004a0 <doState1+0x50>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	3b01      	subs	r3, #1
 8000488:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <doState1+0x50>)
 800048a:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 800048c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000490:	2000      	movs	r0, #0
 8000492:	f001 f855 	bl	8001540 <setTimer>
	}
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	2000006c 	.word	0x2000006c
 80004a0:	20000070 	.word	0x20000070

080004a4 <doState2>:

void doState2(void){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	doGreenRed_Traffic();
 80004a8:	f001 f8fa 	bl	80016a0 <doGreenRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 80004ac:	2000      	movs	r0, #0
 80004ae:	f001 f817 	bl	80014e0 <getTimerFlags>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d018      	beq.n	80004ea <doState2+0x46>
		display7SEG_13(Led13_Count);
 80004b8:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <doState2+0x4c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 faf9 	bl	8000ab4 <display7SEG_13>
		display7SEG_24(Led24_Count);
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <doState2+0x50>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fc84 	bl	8000dd4 <display7SEG_24>

		Led13_Count--;
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <doState2+0x4c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a07      	ldr	r2, [pc, #28]	@ (80004f0 <doState2+0x4c>)
 80004d4:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <doState2+0x50>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3b01      	subs	r3, #1
 80004dc:	4a05      	ldr	r2, [pc, #20]	@ (80004f4 <doState2+0x50>)
 80004de:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 80004e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004e4:	2000      	movs	r0, #0
 80004e6:	f001 f82b 	bl	8001540 <setTimer>
	}
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	2000006c 	.word	0x2000006c
 80004f4:	20000070 	.word	0x20000070

080004f8 <doState3>:

void doState3(void){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	doYellowRed_Traffic();
 80004fc:	f001 f8ea 	bl	80016d4 <doYellowRed_Traffic>

	if(getTimerFlags(DELAY_TIMER)){
 8000500:	2000      	movs	r0, #0
 8000502:	f000 ffed 	bl	80014e0 <getTimerFlags>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d018      	beq.n	800053e <doState3+0x46>
		display7SEG_13(Led13_Count);
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <doState3+0x4c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f000 facf 	bl	8000ab4 <display7SEG_13>
		display7SEG_24(Led24_Count);
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <doState3+0x50>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fc5a 	bl	8000dd4 <display7SEG_24>

		Led13_Count--;
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <doState3+0x4c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3b01      	subs	r3, #1
 8000526:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <doState3+0x4c>)
 8000528:	6013      	str	r3, [r2, #0]
		Led24_Count--;
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <doState3+0x50>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3b01      	subs	r3, #1
 8000530:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <doState3+0x50>)
 8000532:	6013      	str	r3, [r2, #0]

		setTimer(DELAY_TIMER, 1000);
 8000534:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000538:	2000      	movs	r0, #0
 800053a:	f001 f801 	bl	8001540 <setTimer>
	}
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	2000006c 	.word	0x2000006c
 8000548:	20000070 	.word	0x20000070

0800054c <doState4>:

void doState4(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	/*Display two 7seg for time duration value
	and one 7seg for mode becaue mode 1->4*/
	display7SEG_13((int)(Time_LedRed_Duration_Temp / 10));
 8000550:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <doState4+0x78>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1c      	ldr	r2, [pc, #112]	@ (80005c8 <doState4+0x7c>)
 8000556:	fb82 1203 	smull	r1, r2, r2, r3
 800055a:	1092      	asrs	r2, r2, #2
 800055c:	17db      	asrs	r3, r3, #31
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	4618      	mov	r0, r3
 8000562:	f000 faa7 	bl	8000ab4 <display7SEG_13>
	//display7SEG_Time((int)(Time_LedRed_Duration_Temp % 10));
	/*Display mode*/
	display7SEG_24(FSM_State - 2);
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <doState4+0x80>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3b02      	subs	r3, #2
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fc31 	bl	8000dd4 <display7SEG_24>

	if(is_button_pressed(1)){
 8000572:	2001      	movs	r0, #1
 8000574:	f000 f9c2 	bl	80008fc <is_button_pressed>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00b      	beq.n	8000596 <doState4+0x4a>
		/*Increase time duration by one*/
		Time_LedRed_Duration_Temp++;
 800057e:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <doState4+0x78>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	4a0f      	ldr	r2, [pc, #60]	@ (80005c4 <doState4+0x78>)
 8000586:	6013      	str	r3, [r2, #0]

		if(Time_LedRed_Duration_Temp > 99){
 8000588:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <doState4+0x78>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b63      	cmp	r3, #99	@ 0x63
 800058e:	dd02      	ble.n	8000596 <doState4+0x4a>
			Time_LedRed_Duration_Temp = 1;
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <doState4+0x78>)
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
		}
	}

	if(is_button_pressed(2)){
 8000596:	2002      	movs	r0, #2
 8000598:	f000 f9b0 	bl	80008fc <is_button_pressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00d      	beq.n	80005be <doState4+0x72>
		/*Update blinking time duration*/
		Time_LedRed_Duration = Time_LedRed_Duration_Temp;
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <doState4+0x78>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <doState4+0x84>)
 80005a8:	6013      	str	r3, [r2, #0]
		setTimer(BLINKING_LED_RED_TIMER, (Time_LedRed_Duration * TIME_SCALER)/2);
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <doState4+0x84>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 ffc1 	bl	8001540 <setTimer>
	}
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000000c 	.word	0x2000000c
 80005c8:	66666667 	.word	0x66666667
 80005cc:	20000054 	.word	0x20000054
 80005d0:	20000000 	.word	0x20000000

080005d4 <doState5>:

void doState5(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	/*Display two 7seg for time duration value
	and one 7seg for mode becaue mode 1->4*/
	display7SEG_13((int)(Time_LedYellow_Duration_Temp / 10));
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <doState5+0x70>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000648 <doState5+0x74>)
 80005de:	fb82 1203 	smull	r1, r2, r2, r3
 80005e2:	1092      	asrs	r2, r2, #2
 80005e4:	17db      	asrs	r3, r3, #31
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fa63 	bl	8000ab4 <display7SEG_13>
	//display7SEG_Time((int)(Time_LedYellow_Duration_Temp % 10));
	/*Display mode*/
	display7SEG_24(FSM_State - 2);
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <doState5+0x78>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3b02      	subs	r3, #2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fbed 	bl	8000dd4 <display7SEG_24>

	if(buttonState[1] == BUTTON_PRESSED){
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <doState5+0x7c>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d10b      	bne.n	800061a <doState5+0x46>
		/*Increase time duration by one*/
		Time_LedYellow_Duration_Temp++;
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <doState5+0x70>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <doState5+0x70>)
 800060a:	6013      	str	r3, [r2, #0]

		if(Time_LedYellow_Duration_Temp > 99){
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <doState5+0x70>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b63      	cmp	r3, #99	@ 0x63
 8000612:	dd02      	ble.n	800061a <doState5+0x46>
			Time_LedYellow_Duration_Temp = 1;
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <doState5+0x70>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
		}
	}

	if(buttonState[2] == BUTTON_PRESSED){
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <doState5+0x7c>)
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d10d      	bne.n	800063e <doState5+0x6a>
		/*Update blinking time duration*/
		Time_LedYellow_Duration = Time_LedYellow_Duration_Temp;
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <doState5+0x70>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a0b      	ldr	r2, [pc, #44]	@ (8000654 <doState5+0x80>)
 8000628:	6013      	str	r3, [r2, #0]
		setTimer(BLINKING_LED_YELLOW_TIMER, (Time_LedGreen_Duration * TIME_SCALER)/2);
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <doState5+0x84>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000632:	fb02 f303 	mul.w	r3, r2, r3
 8000636:	4619      	mov	r1, r3
 8000638:	2004      	movs	r0, #4
 800063a:	f000 ff81 	bl	8001540 <setTimer>
	}
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000010 	.word	0x20000010
 8000648:	66666667 	.word	0x66666667
 800064c:	20000054 	.word	0x20000054
 8000650:	20000058 	.word	0x20000058
 8000654:	20000004 	.word	0x20000004
 8000658:	20000008 	.word	0x20000008

0800065c <doState6>:

void doState6(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	/*Display two 7seg for time duration value
	and one 7seg for mode becaue mode 1->4*/
	display7SEG_13((int)(Time_LedGreen_Duration_Temp / 10));
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <doState6+0x70>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1a      	ldr	r2, [pc, #104]	@ (80006d0 <doState6+0x74>)
 8000666:	fb82 1203 	smull	r1, r2, r2, r3
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	17db      	asrs	r3, r3, #31
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fa1f 	bl	8000ab4 <display7SEG_13>
	//display7SEG_Time((int)(Time_LedGreen_Duration_Temp % 10));
	/*Display mode*/
	display7SEG_24(FSM_State - 2);
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <doState6+0x78>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3b02      	subs	r3, #2
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fba9 	bl	8000dd4 <display7SEG_24>

	if(buttonState[1] == BUTTON_PRESSED){
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <doState6+0x7c>)
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d10b      	bne.n	80006a2 <doState6+0x46>
		/*Increase time duration by one*/
		Time_LedGreen_Duration_Temp++;
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <doState6+0x70>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	4a0e      	ldr	r2, [pc, #56]	@ (80006cc <doState6+0x70>)
 8000692:	6013      	str	r3, [r2, #0]

		if(Time_LedGreen_Duration_Temp > 99){
 8000694:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <doState6+0x70>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b63      	cmp	r3, #99	@ 0x63
 800069a:	dd02      	ble.n	80006a2 <doState6+0x46>
			Time_LedGreen_Duration_Temp = 1;
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <doState6+0x70>)
 800069e:	2201      	movs	r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
		}
	}

	if(buttonState[2] == BUTTON_PRESSED){
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <doState6+0x7c>)
 80006a4:	789b      	ldrb	r3, [r3, #2]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d10d      	bne.n	80006c6 <doState6+0x6a>
		/*Update blinking time duration*/
		Time_LedGreen_Duration = Time_LedGreen_Duration_Temp;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <doState6+0x70>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <doState6+0x80>)
 80006b0:	6013      	str	r3, [r2, #0]
		setTimer(BLINKING_LED_GREEN_TIMER, (Time_LedGreen_Duration * TIME_SCALER)/2);
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <doState6+0x80>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	2005      	movs	r0, #5
 80006c2:	f000 ff3d 	bl	8001540 <setTimer>
	}
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000014 	.word	0x20000014
 80006d0:	66666667 	.word	0x66666667
 80006d4:	20000054 	.word	0x20000054
 80006d8:	20000058 	.word	0x20000058
 80006dc:	20000008 	.word	0x20000008

080006e0 <runFSM>:


void runFSM(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	switch(FSM_State){
 80006e4:	4b54      	ldr	r3, [pc, #336]	@ (8000838 <runFSM+0x158>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	f200 8093 	bhi.w	8000814 <runFSM+0x134>
 80006ee:	a201      	add	r2, pc, #4	@ (adr r2, 80006f4 <runFSM+0x14>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000711 	.word	0x08000711
 80006f8:	08000743 	.word	0x08000743
 80006fc:	08000771 	.word	0x08000771
 8000700:	0800079f 	.word	0x0800079f
 8000704:	080007cd 	.word	0x080007cd
 8000708:	080007e5 	.word	0x080007e5
 800070c:	080007fd 	.word	0x080007fd
	case RED_GREEN_STATE_MODE1:
		doState0();
 8000710:	f7ff fe74 	bl	80003fc <doState0>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fee3 	bl	80014e0 <getTimerFlags>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <runFSM+0x4a>
			setEnviromentState1();
 8000720:	f7ff fe18 	bl	8000354 <setEnviromentState1>
			FSM_State = RED_YELLOW_STATE_MODE1;
 8000724:	4b44      	ldr	r3, [pc, #272]	@ (8000838 <runFSM+0x158>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
		}

		if(is_button_pressed(0)){
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f8e6 	bl	80008fc <is_button_pressed>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d070      	beq.n	8000818 <runFSM+0x138>
			setEnviromentState4();	/*Mode 2*/
 8000736:	f7ff fe3d 	bl	80003b4 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 800073a:	4b3f      	ldr	r3, [pc, #252]	@ (8000838 <runFSM+0x158>)
 800073c:	2204      	movs	r2, #4
 800073e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000740:	e06a      	b.n	8000818 <runFSM+0x138>
	case RED_YELLOW_STATE_MODE1:
		doState1();
 8000742:	f7ff fe85 	bl	8000450 <doState1>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000746:	2001      	movs	r0, #1
 8000748:	f000 feca 	bl	80014e0 <getTimerFlags>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d004      	beq.n	800075c <runFSM+0x7c>
			setEnviromentState2();
 8000752:	f7ff fe0d 	bl	8000370 <setEnviromentState2>
			FSM_State = GREEN_RED_STATE_MODE1;
 8000756:	4b38      	ldr	r3, [pc, #224]	@ (8000838 <runFSM+0x158>)
 8000758:	2202      	movs	r2, #2
 800075a:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 800075c:	4b37      	ldr	r3, [pc, #220]	@ (800083c <runFSM+0x15c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d15b      	bne.n	800081c <runFSM+0x13c>
			setEnviromentState4();	/*Mode 2*/
 8000764:	f7ff fe26 	bl	80003b4 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 8000768:	4b33      	ldr	r3, [pc, #204]	@ (8000838 <runFSM+0x158>)
 800076a:	2204      	movs	r2, #4
 800076c:	601a      	str	r2, [r3, #0]
		}
		break;
 800076e:	e055      	b.n	800081c <runFSM+0x13c>
	case GREEN_RED_STATE_MODE1:
		doState2();
 8000770:	f7ff fe98 	bl	80004a4 <doState2>

		if(getTimerFlags(TRAFFIC_TIMER)){
 8000774:	2001      	movs	r0, #1
 8000776:	f000 feb3 	bl	80014e0 <getTimerFlags>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d004      	beq.n	800078a <runFSM+0xaa>
			setEnviromentState3();
 8000780:	f7ff fe0a 	bl	8000398 <setEnviromentState3>
			FSM_State = YELLOW_RED_STATE_MODE1;
 8000784:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <runFSM+0x158>)
 8000786:	2203      	movs	r2, #3
 8000788:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 800078a:	4b2c      	ldr	r3, [pc, #176]	@ (800083c <runFSM+0x15c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d146      	bne.n	8000820 <runFSM+0x140>
			setEnviromentState4();	/*Mode 2*/
 8000792:	f7ff fe0f 	bl	80003b4 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <runFSM+0x158>)
 8000798:	2204      	movs	r2, #4
 800079a:	601a      	str	r2, [r3, #0]
		}
		break;
 800079c:	e040      	b.n	8000820 <runFSM+0x140>
	case YELLOW_RED_STATE_MODE1:
		doState3();
 800079e:	f7ff feab 	bl	80004f8 <doState3>

		if(getTimerFlags(TRAFFIC_TIMER)){
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 fe9c 	bl	80014e0 <getTimerFlags>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d004      	beq.n	80007b8 <runFSM+0xd8>
			setEnviromentState0();
 80007ae:	f7ff fdab 	bl	8000308 <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <runFSM+0x158>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
		}

		if(buttonState[0] == BUTTON_PRESSED){
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <runFSM+0x15c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d131      	bne.n	8000824 <runFSM+0x144>
			setEnviromentState4();	/*Mode 2*/
 80007c0:	f7ff fdf8 	bl	80003b4 <setEnviromentState4>
			FSM_State = NORMAL_STATE_MODE_2;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <runFSM+0x158>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80007ca:	e02b      	b.n	8000824 <runFSM+0x144>
	case NORMAL_STATE_MODE_2:
		doState4();
 80007cc:	f7ff febe 	bl	800054c <doState4>

		if(buttonState[0] == BUTTON_PRESSED){
 80007d0:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <runFSM+0x15c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d127      	bne.n	8000828 <runFSM+0x148>
			setEnviromentState5();	/*Mode 3*/
 80007d8:	f7ff fdf8 	bl	80003cc <setEnviromentState5>
			FSM_State = NORMAL_STATE_MODE_3;
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <runFSM+0x158>)
 80007de:	2205      	movs	r2, #5
 80007e0:	601a      	str	r2, [r3, #0]
		}
		break;
 80007e2:	e021      	b.n	8000828 <runFSM+0x148>
	case NORMAL_STATE_MODE_3:
		doState5();
 80007e4:	f7ff fef6 	bl	80005d4 <doState5>

		if(buttonState[0] == BUTTON_PRESSED){
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <runFSM+0x15c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d11d      	bne.n	800082c <runFSM+0x14c>
			setEnviromentState6();	/*Mode 4*/
 80007f0:	f7ff fdf8 	bl	80003e4 <setEnviromentState6>
			FSM_State = NORMAL_STATE_MODE_4;
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <runFSM+0x158>)
 80007f6:	2206      	movs	r2, #6
 80007f8:	601a      	str	r2, [r3, #0]
		}
		break;
 80007fa:	e017      	b.n	800082c <runFSM+0x14c>
	case NORMAL_STATE_MODE_4:
		doState6();
 80007fc:	f7ff ff2e 	bl	800065c <doState6>

		if(buttonState[0] == BUTTON_PRESSED){
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <runFSM+0x15c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d113      	bne.n	8000830 <runFSM+0x150>
			setEnviromentState0();	/*Mode 1*/
 8000808:	f7ff fd7e 	bl	8000308 <setEnviromentState0>
			FSM_State = RED_GREEN_STATE_MODE1;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <runFSM+0x158>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
		}
		break;
 8000812:	e00d      	b.n	8000830 <runFSM+0x150>
	default:
		break;
 8000814:	bf00      	nop
 8000816:	e00c      	b.n	8000832 <runFSM+0x152>
		break;
 8000818:	bf00      	nop
 800081a:	e00a      	b.n	8000832 <runFSM+0x152>
		break;
 800081c:	bf00      	nop
 800081e:	e008      	b.n	8000832 <runFSM+0x152>
		break;
 8000820:	bf00      	nop
 8000822:	e006      	b.n	8000832 <runFSM+0x152>
		break;
 8000824:	bf00      	nop
 8000826:	e004      	b.n	8000832 <runFSM+0x152>
		break;
 8000828:	bf00      	nop
 800082a:	e002      	b.n	8000832 <runFSM+0x152>
		break;
 800082c:	bf00      	nop
 800082e:	e000      	b.n	8000832 <runFSM+0x152>
		break;
 8000830:	bf00      	nop
	}

	return;
 8000832:	bf00      	nop
}
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000054 	.word	0x20000054
 800083c:	20000058 	.word	0x20000058

08000840 <fsm_for_input_processing>:

#include "input_processing.h"

enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED,BUTTON_RELEASED,BUTTON_RELEASED};

void fsm_for_input_processing(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	for(int i=0;i<N0_OF_BUTTONS;i++){
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e04c      	b.n	80008e6 <fsm_for_input_processing+0xa6>
		switch(buttonState[i]){
 800084c:	4a2a      	ldr	r2, [pc, #168]	@ (80008f8 <fsm_for_input_processing+0xb8>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d030      	beq.n	80008ba <fsm_for_input_processing+0x7a>
 8000858:	2b02      	cmp	r3, #2
 800085a:	dc41      	bgt.n	80008e0 <fsm_for_input_processing+0xa0>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <fsm_for_input_processing+0x26>
 8000860:	2b01      	cmp	r3, #1
 8000862:	d00e      	beq.n	8000882 <fsm_for_input_processing+0x42>
 8000864:	e03c      	b.n	80008e0 <fsm_for_input_processing+0xa0>
		case BUTTON_RELEASED:
			if(is_button_pressed(i)){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f846 	bl	80008fc <is_button_pressed>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d02f      	beq.n	80008d6 <fsm_for_input_processing+0x96>
				buttonState[i] = BUTTON_PRESSED;
 8000876:	4a20      	ldr	r2, [pc, #128]	@ (80008f8 <fsm_for_input_processing+0xb8>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
				// Increase value PORTA by one
			}
			break;
 8000880:	e029      	b.n	80008d6 <fsm_for_input_processing+0x96>
		case BUTTON_PRESSED:
			if(!is_button_pressed(i)){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f838 	bl	80008fc <is_button_pressed>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <fsm_for_input_processing+0x5e>
				buttonState[i] = BUTTON_RELEASED;
 8000892:	4a19      	ldr	r2, [pc, #100]	@ (80008f8 <fsm_for_input_processing+0xb8>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
					// Set timer 500ms for auto increase
					//setTimer(AUTO_INCREASE, 500);
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 800089c:	e01d      	b.n	80008da <fsm_for_input_processing+0x9a>
				if(is_button_pressed_1s(i)){
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f848 	bl	8000938 <is_button_pressed_1s>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d015      	beq.n	80008da <fsm_for_input_processing+0x9a>
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80008ae:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <fsm_for_input_processing+0xb8>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	2202      	movs	r2, #2
 80008b6:	701a      	strb	r2, [r3, #0]
			break;
 80008b8:	e00f      	b.n	80008da <fsm_for_input_processing+0x9a>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed(i)){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f81c 	bl	80008fc <is_button_pressed>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d109      	bne.n	80008de <fsm_for_input_processing+0x9e>
				buttonState[i] = BUTTON_RELEASED;
 80008ca:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <fsm_for_input_processing+0xb8>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4413      	add	r3, r2
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
				/*if(getTimerFlags(AUTO_INCREASE)){
					// Increase value PORTA by one
					//setTimer(AUTO_INCREASE, 500);
				}*/
			}
			break;
 80008d4:	e003      	b.n	80008de <fsm_for_input_processing+0x9e>
			break;
 80008d6:	bf00      	nop
 80008d8:	e002      	b.n	80008e0 <fsm_for_input_processing+0xa0>
			break;
 80008da:	bf00      	nop
 80008dc:	e000      	b.n	80008e0 <fsm_for_input_processing+0xa0>
			break;
 80008de:	bf00      	nop
	for(int i=0;i<N0_OF_BUTTONS;i++){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3301      	adds	r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	ddaf      	ble.n	800084c <fsm_for_input_processing+0xc>
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000058 	.word	0x20000058

080008fc <is_button_pressed>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0};
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {0};

unsigned char is_button_pressed(uint8_t index){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d901      	bls.n	8000910 <is_button_pressed+0x14>
 800090c:	2300      	movs	r3, #0
 800090e:	e00b      	b.n	8000928 <is_button_pressed+0x2c>

	if(flagForButtonPress[index]){
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <is_button_pressed+0x38>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d005      	beq.n	8000926 <is_button_pressed+0x2a>
		flagForButtonPress[index] = 0;
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <is_button_pressed+0x38>)
 800091e:	2100      	movs	r1, #0
 8000920:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <is_button_pressed+0x2c>
	}

	return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	2000005c 	.word	0x2000005c

08000938 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d901      	bls.n	800094c <is_button_pressed_1s+0x14>
 8000948:	23ff      	movs	r3, #255	@ 0xff
 800094a:	e00b      	b.n	8000964 <is_button_pressed_1s+0x2c>

	if(flagForButtonPress1s[index]){
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <is_button_pressed_1s+0x38>)
 8000950:	5cd3      	ldrb	r3, [r2, r3]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d005      	beq.n	8000962 <is_button_pressed_1s+0x2a>
		flagForButtonPress1s[index] = 0;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <is_button_pressed_1s+0x38>)
 800095a:	2100      	movs	r1, #0
 800095c:	54d1      	strb	r1, [r2, r3]
		return 1;
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <is_button_pressed_1s+0x2c>
	}

	return 0;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000060 	.word	0x20000060

08000974 <button_reading>:

/*Many bug in input_reading :))*/
void button_reading(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e082      	b.n	8000a86 <button_reading+0x112>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000980:	4a45      	ldr	r2, [pc, #276]	@ (8000a98 <button_reading+0x124>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	7819      	ldrb	r1, [r3, #0]
 8000988:	4a44      	ldr	r2, [pc, #272]	@ (8000a9c <button_reading+0x128>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	460a      	mov	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000992:	4a43      	ldr	r2, [pc, #268]	@ (8000aa0 <button_reading+0x12c>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	7819      	ldrb	r1, [r3, #0]
 800099a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a98 <button_reading+0x124>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4413      	add	r3, r2
 80009a0:	460a      	mov	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]
		// Chose button port
		if(i == 0){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10b      	bne.n	80009c2 <button_reading+0x4e>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 80009aa:	2101      	movs	r1, #1
 80009ac:	483d      	ldr	r0, [pc, #244]	@ (8000aa4 <button_reading+0x130>)
 80009ae:	f001 f9b9 	bl	8001d24 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4a3a      	ldr	r2, [pc, #232]	@ (8000aa0 <button_reading+0x12c>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	460a      	mov	r2, r1
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	e01c      	b.n	80009fc <button_reading+0x88>
		}
		else if(i == 1){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d10b      	bne.n	80009e0 <button_reading+0x6c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80009c8:	2102      	movs	r1, #2
 80009ca:	4836      	ldr	r0, [pc, #216]	@ (8000aa4 <button_reading+0x130>)
 80009cc:	f001 f9aa 	bl	8001d24 <HAL_GPIO_ReadPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4a32      	ldr	r2, [pc, #200]	@ (8000aa0 <button_reading+0x12c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	460a      	mov	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e00d      	b.n	80009fc <button_reading+0x88>
		}
		else if( i == 2){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d10a      	bne.n	80009fc <button_reading+0x88>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80009e6:	2104      	movs	r1, #4
 80009e8:	482e      	ldr	r0, [pc, #184]	@ (8000aa4 <button_reading+0x130>)
 80009ea:	f001 f99b 	bl	8001d24 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa0 <button_reading+0x12c>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	460a      	mov	r2, r1
 80009fa:	701a      	strb	r2, [r3, #0]
		}
		else{
			/*This is fault value of index button*/
		}

		if((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) &&
 80009fc:	4a28      	ldr	r2, [pc, #160]	@ (8000aa0 <button_reading+0x12c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4924      	ldr	r1, [pc, #144]	@ (8000a98 <button_reading+0x124>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	440b      	add	r3, r1
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d137      	bne.n	8000a80 <button_reading+0x10c>
				(debounceButtonBuffer2[i] == debounceButtonBuffer3[i])){
 8000a10:	4a21      	ldr	r2, [pc, #132]	@ (8000a98 <button_reading+0x124>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4920      	ldr	r1, [pc, #128]	@ (8000a9c <button_reading+0x128>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	440b      	add	r3, r1
 8000a1e:	781b      	ldrb	r3, [r3, #0]
		if((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) &&
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d12d      	bne.n	8000a80 <button_reading+0x10c>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 8000a24:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <button_reading+0x12c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	491e      	ldr	r1, [pc, #120]	@ (8000aa8 <button_reading+0x134>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	440b      	add	r3, r1
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d019      	beq.n	8000a6c <button_reading+0xf8>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000a38:	4a19      	ldr	r2, [pc, #100]	@ (8000aa0 <button_reading+0x12c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	7819      	ldrb	r1, [r3, #0]
 8000a40:	4a19      	ldr	r2, [pc, #100]	@ (8000aa8 <button_reading+0x134>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	460a      	mov	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <button_reading+0x134>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d114      	bne.n	8000a80 <button_reading+0x10c>
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <button_reading+0x138>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2164      	movs	r1, #100	@ 0x64
 8000a5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress[i] = 1;
 8000a60:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <button_reading+0x13c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e009      	b.n	8000a80 <button_reading+0x10c>
				}
			}
			else{
				counterForButtonPress1s[i]--;
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <button_reading+0x138>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	b299      	uxth	r1, r3
 8000a78:	4a0c      	ldr	r2, [pc, #48]	@ (8000aac <button_reading+0x138>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3301      	adds	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	f77f af79 	ble.w	8000980 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000020 	.word	0x20000020
 8000a9c:	20000024 	.word	0x20000024
 8000aa0:	2000001c 	.word	0x2000001c
 8000aa4:	40010c00 	.word	0x40010c00
 8000aa8:	20000018 	.word	0x20000018
 8000aac:	20000064 	.word	0x20000064
 8000ab0:	2000005c 	.word	0x2000005c

08000ab4 <display7SEG_13>:
	default:
		break;
	}
}

void display7SEG_13(int number){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d123      	bne.n	8000b0a <display7SEG_13+0x56>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	48c2      	ldr	r0, [pc, #776]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000ac8:	f001 f943 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	48bf      	ldr	r0, [pc, #764]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000ad2:	f001 f93e 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2104      	movs	r1, #4
 8000ada:	48bd      	ldr	r0, [pc, #756]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000adc:	f001 f939 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	48ba      	ldr	r0, [pc, #744]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000ae6:	f001 f934 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2110      	movs	r1, #16
 8000aee:	48b8      	ldr	r0, [pc, #736]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000af0:	f001 f92f 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2120      	movs	r1, #32
 8000af8:	48b5      	ldr	r0, [pc, #724]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000afa:	f001 f92a 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2140      	movs	r1, #64	@ 0x40
 8000b02:	48b3      	ldr	r0, [pc, #716]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b04:	f001 f925 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000b08:	e15d      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 1){
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d123      	bne.n	8000b58 <display7SEG_13+0xa4>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2101      	movs	r1, #1
 8000b14:	48ae      	ldr	r0, [pc, #696]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b16:	f001 f91c 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	48ac      	ldr	r0, [pc, #688]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b20:	f001 f917 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2104      	movs	r1, #4
 8000b28:	48a9      	ldr	r0, [pc, #676]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b2a:	f001 f912 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2108      	movs	r1, #8
 8000b32:	48a7      	ldr	r0, [pc, #668]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b34:	f001 f90d 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	48a4      	ldr	r0, [pc, #656]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b3e:	f001 f908 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2120      	movs	r1, #32
 8000b46:	48a2      	ldr	r0, [pc, #648]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b48:	f001 f903 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2140      	movs	r1, #64	@ 0x40
 8000b50:	489f      	ldr	r0, [pc, #636]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b52:	f001 f8fe 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000b56:	e136      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 2){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <display7SEG_13+0xf2>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2101      	movs	r1, #1
 8000b62:	489b      	ldr	r0, [pc, #620]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b64:	f001 f8f5 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	4898      	ldr	r0, [pc, #608]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b6e:	f001 f8f0 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2104      	movs	r1, #4
 8000b76:	4896      	ldr	r0, [pc, #600]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b78:	f001 f8eb 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4893      	ldr	r0, [pc, #588]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b82:	f001 f8e6 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4891      	ldr	r0, [pc, #580]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b8c:	f001 f8e1 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2120      	movs	r1, #32
 8000b94:	488e      	ldr	r0, [pc, #568]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000b96:	f001 f8dc 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	488c      	ldr	r0, [pc, #560]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000ba0:	f001 f8d7 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000ba4:	e10f      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 3){
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d123      	bne.n	8000bf4 <display7SEG_13+0x140>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4887      	ldr	r0, [pc, #540]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000bb2:	f001 f8ce 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4885      	ldr	r0, [pc, #532]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000bbc:	f001 f8c9 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4882      	ldr	r0, [pc, #520]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000bc6:	f001 f8c4 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2108      	movs	r1, #8
 8000bce:	4880      	ldr	r0, [pc, #512]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000bd0:	f001 f8bf 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	487d      	ldr	r0, [pc, #500]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000bda:	f001 f8ba 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2120      	movs	r1, #32
 8000be2:	487b      	ldr	r0, [pc, #492]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000be4:	f001 f8b5 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	4878      	ldr	r0, [pc, #480]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000bee:	f001 f8b0 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000bf2:	e0e8      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 4){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d123      	bne.n	8000c42 <display7SEG_13+0x18e>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4874      	ldr	r0, [pc, #464]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c00:	f001 f8a7 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2102      	movs	r1, #2
 8000c08:	4871      	ldr	r0, [pc, #452]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c0a:	f001 f8a2 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2104      	movs	r1, #4
 8000c12:	486f      	ldr	r0, [pc, #444]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c14:	f001 f89d 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	486c      	ldr	r0, [pc, #432]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c1e:	f001 f898 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2110      	movs	r1, #16
 8000c26:	486a      	ldr	r0, [pc, #424]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c28:	f001 f893 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2120      	movs	r1, #32
 8000c30:	4867      	ldr	r0, [pc, #412]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c32:	f001 f88e 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	4865      	ldr	r0, [pc, #404]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c3c:	f001 f889 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000c40:	e0c1      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 5){
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d123      	bne.n	8000c90 <display7SEG_13+0x1dc>
		  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4860      	ldr	r0, [pc, #384]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c4e:	f001 f880 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2102      	movs	r1, #2
 8000c56:	485e      	ldr	r0, [pc, #376]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c58:	f001 f87b 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2104      	movs	r1, #4
 8000c60:	485b      	ldr	r0, [pc, #364]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c62:	f001 f876 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4859      	ldr	r0, [pc, #356]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c6c:	f001 f871 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2110      	movs	r1, #16
 8000c74:	4856      	ldr	r0, [pc, #344]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c76:	f001 f86c 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4854      	ldr	r0, [pc, #336]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c80:	f001 f867 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2140      	movs	r1, #64	@ 0x40
 8000c88:	4851      	ldr	r0, [pc, #324]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c8a:	f001 f862 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000c8e:	e09a      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 6){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d123      	bne.n	8000cde <display7SEG_13+0x22a>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	484d      	ldr	r0, [pc, #308]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000c9c:	f001 f859 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	484a      	ldr	r0, [pc, #296]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000ca6:	f001 f854 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2104      	movs	r1, #4
 8000cae:	4848      	ldr	r0, [pc, #288]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000cb0:	f001 f84f 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	4845      	ldr	r0, [pc, #276]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000cba:	f001 f84a 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4843      	ldr	r0, [pc, #268]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000cc4:	f001 f845 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4840      	ldr	r0, [pc, #256]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000cce:	f001 f840 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2140      	movs	r1, #64	@ 0x40
 8000cd6:	483e      	ldr	r0, [pc, #248]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000cd8:	f001 f83b 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000cdc:	e073      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 7){
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d123      	bne.n	8000d2c <display7SEG_13+0x278>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4839      	ldr	r0, [pc, #228]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000cea:	f001 f832 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4837      	ldr	r0, [pc, #220]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000cf4:	f001 f82d 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	4834      	ldr	r0, [pc, #208]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000cfe:	f001 f828 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2108      	movs	r1, #8
 8000d06:	4832      	ldr	r0, [pc, #200]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d08:	f001 f823 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2110      	movs	r1, #16
 8000d10:	482f      	ldr	r0, [pc, #188]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d12:	f001 f81e 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2120      	movs	r1, #32
 8000d1a:	482d      	ldr	r0, [pc, #180]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d1c:	f001 f819 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2140      	movs	r1, #64	@ 0x40
 8000d24:	482a      	ldr	r0, [pc, #168]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d26:	f001 f814 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000d2a:	e04c      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 8){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b08      	cmp	r3, #8
 8000d30:	d123      	bne.n	8000d7a <display7SEG_13+0x2c6>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2101      	movs	r1, #1
 8000d36:	4826      	ldr	r0, [pc, #152]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d38:	f001 f80b 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2102      	movs	r1, #2
 8000d40:	4823      	ldr	r0, [pc, #140]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d42:	f001 f806 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4821      	ldr	r0, [pc, #132]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d4c:	f001 f801 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2108      	movs	r1, #8
 8000d54:	481e      	ldr	r0, [pc, #120]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d56:	f000 fffc 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	481c      	ldr	r0, [pc, #112]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d60:	f000 fff7 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2120      	movs	r1, #32
 8000d68:	4819      	ldr	r0, [pc, #100]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d6a:	f000 fff2 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2140      	movs	r1, #64	@ 0x40
 8000d72:	4817      	ldr	r0, [pc, #92]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d74:	f000 ffed 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000d78:	e025      	b.n	8000dc6 <display7SEG_13+0x312>
	else if(number == 9){
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b09      	cmp	r3, #9
 8000d7e:	d122      	bne.n	8000dc6 <display7SEG_13+0x312>
			  HAL_GPIO_WritePin(SEG13_A_GPIO_Port, SEG13_A_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2101      	movs	r1, #1
 8000d84:	4812      	ldr	r0, [pc, #72]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d86:	f000 ffe4 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_B_GPIO_Port, SEG13_B_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4810      	ldr	r0, [pc, #64]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d90:	f000 ffdf 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_C_GPIO_Port, SEG13_C_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2104      	movs	r1, #4
 8000d98:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000d9a:	f000 ffda 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_D_GPIO_Port, SEG13_D_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	480b      	ldr	r0, [pc, #44]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000da4:	f000 ffd5 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_E_GPIO_Port, SEG13_E_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2110      	movs	r1, #16
 8000dac:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000dae:	f000 ffd0 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_F_GPIO_Port, SEG13_F_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2120      	movs	r1, #32
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000db8:	f000 ffcb 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG13_G_GPIO_Port, SEG13_G_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2140      	movs	r1, #64	@ 0x40
 8000dc0:	4803      	ldr	r0, [pc, #12]	@ (8000dd0 <display7SEG_13+0x31c>)
 8000dc2:	f000 ffc6 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <display7SEG_24>:

void display7SEG_24(int number){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d12a      	bne.n	8000e38 <display7SEG_24+0x64>
		/*Number 0 */
		HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	48cb      	ldr	r0, [pc, #812]	@ (8001118 <display7SEG_24+0x344>)
 8000dea:	f000 ffb2 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000df4:	48c8      	ldr	r0, [pc, #800]	@ (8001118 <display7SEG_24+0x344>)
 8000df6:	f000 ffac 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e00:	48c5      	ldr	r0, [pc, #788]	@ (8001118 <display7SEG_24+0x344>)
 8000e02:	f000 ffa6 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e0c:	48c2      	ldr	r0, [pc, #776]	@ (8001118 <display7SEG_24+0x344>)
 8000e0e:	f000 ffa0 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e18:	48bf      	ldr	r0, [pc, #764]	@ (8001118 <display7SEG_24+0x344>)
 8000e1a:	f000 ff9a 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e24:	48bc      	ldr	r0, [pc, #752]	@ (8001118 <display7SEG_24+0x344>)
 8000e26:	f000 ff94 	bl	8001d52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e30:	48b9      	ldr	r0, [pc, #740]	@ (8001118 <display7SEG_24+0x344>)
 8000e32:	f000 ff8e 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
	}
	else{
		/*This is fault in number value > 9 || number value < 0*/
	}
}
 8000e36:	e19e      	b.n	8001176 <display7SEG_24+0x3a2>
	else if(number == 1){
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d12a      	bne.n	8000e94 <display7SEG_24+0xc0>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e44:	48b4      	ldr	r0, [pc, #720]	@ (8001118 <display7SEG_24+0x344>)
 8000e46:	f000 ff84 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e50:	48b1      	ldr	r0, [pc, #708]	@ (8001118 <display7SEG_24+0x344>)
 8000e52:	f000 ff7e 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e5c:	48ae      	ldr	r0, [pc, #696]	@ (8001118 <display7SEG_24+0x344>)
 8000e5e:	f000 ff78 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e68:	48ab      	ldr	r0, [pc, #684]	@ (8001118 <display7SEG_24+0x344>)
 8000e6a:	f000 ff72 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e74:	48a8      	ldr	r0, [pc, #672]	@ (8001118 <display7SEG_24+0x344>)
 8000e76:	f000 ff6c 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e80:	48a5      	ldr	r0, [pc, #660]	@ (8001118 <display7SEG_24+0x344>)
 8000e82:	f000 ff66 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e8c:	48a2      	ldr	r0, [pc, #648]	@ (8001118 <display7SEG_24+0x344>)
 8000e8e:	f000 ff60 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000e92:	e170      	b.n	8001176 <display7SEG_24+0x3a2>
	else if(number == 2){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d12a      	bne.n	8000ef0 <display7SEG_24+0x11c>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ea0:	489d      	ldr	r0, [pc, #628]	@ (8001118 <display7SEG_24+0x344>)
 8000ea2:	f000 ff56 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eac:	489a      	ldr	r0, [pc, #616]	@ (8001118 <display7SEG_24+0x344>)
 8000eae:	f000 ff50 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eb8:	4897      	ldr	r0, [pc, #604]	@ (8001118 <display7SEG_24+0x344>)
 8000eba:	f000 ff4a 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ec4:	4894      	ldr	r0, [pc, #592]	@ (8001118 <display7SEG_24+0x344>)
 8000ec6:	f000 ff44 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed0:	4891      	ldr	r0, [pc, #580]	@ (8001118 <display7SEG_24+0x344>)
 8000ed2:	f000 ff3e 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000edc:	488e      	ldr	r0, [pc, #568]	@ (8001118 <display7SEG_24+0x344>)
 8000ede:	f000 ff38 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee8:	488b      	ldr	r0, [pc, #556]	@ (8001118 <display7SEG_24+0x344>)
 8000eea:	f000 ff32 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000eee:	e142      	b.n	8001176 <display7SEG_24+0x3a2>
	else if(number == 3){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d12a      	bne.n	8000f4c <display7SEG_24+0x178>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000efc:	4886      	ldr	r0, [pc, #536]	@ (8001118 <display7SEG_24+0x344>)
 8000efe:	f000 ff28 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f08:	4883      	ldr	r0, [pc, #524]	@ (8001118 <display7SEG_24+0x344>)
 8000f0a:	f000 ff22 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f14:	4880      	ldr	r0, [pc, #512]	@ (8001118 <display7SEG_24+0x344>)
 8000f16:	f000 ff1c 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f20:	487d      	ldr	r0, [pc, #500]	@ (8001118 <display7SEG_24+0x344>)
 8000f22:	f000 ff16 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f2c:	487a      	ldr	r0, [pc, #488]	@ (8001118 <display7SEG_24+0x344>)
 8000f2e:	f000 ff10 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f38:	4877      	ldr	r0, [pc, #476]	@ (8001118 <display7SEG_24+0x344>)
 8000f3a:	f000 ff0a 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f44:	4874      	ldr	r0, [pc, #464]	@ (8001118 <display7SEG_24+0x344>)
 8000f46:	f000 ff04 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000f4a:	e114      	b.n	8001176 <display7SEG_24+0x3a2>
	else if(number == 4){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d12a      	bne.n	8000fa8 <display7SEG_24+0x1d4>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f58:	486f      	ldr	r0, [pc, #444]	@ (8001118 <display7SEG_24+0x344>)
 8000f5a:	f000 fefa 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f64:	486c      	ldr	r0, [pc, #432]	@ (8001118 <display7SEG_24+0x344>)
 8000f66:	f000 fef4 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f70:	4869      	ldr	r0, [pc, #420]	@ (8001118 <display7SEG_24+0x344>)
 8000f72:	f000 feee 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f7c:	4866      	ldr	r0, [pc, #408]	@ (8001118 <display7SEG_24+0x344>)
 8000f7e:	f000 fee8 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f88:	4863      	ldr	r0, [pc, #396]	@ (8001118 <display7SEG_24+0x344>)
 8000f8a:	f000 fee2 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f94:	4860      	ldr	r0, [pc, #384]	@ (8001118 <display7SEG_24+0x344>)
 8000f96:	f000 fedc 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fa0:	485d      	ldr	r0, [pc, #372]	@ (8001118 <display7SEG_24+0x344>)
 8000fa2:	f000 fed6 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000fa6:	e0e6      	b.n	8001176 <display7SEG_24+0x3a2>
	else if(number == 5){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d12a      	bne.n	8001004 <display7SEG_24+0x230>
		  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb4:	4858      	ldr	r0, [pc, #352]	@ (8001118 <display7SEG_24+0x344>)
 8000fb6:	f000 fecc 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fc0:	4855      	ldr	r0, [pc, #340]	@ (8001118 <display7SEG_24+0x344>)
 8000fc2:	f000 fec6 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fcc:	4852      	ldr	r0, [pc, #328]	@ (8001118 <display7SEG_24+0x344>)
 8000fce:	f000 fec0 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fd8:	484f      	ldr	r0, [pc, #316]	@ (8001118 <display7SEG_24+0x344>)
 8000fda:	f000 feba 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe4:	484c      	ldr	r0, [pc, #304]	@ (8001118 <display7SEG_24+0x344>)
 8000fe6:	f000 feb4 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff0:	4849      	ldr	r0, [pc, #292]	@ (8001118 <display7SEG_24+0x344>)
 8000ff2:	f000 feae 	bl	8001d52 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffc:	4846      	ldr	r0, [pc, #280]	@ (8001118 <display7SEG_24+0x344>)
 8000ffe:	f000 fea8 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001002:	e0b8      	b.n	8001176 <display7SEG_24+0x3a2>
	else if(number == 6){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b06      	cmp	r3, #6
 8001008:	d12a      	bne.n	8001060 <display7SEG_24+0x28c>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001010:	4841      	ldr	r0, [pc, #260]	@ (8001118 <display7SEG_24+0x344>)
 8001012:	f000 fe9e 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800101c:	483e      	ldr	r0, [pc, #248]	@ (8001118 <display7SEG_24+0x344>)
 800101e:	f000 fe98 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001028:	483b      	ldr	r0, [pc, #236]	@ (8001118 <display7SEG_24+0x344>)
 800102a:	f000 fe92 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001034:	4838      	ldr	r0, [pc, #224]	@ (8001118 <display7SEG_24+0x344>)
 8001036:	f000 fe8c 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001040:	4835      	ldr	r0, [pc, #212]	@ (8001118 <display7SEG_24+0x344>)
 8001042:	f000 fe86 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104c:	4832      	ldr	r0, [pc, #200]	@ (8001118 <display7SEG_24+0x344>)
 800104e:	f000 fe80 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001058:	482f      	ldr	r0, [pc, #188]	@ (8001118 <display7SEG_24+0x344>)
 800105a:	f000 fe7a 	bl	8001d52 <HAL_GPIO_WritePin>
}
 800105e:	e08a      	b.n	8001176 <display7SEG_24+0x3a2>
	else if(number == 7){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d12a      	bne.n	80010bc <display7SEG_24+0x2e8>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800106c:	482a      	ldr	r0, [pc, #168]	@ (8001118 <display7SEG_24+0x344>)
 800106e:	f000 fe70 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001078:	4827      	ldr	r0, [pc, #156]	@ (8001118 <display7SEG_24+0x344>)
 800107a:	f000 fe6a 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001084:	4824      	ldr	r0, [pc, #144]	@ (8001118 <display7SEG_24+0x344>)
 8001086:	f000 fe64 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001090:	4821      	ldr	r0, [pc, #132]	@ (8001118 <display7SEG_24+0x344>)
 8001092:	f000 fe5e 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109c:	481e      	ldr	r0, [pc, #120]	@ (8001118 <display7SEG_24+0x344>)
 800109e:	f000 fe58 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a8:	481b      	ldr	r0, [pc, #108]	@ (8001118 <display7SEG_24+0x344>)
 80010aa:	f000 fe52 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010b4:	4818      	ldr	r0, [pc, #96]	@ (8001118 <display7SEG_24+0x344>)
 80010b6:	f000 fe4c 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80010ba:	e05c      	b.n	8001176 <display7SEG_24+0x3a2>
	else if(number == 8){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d12c      	bne.n	800111c <display7SEG_24+0x348>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c8:	4813      	ldr	r0, [pc, #76]	@ (8001118 <display7SEG_24+0x344>)
 80010ca:	f000 fe42 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d4:	4810      	ldr	r0, [pc, #64]	@ (8001118 <display7SEG_24+0x344>)
 80010d6:	f000 fe3c 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <display7SEG_24+0x344>)
 80010e2:	f000 fe36 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ec:	480a      	ldr	r0, [pc, #40]	@ (8001118 <display7SEG_24+0x344>)
 80010ee:	f000 fe30 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f8:	4807      	ldr	r0, [pc, #28]	@ (8001118 <display7SEG_24+0x344>)
 80010fa:	f000 fe2a 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <display7SEG_24+0x344>)
 8001106:	f000 fe24 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001110:	4801      	ldr	r0, [pc, #4]	@ (8001118 <display7SEG_24+0x344>)
 8001112:	f000 fe1e 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001116:	e02e      	b.n	8001176 <display7SEG_24+0x3a2>
 8001118:	40010800 	.word	0x40010800
	else if(number == 9){
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b09      	cmp	r3, #9
 8001120:	d129      	bne.n	8001176 <display7SEG_24+0x3a2>
			  HAL_GPIO_WritePin(SEG24_A_GPIO_Port, SEG24_A_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001128:	4815      	ldr	r0, [pc, #84]	@ (8001180 <display7SEG_24+0x3ac>)
 800112a:	f000 fe12 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_B_GPIO_Port, SEG24_B_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001134:	4812      	ldr	r0, [pc, #72]	@ (8001180 <display7SEG_24+0x3ac>)
 8001136:	f000 fe0c 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_C_GPIO_Port, SEG24_C_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001140:	480f      	ldr	r0, [pc, #60]	@ (8001180 <display7SEG_24+0x3ac>)
 8001142:	f000 fe06 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_D_GPIO_Port, SEG24_D_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <display7SEG_24+0x3ac>)
 800114e:	f000 fe00 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_E_GPIO_Port, SEG24_E_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <display7SEG_24+0x3ac>)
 800115a:	f000 fdfa 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_F_GPIO_Port, SEG24_F_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <display7SEG_24+0x3ac>)
 8001166:	f000 fdf4 	bl	8001d52 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG24_G_GPIO_Port, SEG24_G_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <display7SEG_24+0x3ac>)
 8001172:	f000 fdee 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40010800 	.word	0x40010800

08001184 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001194:	d103      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8001196:	f7ff fbed 	bl	8000974 <button_reading>
		runTimer();
 800119a:	f000 f9ef 	bl	800157c <runTimer>
		/*Just for debug
		HAL_GPIO_TogglePin(CHECK_GPIO_Port, CHECK_Pin);*/
	}
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f000 face 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b0:	f000 f814 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b4:	f000 f89a 	bl	80012ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80011b8:	f000 f84c 	bl	8001254 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setEnviromentStateInit();
 80011bc:	f7ff f860 	bl	8000280 <setEnviromentStateInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <main+0x30>)
 80011c2:	f001 fa25 	bl	8002610 <HAL_TIM_Base_Start_IT>
	//display7SEG_24(buttonState[0]);
//	if(is_button_pressed(0)){
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	}

	fsm_for_input_processing();
 80011c6:	f7ff fb3b 	bl	8000840 <fsm_for_input_processing>
	runFSM();
 80011ca:	f7ff fa89 	bl	80006e0 <runFSM>
	runBlinkingLed();
 80011ce:	f7fe ffbd 	bl	800014c <runBlinkingLed>
	fsm_for_input_processing();
 80011d2:	bf00      	nop
 80011d4:	e7f7      	b.n	80011c6 <main+0x1e>
 80011d6:	bf00      	nop
 80011d8:	20000074 	.word	0x20000074

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b090      	sub	sp, #64	@ 0x40
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	2228      	movs	r2, #40	@ 0x28
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fd9c 	bl	8002d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001202:	2301      	movs	r3, #1
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001206:	2310      	movs	r3, #16
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fdce 	bl	8001db4 <HAL_RCC_OscConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800121e:	f000 f8c7 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001222:	230f      	movs	r3, #15
 8001224:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f001 f83c 	bl	80022b8 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001246:	f000 f8b3 	bl	80013b0 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3740      	adds	r7, #64	@ 0x40
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <MX_TIM2_Init+0x94>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MX_TIM2_Init+0x94>)
 800127a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800127e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_TIM2_Init+0x94>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_TIM2_Init+0x94>)
 8001288:	2209      	movs	r2, #9
 800128a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_TIM2_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_TIM2_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <MX_TIM2_Init+0x94>)
 800129a:	f001 f969 	bl	8002570 <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012a4:	f000 f884 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_TIM2_Init+0x94>)
 80012b6:	f001 fae7 	bl	8002888 <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 f876 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_TIM2_Init+0x94>)
 80012d2:	f001 fcbf 	bl	8002c54 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f868 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000074 	.word	0x20000074

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <MX_GPIO_Init+0xb8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a27      	ldr	r2, [pc, #156]	@ (80013a4 <MX_GPIO_Init+0xb8>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <MX_GPIO_Init+0xb8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <MX_GPIO_Init+0xb8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <MX_GPIO_Init+0xb8>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_GPIO_Init+0xb8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8001330:	2200      	movs	r2, #0
 8001332:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001336:	481c      	ldr	r0, [pc, #112]	@ (80013a8 <MX_GPIO_Init+0xbc>)
 8001338:	f000 fd0b 	bl	8001d52 <HAL_GPIO_WritePin>
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|LED_Pin
                          |SEG24_A_Pin|SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin
                          |SEG24_E_Pin|SEG24_F_Pin|SEG24_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800133c:	2200      	movs	r2, #0
 800133e:	f24f 11f8 	movw	r1, #61944	@ 0xf1f8
 8001342:	481a      	ldr	r0, [pc, #104]	@ (80013ac <MX_GPIO_Init+0xc0>)
 8001344:	f000 fd05 	bl	8001d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG13_A_Pin SEG13_B_Pin SEG13_C_Pin SEG13_D_Pin
                           SEG13_E_Pin SEG13_F_Pin SEG13_G_Pin LED_Pin
                           SEG24_A_Pin SEG24_B_Pin SEG24_C_Pin SEG24_D_Pin
                           SEG24_E_Pin SEG24_F_Pin SEG24_G_Pin */
  GPIO_InitStruct.Pin = SEG13_A_Pin|SEG13_B_Pin|SEG13_C_Pin|SEG13_D_Pin
 8001348:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800134c:	60bb      	str	r3, [r7, #8]
                          |SEG13_E_Pin|SEG13_F_Pin|SEG13_G_Pin|LED_Pin
                          |SEG24_A_Pin|SEG24_B_Pin|SEG24_C_Pin|SEG24_D_Pin
                          |SEG24_E_Pin|SEG24_F_Pin|SEG24_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2302      	movs	r3, #2
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	4619      	mov	r1, r3
 8001360:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <MX_GPIO_Init+0xbc>)
 8001362:	f000 fb63 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8001366:	2307      	movs	r3, #7
 8001368:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MX_GPIO_Init+0xc0>)
 800137a:	f000 fb57 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED13_RED_Pin LED13_YELLOW_Pin LED13_GREEN_Pin LED24_RED_Pin
                           LED24_YELLOW_Pin LED24_GREEN_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800137e:	f24f 13f8 	movw	r3, #61944	@ 0xf1f8
 8001382:	60bb      	str	r3, [r7, #8]
                          |LED13_RED_Pin|LED13_YELLOW_Pin|LED13_GREEN_Pin|LED24_RED_Pin
                          |LED24_YELLOW_Pin|LED24_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2302      	movs	r3, #2
 800138e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_GPIO_Init+0xc0>)
 8001398:	f000 fb48 	bl	8001a2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010800 	.word	0x40010800
 80013ac:	40010c00 	.word	0x40010c00

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <Error_Handler+0x8>

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_MspInit+0x5c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4a14      	ldr	r2, [pc, #80]	@ (8001418 <HAL_MspInit+0x5c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6193      	str	r3, [r2, #24]
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_MspInit+0x5c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_MspInit+0x5c>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_MspInit+0x60>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <HAL_MspInit+0x60>)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000

08001420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001430:	d113      	bne.n	800145a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_TIM_Base_MspInit+0x44>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_TIM_Base_MspInit+0x44>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_TIM_Base_MspInit+0x44>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	201c      	movs	r0, #28
 8001450:	f000 fab5 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001454:	201c      	movs	r0, #28
 8001456:	f000 face 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <NMI_Handler+0x4>

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <UsageFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f98e 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <TIM2_IRQHandler+0x10>)
 80014c6:	f001 f8ef 	bl	80026a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000074 	.word	0x20000074

080014d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <getTimerFlags>:
	//__HAL_TIM_SET_PRESCALER(&htim2,PRESCALER);
	__HAL_TIM_SET_COUNTER(&htim2,COUNTER);
	TIMER_CYCLE = cycle;
}*/

int getTimerFlags(int index){
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return Timer_Flag[index];
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <getTimerFlags+0x1c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200000d4 	.word	0x200000d4

08001500 <ignoreTimer>:

void ignoreTimer(int index){
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	Timer_Ignore[index] = 1;
 8001508:	4a04      	ldr	r2, [pc, #16]	@ (800151c <ignoreTimer+0x1c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2101      	movs	r1, #1
 800150e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	200000bc 	.word	0x200000bc

08001520 <activeTimer>:

void activeTimer(int index){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	Timer_Ignore[index] = 0;
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <activeTimer+0x1c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2100      	movs	r1, #0
 800152e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200000bc 	.word	0x200000bc

08001540 <setTimer>:

void setTimer(int index, int duration){
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	Timer_Counter[index] = duration/TIMER_CYCLE;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <setTimer+0x30>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	fb92 f2f3 	sdiv	r2, r2, r3
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <setTimer+0x34>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Timer_Flag[index] = 0;
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <setTimer+0x38>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2100      	movs	r1, #0
 8001562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	2000002c 	.word	0x2000002c
 8001574:	200000ec 	.word	0x200000ec
 8001578:	200000d4 	.word	0x200000d4

0800157c <runTimer>:

void runTimer(void){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_TIMER;i++){
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	e01e      	b.n	80015c6 <runTimer+0x4a>
		if(Timer_Ignore[i]){
 8001588:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <runTimer+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d114      	bne.n	80015be <runTimer+0x42>
			continue;
		}

		Timer_Counter[i]--;
 8001594:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <runTimer+0x60>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	490f      	ldr	r1, [pc, #60]	@ (80015dc <runTimer+0x60>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(Timer_Counter[i] <= 0){
 80015a6:	4a0d      	ldr	r2, [pc, #52]	@ (80015dc <runTimer+0x60>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	dc06      	bgt.n	80015c0 <runTimer+0x44>
			Timer_Flag[i] = 1;
 80015b2:	4a0b      	ldr	r2, [pc, #44]	@ (80015e0 <runTimer+0x64>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2101      	movs	r1, #1
 80015b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80015bc:	e000      	b.n	80015c0 <runTimer+0x44>
			continue;
 80015be:	bf00      	nop
	for(int i=0;i<MAX_TIMER;i++){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3301      	adds	r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	dddd      	ble.n	8001588 <runTimer+0xc>
		}
	}
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	200000bc 	.word	0x200000bc
 80015dc:	200000ec 	.word	0x200000ec
 80015e0:	200000d4 	.word	0x200000d4

080015e4 <clearAllTraffic>:
 *      Author: ADMINS
 */

#include "Traffic.h"

void clearAllTraffic(void){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2108      	movs	r1, #8
 80015ec:	480f      	ldr	r0, [pc, #60]	@ (800162c <clearAllTraffic+0x48>)
 80015ee:	f000 fbb0 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2110      	movs	r1, #16
 80015f6:	480d      	ldr	r0, [pc, #52]	@ (800162c <clearAllTraffic+0x48>)
 80015f8:	f000 fbab 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2120      	movs	r1, #32
 8001600:	480a      	ldr	r0, [pc, #40]	@ (800162c <clearAllTraffic+0x48>)
 8001602:	f000 fba6 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2140      	movs	r1, #64	@ 0x40
 800160a:	4808      	ldr	r0, [pc, #32]	@ (800162c <clearAllTraffic+0x48>)
 800160c:	f000 fba1 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2180      	movs	r1, #128	@ 0x80
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <clearAllTraffic+0x48>)
 8001616:	f000 fb9c 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <clearAllTraffic+0x48>)
 8001622:	f000 fb96 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40010c00 	.word	0x40010c00

08001630 <doRedGreen_Traffic>:

void doRedGreen_Traffic(void){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2108      	movs	r1, #8
 8001638:	480f      	ldr	r0, [pc, #60]	@ (8001678 <doRedGreen_Traffic+0x48>)
 800163a:	f000 fb8a 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <doRedGreen_Traffic+0x48>)
 8001646:	f000 fb84 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2120      	movs	r1, #32
 800164e:	480a      	ldr	r0, [pc, #40]	@ (8001678 <doRedGreen_Traffic+0x48>)
 8001650:	f000 fb7f 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2110      	movs	r1, #16
 8001658:	4807      	ldr	r0, [pc, #28]	@ (8001678 <doRedGreen_Traffic+0x48>)
 800165a:	f000 fb7a 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2140      	movs	r1, #64	@ 0x40
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <doRedGreen_Traffic+0x48>)
 8001664:	f000 fb75 	bl	8001d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2180      	movs	r1, #128	@ 0x80
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <doRedGreen_Traffic+0x48>)
 800166e:	f000 fb70 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40010c00 	.word	0x40010c00

0800167c <doRedYellow_Traffic>:

void doRedYellow_Traffic(void){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED24_GREEN_GPIO_Port, LED24_GREEN_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <doRedYellow_Traffic+0x20>)
 8001688:	f000 fb63 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2180      	movs	r1, #128	@ 0x80
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <doRedYellow_Traffic+0x20>)
 8001692:	f000 fb5e 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40010c00 	.word	0x40010c00

080016a0 <doGreenRed_Traffic>:

void doGreenRed_Traffic(void){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_RED_GPIO_Port, LED13_RED_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2108      	movs	r1, #8
 80016a8:	4809      	ldr	r0, [pc, #36]	@ (80016d0 <doGreenRed_Traffic+0x30>)
 80016aa:	f000 fb52 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_YELLOW_GPIO_Port, LED24_YELLOW_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	4807      	ldr	r0, [pc, #28]	@ (80016d0 <doGreenRed_Traffic+0x30>)
 80016b4:	f000 fb4d 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2140      	movs	r1, #64	@ 0x40
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <doGreenRed_Traffic+0x30>)
 80016be:	f000 fb48 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2120      	movs	r1, #32
 80016c6:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <doGreenRed_Traffic+0x30>)
 80016c8:	f000 fb43 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40010c00 	.word	0x40010c00

080016d4 <doYellowRed_Traffic>:

void doYellowRed_Traffic(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED13_GREEN_GPIO_Port, LED13_GREEN_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2120      	movs	r1, #32
 80016dc:	4807      	ldr	r0, [pc, #28]	@ (80016fc <doYellowRed_Traffic+0x28>)
 80016de:	f000 fb38 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED13_YELLOW_GPIO_Port, LED13_YELLOW_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2110      	movs	r1, #16
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <doYellowRed_Traffic+0x28>)
 80016e8:	f000 fb33 	bl	8001d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED24_RED_GPIO_Port, LED24_RED_Pin, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2140      	movs	r1, #64	@ 0x40
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <doYellowRed_Traffic+0x28>)
 80016f2:	f000 fb2e 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40010c00 	.word	0x40010c00

08001700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001700:	f7ff fee8 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480b      	ldr	r0, [pc, #44]	@ (8001734 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001706:	490c      	ldr	r1, [pc, #48]	@ (8001738 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001708:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <LoopFillZerobss+0x16>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800171c:	4c09      	ldr	r4, [pc, #36]	@ (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f001 fb05 	bl	8002d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172e:	f7ff fd3b 	bl	80011a8 <main>
  bx lr
 8001732:	4770      	bx	lr
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800173c:	08002dc4 	.word	0x08002dc4
  ldr r2, =_sbss
 8001740:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001744:	20000108 	.word	0x20000108

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <HAL_Init+0x28>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <HAL_Init+0x28>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 f923 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001762:	200f      	movs	r0, #15
 8001764:	f000 f808 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff fe28 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40022000 	.word	0x40022000

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f93b 	bl	8001a12 <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f000 f903 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000028 	.word	0x20000028
 80017d0:	20000034 	.word	0x20000034
 80017d4:	20000030 	.word	0x20000030

080017d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_IncTick+0x1c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_IncTick+0x20>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a03      	ldr	r2, [pc, #12]	@ (80017f8 <HAL_IncTick+0x20>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000034 	.word	0x20000034
 80017f8:	20000104 	.word	0x20000104

080017fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b02      	ldr	r3, [pc, #8]	@ (800180c <HAL_GetTick+0x10>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000104 	.word	0x20000104

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4906      	ldr	r1, [pc, #24]	@ (80018a8 <__NVIC_EnableIRQ+0x34>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	@ (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	@ 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff90 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff2d 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff42 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff90 	bl	8001900 <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5f 	bl	80018ac <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff35 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa2 	bl	8001964 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b08b      	sub	sp, #44	@ 0x2c
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	e161      	b.n	8001d04 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a40:	2201      	movs	r2, #1
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8150 	bne.w	8001cfe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a97      	ldr	r2, [pc, #604]	@ (8001cc0 <HAL_GPIO_Init+0x294>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d05e      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a68:	4a95      	ldr	r2, [pc, #596]	@ (8001cc0 <HAL_GPIO_Init+0x294>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d875      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a6e:	4a95      	ldr	r2, [pc, #596]	@ (8001cc4 <HAL_GPIO_Init+0x298>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d058      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a74:	4a93      	ldr	r2, [pc, #588]	@ (8001cc4 <HAL_GPIO_Init+0x298>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d86f      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a7a:	4a93      	ldr	r2, [pc, #588]	@ (8001cc8 <HAL_GPIO_Init+0x29c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d052      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a80:	4a91      	ldr	r2, [pc, #580]	@ (8001cc8 <HAL_GPIO_Init+0x29c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d869      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a86:	4a91      	ldr	r2, [pc, #580]	@ (8001ccc <HAL_GPIO_Init+0x2a0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d04c      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a8c:	4a8f      	ldr	r2, [pc, #572]	@ (8001ccc <HAL_GPIO_Init+0x2a0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d863      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a92:	4a8f      	ldr	r2, [pc, #572]	@ (8001cd0 <HAL_GPIO_Init+0x2a4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d046      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
 8001a98:	4a8d      	ldr	r2, [pc, #564]	@ (8001cd0 <HAL_GPIO_Init+0x2a4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d85d      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001a9e:	2b12      	cmp	r3, #18
 8001aa0:	d82a      	bhi.n	8001af8 <HAL_GPIO_Init+0xcc>
 8001aa2:	2b12      	cmp	r3, #18
 8001aa4:	d859      	bhi.n	8001b5a <HAL_GPIO_Init+0x12e>
 8001aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aac <HAL_GPIO_Init+0x80>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001b27 	.word	0x08001b27
 8001ab0:	08001b01 	.word	0x08001b01
 8001ab4:	08001b13 	.word	0x08001b13
 8001ab8:	08001b55 	.word	0x08001b55
 8001abc:	08001b5b 	.word	0x08001b5b
 8001ac0:	08001b5b 	.word	0x08001b5b
 8001ac4:	08001b5b 	.word	0x08001b5b
 8001ac8:	08001b5b 	.word	0x08001b5b
 8001acc:	08001b5b 	.word	0x08001b5b
 8001ad0:	08001b5b 	.word	0x08001b5b
 8001ad4:	08001b5b 	.word	0x08001b5b
 8001ad8:	08001b5b 	.word	0x08001b5b
 8001adc:	08001b5b 	.word	0x08001b5b
 8001ae0:	08001b5b 	.word	0x08001b5b
 8001ae4:	08001b5b 	.word	0x08001b5b
 8001ae8:	08001b5b 	.word	0x08001b5b
 8001aec:	08001b5b 	.word	0x08001b5b
 8001af0:	08001b09 	.word	0x08001b09
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	4a76      	ldr	r2, [pc, #472]	@ (8001cd4 <HAL_GPIO_Init+0x2a8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001afe:	e02c      	b.n	8001b5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e029      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e024      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	3308      	adds	r3, #8
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e01f      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	330c      	adds	r3, #12
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e01a      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e013      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	611a      	str	r2, [r3, #16]
          break;
 8001b46:	e009      	b.n	8001b5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	615a      	str	r2, [r3, #20]
          break;
 8001b52:	e003      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x130>
          break;
 8001b5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2bff      	cmp	r3, #255	@ 0xff
 8001b60:	d801      	bhi.n	8001b66 <HAL_GPIO_Init+0x13a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	e001      	b.n	8001b6a <HAL_GPIO_Init+0x13e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2bff      	cmp	r3, #255	@ 0xff
 8001b70:	d802      	bhi.n	8001b78 <HAL_GPIO_Init+0x14c>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x152>
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	3b08      	subs	r3, #8
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	210f      	movs	r1, #15
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	6a39      	ldr	r1, [r7, #32]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80a9 	beq.w	8001cfe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bac:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <HAL_GPIO_Init+0x2ac>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	@ (8001cd8 <HAL_GPIO_Init+0x2ac>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <HAL_GPIO_Init+0x2ac>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bc4:	4a45      	ldr	r2, [pc, #276]	@ (8001cdc <HAL_GPIO_Init+0x2b0>)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce0 <HAL_GPIO_Init+0x2b4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_GPIO_Init+0x1e0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce4 <HAL_GPIO_Init+0x2b8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x1dc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_GPIO_Init+0x1d8>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e004      	b.n	8001c0e <HAL_GPIO_Init+0x1e2>
 8001c04:	2303      	movs	r3, #3
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0x1e2>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_GPIO_Init+0x1e2>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c10:	f002 0203 	and.w	r2, r2, #3
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	4093      	lsls	r3, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c1e:	492f      	ldr	r1, [pc, #188]	@ (8001cdc <HAL_GPIO_Init+0x2b0>)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c38:	4b2c      	ldr	r3, [pc, #176]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	492b      	ldr	r1, [pc, #172]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c46:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4927      	ldr	r1, [pc, #156]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c60:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	4921      	ldr	r1, [pc, #132]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	491d      	ldr	r1, [pc, #116]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c88:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4917      	ldr	r1, [pc, #92]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4913      	ldr	r1, [pc, #76]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01f      	beq.n	8001cf0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	490d      	ldr	r1, [pc, #52]	@ (8001cec <HAL_GPIO_Init+0x2c0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e01f      	b.n	8001cfe <HAL_GPIO_Init+0x2d2>
 8001cbe:	bf00      	nop
 8001cc0:	10320000 	.word	0x10320000
 8001cc4:	10310000 	.word	0x10310000
 8001cc8:	10220000 	.word	0x10220000
 8001ccc:	10210000 	.word	0x10210000
 8001cd0:	10120000 	.word	0x10120000
 8001cd4:	10110000 	.word	0x10110000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_GPIO_Init+0x2f4>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	4909      	ldr	r1, [pc, #36]	@ (8001d20 <HAL_GPIO_Init+0x2f4>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f47f ae96 	bne.w	8001a40 <HAL_GPIO_Init+0x14>
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	@ 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e001      	b.n	8001d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d62:	787b      	ldrb	r3, [r7, #1]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d68:	887a      	ldrh	r2, [r7, #2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6e:	e003      	b.n	8001d78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e272      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8087 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd4:	4b92      	ldr	r3, [pc, #584]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d00c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de0:	4b8f      	ldr	r3, [pc, #572]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d112      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
 8001dec:	4b8c      	ldr	r3, [pc, #560]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b89      	ldr	r3, [pc, #548]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x12c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d168      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e24c      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x76>
 8001e1c:	4b80      	ldr	r3, [pc, #512]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a7f      	ldr	r2, [pc, #508]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e02e      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x98>
 8001e32:	4b7b      	ldr	r3, [pc, #492]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7a      	ldr	r2, [pc, #488]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b78      	ldr	r3, [pc, #480]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a77      	ldr	r2, [pc, #476]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0xbc>
 8001e56:	4b72      	ldr	r3, [pc, #456]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a71      	ldr	r2, [pc, #452]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b6f      	ldr	r3, [pc, #444]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6e      	ldr	r2, [pc, #440]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e70:	4b6b      	ldr	r3, [pc, #428]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6a      	ldr	r2, [pc, #424]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b68      	ldr	r3, [pc, #416]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a67      	ldr	r2, [pc, #412]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fcb4 	bl	80017fc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fcb0 	bl	80017fc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	@ 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e200      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe4>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fca0 	bl	80017fc <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fc9c 	bl	80017fc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	@ 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1ec      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b53      	ldr	r3, [pc, #332]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x10c>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d063      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eee:	4b4c      	ldr	r3, [pc, #304]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001efa:	4b49      	ldr	r3, [pc, #292]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x18c>
 8001f06:	4b46      	ldr	r3, [pc, #280]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	4b43      	ldr	r3, [pc, #268]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x176>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1c0      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4939      	ldr	r1, [pc, #228]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	e03a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b36      	ldr	r3, [pc, #216]	@ (8002024 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fc55 	bl	80017fc <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff fc51 	bl	80017fc <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1a1      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4927      	ldr	r1, [pc, #156]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8a:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fc34 	bl	80017fc <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f98:	f7ff fc30 	bl	80017fc <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e180      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03a      	beq.n	8002038 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fca:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fc14 	bl	80017fc <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fc10 	bl	80017fc <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e160      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 fa9c 	bl	8002534 <RCC_Delay>
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <HAL_RCC_OscConfig+0x274>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002004:	f7ff fbfa 	bl	80017fc <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200a:	e00f      	b.n	800202c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff fbf6 	bl	80017fc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d908      	bls.n	800202c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e146      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	42420000 	.word	0x42420000
 8002028:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	4b92      	ldr	r3, [pc, #584]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e9      	bne.n	800200c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80a6 	beq.w	8002192 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204a:	4b8b      	ldr	r3, [pc, #556]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10d      	bne.n	8002072 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	4b88      	ldr	r3, [pc, #544]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a87      	ldr	r2, [pc, #540]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b85      	ldr	r3, [pc, #532]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b82      	ldr	r3, [pc, #520]	@ (800227c <HAL_RCC_OscConfig+0x4c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d118      	bne.n	80020b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207e:	4b7f      	ldr	r3, [pc, #508]	@ (800227c <HAL_RCC_OscConfig+0x4c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a7e      	ldr	r2, [pc, #504]	@ (800227c <HAL_RCC_OscConfig+0x4c8>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7ff fbb7 	bl	80017fc <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002092:	f7ff fbb3 	bl	80017fc <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	@ 0x64
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e103      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	4b75      	ldr	r3, [pc, #468]	@ (800227c <HAL_RCC_OscConfig+0x4c8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x312>
 80020b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	e02d      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x334>
 80020ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a69      	ldr	r2, [pc, #420]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b67      	ldr	r3, [pc, #412]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a66      	ldr	r2, [pc, #408]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	e01c      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d10c      	bne.n	800210a <HAL_RCC_OscConfig+0x356>
 80020f0:	4b61      	ldr	r3, [pc, #388]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a60      	ldr	r2, [pc, #384]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a5d      	ldr	r2, [pc, #372]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e00b      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 800210a:	4b5b      	ldr	r3, [pc, #364]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a5a      	ldr	r2, [pc, #360]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6213      	str	r3, [r2, #32]
 8002116:	4b58      	ldr	r3, [pc, #352]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a57      	ldr	r2, [pc, #348]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d015      	beq.n	8002156 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff fb67 	bl	80017fc <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff fb63 	bl	80017fc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0b1      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	4b4b      	ldr	r3, [pc, #300]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ee      	beq.n	8002132 <HAL_RCC_OscConfig+0x37e>
 8002154:	e014      	b.n	8002180 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff fb51 	bl	80017fc <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff fb4d 	bl	80017fc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e09b      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	4b40      	ldr	r3, [pc, #256]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ee      	bne.n	800215e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a3b      	ldr	r2, [pc, #236]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8087 	beq.w	80022aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219c:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d061      	beq.n	800226c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d146      	bne.n	800223e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	4b33      	ldr	r3, [pc, #204]	@ (8002280 <HAL_RCC_OscConfig+0x4cc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff fb21 	bl	80017fc <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff fb1d 	bl	80017fc <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e06d      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e4:	d108      	bne.n	80021f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021e6:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4921      	ldr	r1, [pc, #132]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a19      	ldr	r1, [r3, #32]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	430b      	orrs	r3, r1
 800220a:	491b      	ldr	r1, [pc, #108]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7ff faf1 	bl	80017fc <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff faed 	bl	80017fc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e03d      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x46a>
 800223c:	e035      	b.n	80022aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <HAL_RCC_OscConfig+0x4cc>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fada 	bl	80017fc <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff fad6 	bl	80017fc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e026      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x498>
 800226a:	e01e      	b.n	80022aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d107      	bne.n	8002284 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e019      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
 8002278:	40021000 	.word	0x40021000
 800227c:	40007000 	.word	0x40007000
 8002280:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_OscConfig+0x500>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	429a      	cmp	r2, r3
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000

080022b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0d0      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d910      	bls.n	80022fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b67      	ldr	r3, [pc, #412]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 0207 	bic.w	r2, r3, #7
 80022e2:	4965      	ldr	r1, [pc, #404]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b63      	ldr	r3, [pc, #396]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0b8      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002314:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a58      	ldr	r2, [pc, #352]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800231e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800232c:	4b53      	ldr	r3, [pc, #332]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a52      	ldr	r2, [pc, #328]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002338:	4b50      	ldr	r3, [pc, #320]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	494d      	ldr	r1, [pc, #308]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d040      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b47      	ldr	r3, [pc, #284]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d115      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07f      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	4b41      	ldr	r3, [pc, #260]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e073      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	4b3d      	ldr	r3, [pc, #244]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06b      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002396:	4b39      	ldr	r3, [pc, #228]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4936      	ldr	r1, [pc, #216]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a8:	f7ff fa28 	bl	80017fc <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7ff fa24 	bl	80017fc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e053      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 020c 	and.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1eb      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d210      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0207 	bic.w	r2, r3, #7
 80023ee:	4922      	ldr	r1, [pc, #136]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e032      	b.n	800246e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4916      	ldr	r1, [pc, #88]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002432:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	490e      	ldr	r1, [pc, #56]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002446:	f000 f821 	bl	800248c <HAL_RCC_GetSysClockFreq>
 800244a:	4602      	mov	r2, r0
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	490a      	ldr	r1, [pc, #40]	@ (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	5ccb      	ldrb	r3, [r1, r3]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <HAL_RCC_ClockConfig+0x1cc>)
 8002460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002462:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_RCC_ClockConfig+0x1d0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f986 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40022000 	.word	0x40022000
 800247c:	40021000 	.word	0x40021000
 8002480:	08002d98 	.word	0x08002d98
 8002484:	20000028 	.word	0x20000028
 8002488:	20000030 	.word	0x20000030

0800248c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x94>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d002      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x30>
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x36>
 80024ba:	e027      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x98>)
 80024be:	613b      	str	r3, [r7, #16]
      break;
 80024c0:	e027      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	0c9b      	lsrs	r3, r3, #18
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	4a17      	ldr	r2, [pc, #92]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d010      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x94>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	0c5b      	lsrs	r3, r3, #17
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	4a11      	ldr	r2, [pc, #68]	@ (800252c <HAL_RCC_GetSysClockFreq+0xa0>)
 80024e6:	5cd3      	ldrb	r3, [r2, r3]
 80024e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ee:	fb03 f202 	mul.w	r2, r3, r2
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e004      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	613b      	str	r3, [r7, #16]
      break;
 800250a:	e002      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x98>)
 800250e:	613b      	str	r3, [r7, #16]
      break;
 8002510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002512:	693b      	ldr	r3, [r7, #16]
}
 8002514:	4618      	mov	r0, r3
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	007a1200 	.word	0x007a1200
 8002528:	08002da8 	.word	0x08002da8
 800252c:	08002db8 	.word	0x08002db8
 8002530:	003d0900 	.word	0x003d0900

08002534 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <RCC_Delay+0x34>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <RCC_Delay+0x38>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0a5b      	lsrs	r3, r3, #9
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002550:	bf00      	nop
  }
  while (Delay --);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1e5a      	subs	r2, r3, #1
 8002556:	60fa      	str	r2, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f9      	bne.n	8002550 <RCC_Delay+0x1c>
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	20000028 	.word	0x20000028
 800256c:	10624dd3 	.word	0x10624dd3

08002570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e041      	b.n	8002606 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe ff42 	bl	8001420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f000 fa56 	bl	8002a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d001      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e035      	b.n	8002694 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d009      	beq.n	800265e <HAL_TIM_Base_Start_IT+0x4e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002652:	d004      	beq.n	800265e <HAL_TIM_Base_Start_IT+0x4e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a12      	ldr	r2, [pc, #72]	@ (80026a4 <HAL_TIM_Base_Start_IT+0x94>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d111      	bne.n	8002682 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b06      	cmp	r3, #6
 800266e:	d010      	beq.n	8002692 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002680:	e007      	b.n	8002692 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40000400 	.word	0x40000400

080026a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d020      	beq.n	800270c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0202 	mvn.w	r2, #2
 80026dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f998 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f98b 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f99a 	bl	8002a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d020      	beq.n	8002758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01b      	beq.n	8002758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0204 	mvn.w	r2, #4
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f972 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f965 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f974 	bl	8002a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d020      	beq.n	80027a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01b      	beq.n	80027a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0208 	mvn.w	r2, #8
 8002774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2204      	movs	r2, #4
 800277a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f94c 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002790:	e005      	b.n	800279e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f93f 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f94e 	bl	8002a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d020      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01b      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0210 	mvn.w	r2, #16
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2208      	movs	r2, #8
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f926 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f919 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f928 	bl	8002a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0201 	mvn.w	r2, #1
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fcb8 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa6f 	bl	8002d16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8f8 	bl	8002a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0220 	mvn.w	r2, #32
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fa42 	bl	8002d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_TIM_ConfigClockSource+0x1c>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0b4      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x186>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028dc:	d03e      	beq.n	800295c <HAL_TIM_ConfigClockSource+0xd4>
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e2:	f200 8087 	bhi.w	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ea:	f000 8086 	beq.w	80029fa <HAL_TIM_ConfigClockSource+0x172>
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f2:	d87f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028f4:	2b70      	cmp	r3, #112	@ 0x70
 80028f6:	d01a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0xa6>
 80028f8:	2b70      	cmp	r3, #112	@ 0x70
 80028fa:	d87b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b60      	cmp	r3, #96	@ 0x60
 80028fe:	d050      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002900:	2b60      	cmp	r3, #96	@ 0x60
 8002902:	d877      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b50      	cmp	r3, #80	@ 0x50
 8002906:	d03c      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xfa>
 8002908:	2b50      	cmp	r3, #80	@ 0x50
 800290a:	d873      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 800290c:	2b40      	cmp	r3, #64	@ 0x40
 800290e:	d058      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002910:	2b40      	cmp	r3, #64	@ 0x40
 8002912:	d86f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002914:	2b30      	cmp	r3, #48	@ 0x30
 8002916:	d064      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002918:	2b30      	cmp	r3, #48	@ 0x30
 800291a:	d86b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d060      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002920:	2b20      	cmp	r3, #32
 8002922:	d867      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002928:	2b10      	cmp	r3, #16
 800292a:	d05a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 800292c:	e062      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800293e:	f000 f96a 	bl	8002c16 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	609a      	str	r2, [r3, #8]
      break;
 800295a:	e04f      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	f000 f953 	bl	8002c16 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800297e:	609a      	str	r2, [r3, #8]
      break;
 8002980:	e03c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f8ca 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2150      	movs	r1, #80	@ 0x50
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f921 	bl	8002be2 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e02c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 f8e8 	bl	8002b84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2160      	movs	r1, #96	@ 0x60
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f911 	bl	8002be2 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e01c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	461a      	mov	r2, r3
 80029d0:	f000 f8aa 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2140      	movs	r1, #64	@ 0x40
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f901 	bl	8002be2 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e00c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f000 f8f8 	bl	8002be2 <TIM_ITRx_SetConfig>
      break;
 80029f2:	e003      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e000      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
	...

08002a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <TIM_Base_SetConfig+0xc0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_Base_SetConfig+0x28>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a7e:	d003      	beq.n	8002a88 <TIM_Base_SetConfig+0x28>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a28      	ldr	r2, [pc, #160]	@ (8002b24 <TIM_Base_SetConfig+0xc4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d108      	bne.n	8002a9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a20      	ldr	r2, [pc, #128]	@ (8002b20 <TIM_Base_SetConfig+0xc0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <TIM_Base_SetConfig+0x52>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa8:	d003      	beq.n	8002ab2 <TIM_Base_SetConfig+0x52>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <TIM_Base_SetConfig+0xc4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d108      	bne.n	8002ac4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <TIM_Base_SetConfig+0xc0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d103      	bne.n	8002af8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f023 0201 	bic.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]
  }
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400

08002b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f023 0201 	bic.w	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 030a 	bic.w	r3, r3, #10
 8002b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0210 	bic.w	r2, r3, #16
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	031b      	lsls	r3, r3, #12
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	621a      	str	r2, [r3, #32]
}
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f043 0307 	orr.w	r3, r3, #7
 8002c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	609a      	str	r2, [r3, #8]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b087      	sub	sp, #28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	021a      	lsls	r2, r3, #8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	609a      	str	r2, [r3, #8]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e041      	b.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d009      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb8:	d004      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a10      	ldr	r2, [pc, #64]	@ (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d10c      	bne.n	8002cde <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400

08002d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <memset>:
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4402      	add	r2, r0
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d100      	bne.n	8002d32 <memset+0xa>
 8002d30:	4770      	bx	lr
 8002d32:	f803 1b01 	strb.w	r1, [r3], #1
 8002d36:	e7f9      	b.n	8002d2c <memset+0x4>

08002d38 <__libc_init_array>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	2600      	movs	r6, #0
 8002d3c:	4d0c      	ldr	r5, [pc, #48]	@ (8002d70 <__libc_init_array+0x38>)
 8002d3e:	4c0d      	ldr	r4, [pc, #52]	@ (8002d74 <__libc_init_array+0x3c>)
 8002d40:	1b64      	subs	r4, r4, r5
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	42a6      	cmp	r6, r4
 8002d46:	d109      	bne.n	8002d5c <__libc_init_array+0x24>
 8002d48:	f000 f81a 	bl	8002d80 <_init>
 8002d4c:	2600      	movs	r6, #0
 8002d4e:	4d0a      	ldr	r5, [pc, #40]	@ (8002d78 <__libc_init_array+0x40>)
 8002d50:	4c0a      	ldr	r4, [pc, #40]	@ (8002d7c <__libc_init_array+0x44>)
 8002d52:	1b64      	subs	r4, r4, r5
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	42a6      	cmp	r6, r4
 8002d58:	d105      	bne.n	8002d66 <__libc_init_array+0x2e>
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d60:	4798      	blx	r3
 8002d62:	3601      	adds	r6, #1
 8002d64:	e7ee      	b.n	8002d44 <__libc_init_array+0xc>
 8002d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6a:	4798      	blx	r3
 8002d6c:	3601      	adds	r6, #1
 8002d6e:	e7f2      	b.n	8002d56 <__libc_init_array+0x1e>
 8002d70:	08002dbc 	.word	0x08002dbc
 8002d74:	08002dbc 	.word	0x08002dbc
 8002d78:	08002dbc 	.word	0x08002dbc
 8002d7c:	08002dc0 	.word	0x08002dc0

08002d80 <_init>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr

08002d8c <_fini>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr
